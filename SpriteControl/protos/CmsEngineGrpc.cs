// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/cmsEngine.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Com.CmsEngine.Grpc {
  public static class CmsEngineService
  {
    static readonly string __ServiceName = "com.cmsEngine.grpc.CmsEngineService";

    static readonly Marshaller<global::Com.CmsEngine.Grpc.RpcVoid> __Marshaller_RpcVoid = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.CmsEngine.Grpc.RpcVoid.Parser.ParseFrom);
    static readonly Marshaller<global::Com.CmsEngine.Grpc.Ident> __Marshaller_Ident = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.CmsEngine.Grpc.Ident.Parser.ParseFrom);
    static readonly Marshaller<global::Com.CmsEngine.Grpc.Elmnt> __Marshaller_Elmnt = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.CmsEngine.Grpc.Elmnt.Parser.ParseFrom);
    static readonly Marshaller<global::Com.CmsEngine.Grpc.ElmntList> __Marshaller_ElmntList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.CmsEngine.Grpc.ElmntList.Parser.ParseFrom);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid> __Method_ping = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "ping",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.Ident, global::Com.CmsEngine.Grpc.Elmnt> __Method_get = new Method<global::Com.CmsEngine.Grpc.Ident, global::Com.CmsEngine.Grpc.Elmnt>(
        MethodType.Unary,
        __ServiceName,
        "get",
        __Marshaller_Ident,
        __Marshaller_Elmnt);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.ElmntList> __Method_getAll = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.ElmntList>(
        MethodType.Unary,
        __ServiceName,
        "getAll",
        __Marshaller_RpcVoid,
        __Marshaller_ElmntList);

    static readonly Method<global::Com.CmsEngine.Grpc.Elmnt, global::Com.CmsEngine.Grpc.RpcVoid> __Method_put = new Method<global::Com.CmsEngine.Grpc.Elmnt, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "put",
        __Marshaller_Elmnt,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.Elmnt, global::Com.CmsEngine.Grpc.RpcVoid> __Method_putByKey = new Method<global::Com.CmsEngine.Grpc.Elmnt, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "putByKey",
        __Marshaller_Elmnt,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.Elmnt, global::Com.CmsEngine.Grpc.RpcVoid> __Method_post = new Method<global::Com.CmsEngine.Grpc.Elmnt, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "post",
        __Marshaller_Elmnt,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.Ident, global::Com.CmsEngine.Grpc.RpcVoid> __Method_destroy = new Method<global::Com.CmsEngine.Grpc.Ident, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "destroy",
        __Marshaller_Ident,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid> __Method_clear = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "clear",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.Ident, global::Com.CmsEngine.Grpc.Elmnt> __Method_getOneElmntStream = new Method<global::Com.CmsEngine.Grpc.Ident, global::Com.CmsEngine.Grpc.Elmnt>(
        MethodType.ServerStreaming,
        __ServiceName,
        "getOneElmntStream",
        __Marshaller_Ident,
        __Marshaller_Elmnt);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.CmsEngine.Grpc.CmsEngineReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CmsEngineService</summary>
    public abstract class CmsEngineServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> ping(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.Elmnt> get(global::Com.CmsEngine.Grpc.Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.ElmntList> getAll(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> put(global::Com.CmsEngine.Grpc.Elmnt request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  nur 1 param gestattet, identifikation Ã¼ber id,key
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> putByKey(global::Com.CmsEngine.Grpc.Elmnt request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> post(global::Com.CmsEngine.Grpc.Elmnt request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> destroy(global::Com.CmsEngine.Grpc.Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> clear(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task getOneElmntStream(global::Com.CmsEngine.Grpc.Ident request, IServerStreamWriter<global::Com.CmsEngine.Grpc.Elmnt> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CmsEngineService</summary>
    public class CmsEngineServiceClient : ClientBase<CmsEngineServiceClient>
    {
      /// <summary>Creates a new client for CmsEngineService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CmsEngineServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CmsEngineService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CmsEngineServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CmsEngineServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CmsEngineServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Com.CmsEngine.Grpc.RpcVoid ping(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ping(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid ping(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ping, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> pingAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return pingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> pingAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ping, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.Elmnt get(global::Com.CmsEngine.Grpc.Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.Elmnt get(global::Com.CmsEngine.Grpc.Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_get, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.Elmnt> getAsync(global::Com.CmsEngine.Grpc.Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.Elmnt> getAsync(global::Com.CmsEngine.Grpc.Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_get, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.ElmntList getAll(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.ElmntList getAll(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getAll, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.ElmntList> getAllAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.ElmntList> getAllAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getAll, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid put(global::Com.CmsEngine.Grpc.Elmnt request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return put(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid put(global::Com.CmsEngine.Grpc.Elmnt request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_put, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> putAsync(global::Com.CmsEngine.Grpc.Elmnt request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> putAsync(global::Com.CmsEngine.Grpc.Elmnt request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_put, null, options, request);
      }
      /// <summary>
      ///  nur 1 param gestattet, identifikation Ã¼ber id,key
      /// </summary>
      public virtual global::Com.CmsEngine.Grpc.RpcVoid putByKey(global::Com.CmsEngine.Grpc.Elmnt request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putByKey(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  nur 1 param gestattet, identifikation Ã¼ber id,key
      /// </summary>
      public virtual global::Com.CmsEngine.Grpc.RpcVoid putByKey(global::Com.CmsEngine.Grpc.Elmnt request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_putByKey, null, options, request);
      }
      /// <summary>
      ///  nur 1 param gestattet, identifikation Ã¼ber id,key
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> putByKeyAsync(global::Com.CmsEngine.Grpc.Elmnt request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putByKeyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  nur 1 param gestattet, identifikation Ã¼ber id,key
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> putByKeyAsync(global::Com.CmsEngine.Grpc.Elmnt request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_putByKey, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid post(global::Com.CmsEngine.Grpc.Elmnt request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return post(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid post(global::Com.CmsEngine.Grpc.Elmnt request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_post, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> postAsync(global::Com.CmsEngine.Grpc.Elmnt request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return postAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> postAsync(global::Com.CmsEngine.Grpc.Elmnt request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_post, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid destroy(global::Com.CmsEngine.Grpc.Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return destroy(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid destroy(global::Com.CmsEngine.Grpc.Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_destroy, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> destroyAsync(global::Com.CmsEngine.Grpc.Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return destroyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> destroyAsync(global::Com.CmsEngine.Grpc.Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_destroy, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid clear(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return clear(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid clear(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_clear, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> clearAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return clearAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> clearAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_clear, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::Com.CmsEngine.Grpc.Elmnt> getOneElmntStream(global::Com.CmsEngine.Grpc.Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getOneElmntStream(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Com.CmsEngine.Grpc.Elmnt> getOneElmntStream(global::Com.CmsEngine.Grpc.Ident request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getOneElmntStream, null, options, request);
      }
      protected override CmsEngineServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CmsEngineServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CmsEngineServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ping, serviceImpl.ping)
          .AddMethod(__Method_get, serviceImpl.get)
          .AddMethod(__Method_getAll, serviceImpl.getAll)
          .AddMethod(__Method_put, serviceImpl.put)
          .AddMethod(__Method_putByKey, serviceImpl.putByKey)
          .AddMethod(__Method_post, serviceImpl.post)
          .AddMethod(__Method_destroy, serviceImpl.destroy)
          .AddMethod(__Method_clear, serviceImpl.clear)
          .AddMethod(__Method_getOneElmntStream, serviceImpl.getOneElmntStream).Build();
    }

  }
  public static class AdminService
  {
    static readonly string __ServiceName = "com.cmsEngine.grpc.AdminService";

    static readonly Marshaller<global::Com.CmsEngine.Grpc.RpcVoid> __Marshaller_RpcVoid = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.CmsEngine.Grpc.RpcVoid.Parser.ParseFrom);
    static readonly Marshaller<global::Com.CmsEngine.Grpc.Elmnt> __Marshaller_Elmnt = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.CmsEngine.Grpc.Elmnt.Parser.ParseFrom);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid> __Method_create = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "create",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid> __Method_drop = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "drop",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid> __Method_insertDefaultData = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "insertDefaultData",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid> __Method_backup = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "backup",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.Elmnt> __Method_getLogs = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.Elmnt>(
        MethodType.Unary,
        __ServiceName,
        "getLogs",
        __Marshaller_RpcVoid,
        __Marshaller_Elmnt);

    static readonly Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.Elmnt> __Method_getStatistics = new Method<global::Com.CmsEngine.Grpc.RpcVoid, global::Com.CmsEngine.Grpc.Elmnt>(
        MethodType.Unary,
        __ServiceName,
        "getStatistics",
        __Marshaller_RpcVoid,
        __Marshaller_Elmnt);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.CmsEngine.Grpc.CmsEngineReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of AdminService</summary>
    public abstract class AdminServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> create(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> drop(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> insertDefaultData(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.RpcVoid> backup(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.Elmnt> getLogs(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.CmsEngine.Grpc.Elmnt> getStatistics(global::Com.CmsEngine.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AdminService</summary>
    public class AdminServiceClient : ClientBase<AdminServiceClient>
    {
      /// <summary>Creates a new client for AdminService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AdminServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AdminService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AdminServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AdminServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AdminServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Com.CmsEngine.Grpc.RpcVoid create(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid create(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> createAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return createAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> createAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_create, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid drop(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return drop(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid drop(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_drop, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> dropAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return dropAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> dropAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_drop, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid insertDefaultData(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertDefaultData(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid insertDefaultData(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_insertDefaultData, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> insertDefaultDataAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertDefaultDataAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> insertDefaultDataAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_insertDefaultData, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid backup(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return backup(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.RpcVoid backup(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_backup, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> backupAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return backupAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.RpcVoid> backupAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_backup, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.Elmnt getLogs(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getLogs(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.Elmnt getLogs(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getLogs, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.Elmnt> getLogsAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getLogsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.Elmnt> getLogsAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getLogs, null, options, request);
      }
      public virtual global::Com.CmsEngine.Grpc.Elmnt getStatistics(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getStatistics(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.CmsEngine.Grpc.Elmnt getStatistics(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getStatistics, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.Elmnt> getStatisticsAsync(global::Com.CmsEngine.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getStatisticsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.CmsEngine.Grpc.Elmnt> getStatisticsAsync(global::Com.CmsEngine.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getStatistics, null, options, request);
      }
      protected override AdminServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AdminServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(AdminServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_create, serviceImpl.create)
          .AddMethod(__Method_drop, serviceImpl.drop)
          .AddMethod(__Method_insertDefaultData, serviceImpl.insertDefaultData)
          .AddMethod(__Method_backup, serviceImpl.backup)
          .AddMethod(__Method_getLogs, serviceImpl.getLogs)
          .AddMethod(__Method_getStatistics, serviceImpl.getStatistics).Build();
    }

  }
}
#endregion
