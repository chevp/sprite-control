// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gltfEngine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Gltf.Grpc {

  /// <summary>Holder for reflection information generated from gltfEngine.proto</summary>
  public static partial class GltfEngineReflection {

    #region Descriptor
    /// <summary>File descriptor for gltfEngine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GltfEngineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBnbHRmRW5naW5lLnByb3RvEg1jb20uZ2x0Zi5ncnBjGgxjb21tb24ucHJv",
            "dG8i2AMKCUdsdGZNb2RlbBIjCgVhc3NldBgBIAEoCzIULmNvbS5nbHRmLmdy",
            "cGMuQXNzZXQSKgoJYWNjZXNzb3JzGAIgAygLMhcuY29tLmdsdGYuZ3JwYy5B",
            "Y2Nlc3NvchIuCgtidWZmZXJWaWV3cxgDIAMoCzIZLmNvbS5nbHRmLmdycGMu",
            "QnVmZmVyVmlldxImCgdidWZmZXJzGAQgAygLMhUuY29tLmdsdGYuZ3JwYy5C",
            "dWZmZXISJAoGaW1hZ2VzGAUgAygLMhQuY29tLmdsdGYuZ3JwYy5JbWFnZRIq",
            "CgltYXRlcmlhbHMYBiADKAsyFy5jb20uZ2x0Zi5ncnBjLk1hdGVyaWFsEiMK",
            "Bm1lc2hlcxgHIAMoCzITLmNvbS5nbHRmLmdycGMuTWVzaBIiCgVub2RlcxgI",
            "IAMoCzITLmNvbS5nbHRmLmdycGMuTm9kZRIoCghzYW1wbGVycxgJIAMoCzIW",
            "LmNvbS5nbHRmLmdycGMuU2FtcGxlchIkCgZzY2VuZXMYCiADKAsyFC5jb20u",
            "Z2x0Zi5ncnBjLlNjZW5lEg0KBXNjZW5lGAsgASgFEigKCHRleHR1cmVzGAwg",
            "AygLMhYuY29tLmdsdGYuZ3JwYy5UZXh0dXJlIisKBUFzc2V0EhEKCWdlbmVy",
            "YXRvchgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJImwKCEFjY2Vzc29yEhIKCmJ1",
            "ZmZlclZpZXcYASABKAUSFQoNY29tcG9uZW50VHlwZRgCIAEoBRINCgVjb3Vu",
            "dBgDIAEoBRILCgNtYXgYBCADKAISCwoDbWluGAUgAygCEgwKBHR5cGUYBiAB",
            "KAkiVAoKQnVmZmVyVmlldxIOCgZidWZmZXIYASABKAUSEgoKYnl0ZUxlbmd0",
            "aBgCIAEoBRISCgpieXRlT2Zmc2V0GAMgASgFEg4KBnRhcmdldBgEIAEoBSI1",
            "CgZCdWZmZXISEgoKYnl0ZUxlbmd0aBgBIAEoBRILCgN1cmkYAiABKAkSCgoC",
            "aWQYAyABKA0iQAoFSW1hZ2USEAoIbWltZVR5cGUYASABKAkSDAoEbmFtZRgC",
            "IAEoCRILCgN1cmkYAyABKAkSCgoCaWQYBCABKA0iIAoPTWF0ZXJpYWxUZXh0",
            "dXJlEg0KBWluZGV4GAEgASgFItwBChRQYnJNZXRhbGxpY1JvdWdobmVzcxI4",
            "ChBiYXNlQ29sb3JUZXh0dXJlGAEgASgLMh4uY29tLmdsdGYuZ3JwYy5NYXRl",
            "cmlhbFRleHR1cmUSFwoPYmFzZUNvbG9yRmFjdG9yGAIgAygCEkAKGG1ldGFs",
            "bGljUm91Z2huZXNzVGV4dHVyZRgDIAEoCzIeLmNvbS5nbHRmLmdycGMuTWF0",
            "ZXJpYWxUZXh0dXJlEhYKDm1ldGFsbGljRmFjdG9yGAQgASgCEhcKD3JvdWdo",
            "bmVzc0ZhY3RvchgFIAEoAiKyAgoITWF0ZXJpYWwSDAoEbmFtZRgBIAEoCRIT",
            "Cgtkb3VibGVTaWRlZBgCIAEoCBIWCg5lbWlzc2l2ZUZhY3RvchgDIAMoBRI3",
            "Cg9lbWlzc2l2ZVRleHR1cmUYBCABKAsyHi5jb20uZ2x0Zi5ncnBjLk1hdGVy",
            "aWFsVGV4dHVyZRI1Cg1ub3JtYWxUZXh0dXJlGAUgASgLMh4uY29tLmdsdGYu",
            "Z3JwYy5NYXRlcmlhbFRleHR1cmUSOAoQb2NjbHVzaW9uVGV4dHVyZRgGIAEo",
            "CzIeLmNvbS5nbHRmLmdycGMuTWF0ZXJpYWxUZXh0dXJlEkEKFHBick1ldGFs",
            "bGljUm91Z2huZXNzGAcgASgLMiMuY29tLmdsdGYuZ3JwYy5QYnJNZXRhbGxp",
            "Y1JvdWdobmVzcyJCCgRNZXNoEgwKBG5hbWUYASABKAkSLAoKcHJpbWl0aXZl",
            "cxgCIAMoCzIYLmNvbS5nbHRmLmdycGMuUHJpbWl0aXZlIp8BCglQcmltaXRp",
            "dmUSPAoKYXR0cmlidXRlcxgBIAMoCzIoLmNvbS5nbHRmLmdycGMuUHJpbWl0",
            "aXZlLkF0dHJpYnV0ZXNFbnRyeRIPCgdpbmRpY2VzGAIgASgFEhAKCG1hdGVy",
            "aWFsGAMgASgFGjEKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSDQoF",
            "dmFsdWUYAiABKAU6AjgBIlgKBE5vZGUSDAoEbWVzaBgBIAEoBRIMCgRuYW1l",
            "GAIgASgJEg0KBXNjYWxlGAMgAygCEhMKC3RyYW5zbGF0aW9uGAQgAygCEhAK",
            "CHJvdGF0aW9uGAUgAygCIi8KB1NhbXBsZXISEQoJbWFnRmlsdGVyGAEgASgF",
            "EhEKCW1pbkZpbHRlchgCIAEoBSIkCgVTY2VuZRIMCgRuYW1lGAEgASgJEg0K",
            "BW5vZGVzGAIgAygFIioKB1RleHR1cmUSDwoHc2FtcGxlchgBIAEoBRIOCgZz",
            "b3VyY2UYAiABKAUySgoLR2x0ZlNlcnZpY2USOwoFY2hlY2sSGC5jb20uZ2x0",
            "Zi5ncnBjLkdsdGZNb2RlbBoYLmNvbS5jb21tb24uZ3JwYy5ScGNWb2lkYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Common.Grpc.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.GltfModel), global::Com.Gltf.Grpc.GltfModel.Parser, new[]{ "Asset", "Accessors", "BufferViews", "Buffers", "Images", "Materials", "Meshes", "Nodes", "Samplers", "Scenes", "Scene", "Textures" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Asset), global::Com.Gltf.Grpc.Asset.Parser, new[]{ "Generator", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Accessor), global::Com.Gltf.Grpc.Accessor.Parser, new[]{ "BufferView", "ComponentType", "Count", "Max", "Min", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.BufferView), global::Com.Gltf.Grpc.BufferView.Parser, new[]{ "Buffer", "ByteLength", "ByteOffset", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Buffer), global::Com.Gltf.Grpc.Buffer.Parser, new[]{ "ByteLength", "Uri", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Image), global::Com.Gltf.Grpc.Image.Parser, new[]{ "MimeType", "Name", "Uri", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.MaterialTexture), global::Com.Gltf.Grpc.MaterialTexture.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.PbrMetallicRoughness), global::Com.Gltf.Grpc.PbrMetallicRoughness.Parser, new[]{ "BaseColorTexture", "BaseColorFactor", "MetallicRoughnessTexture", "MetallicFactor", "RoughnessFactor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Material), global::Com.Gltf.Grpc.Material.Parser, new[]{ "Name", "DoubleSided", "EmissiveFactor", "EmissiveTexture", "NormalTexture", "OcclusionTexture", "PbrMetallicRoughness" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Mesh), global::Com.Gltf.Grpc.Mesh.Parser, new[]{ "Name", "Primitives" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Primitive), global::Com.Gltf.Grpc.Primitive.Parser, new[]{ "Attributes", "Indices", "Material" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Node), global::Com.Gltf.Grpc.Node.Parser, new[]{ "Mesh", "Name", "Scale", "Translation", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Sampler), global::Com.Gltf.Grpc.Sampler.Parser, new[]{ "MagFilter", "MinFilter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Scene), global::Com.Gltf.Grpc.Scene.Parser, new[]{ "Name", "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gltf.Grpc.Texture), global::Com.Gltf.Grpc.Texture.Parser, new[]{ "Sampler", "Source" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GltfModel : pb::IMessage<GltfModel> {
    private static readonly pb::MessageParser<GltfModel> _parser = new pb::MessageParser<GltfModel>(() => new GltfModel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GltfModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GltfModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GltfModel(GltfModel other) : this() {
      Asset = other.asset_ != null ? other.Asset.Clone() : null;
      accessors_ = other.accessors_.Clone();
      bufferViews_ = other.bufferViews_.Clone();
      buffers_ = other.buffers_.Clone();
      images_ = other.images_.Clone();
      materials_ = other.materials_.Clone();
      meshes_ = other.meshes_.Clone();
      nodes_ = other.nodes_.Clone();
      samplers_ = other.samplers_.Clone();
      scenes_ = other.scenes_.Clone();
      scene_ = other.scene_;
      textures_ = other.textures_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GltfModel Clone() {
      return new GltfModel(this);
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 1;
    private global::Com.Gltf.Grpc.Asset asset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.Asset Asset {
      get { return asset_; }
      set {
        asset_ = value;
      }
    }

    /// <summary>Field number for the "accessors" field.</summary>
    public const int AccessorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Accessor> _repeated_accessors_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Gltf.Grpc.Accessor.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Accessor> accessors_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Accessor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Accessor> Accessors {
      get { return accessors_; }
    }

    /// <summary>Field number for the "bufferViews" field.</summary>
    public const int BufferViewsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.BufferView> _repeated_bufferViews_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Gltf.Grpc.BufferView.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.BufferView> bufferViews_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.BufferView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.BufferView> BufferViews {
      get { return bufferViews_; }
    }

    /// <summary>Field number for the "buffers" field.</summary>
    public const int BuffersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Buffer> _repeated_buffers_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Gltf.Grpc.Buffer.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Buffer> buffers_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Buffer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Buffer> Buffers {
      get { return buffers_; }
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Image> _repeated_images_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Gltf.Grpc.Image.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Image> images_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Image>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Image> Images {
      get { return images_; }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Material> _repeated_materials_codec
        = pb::FieldCodec.ForMessage(50, global::Com.Gltf.Grpc.Material.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Material> materials_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Material>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Material> Materials {
      get { return materials_; }
    }

    /// <summary>Field number for the "meshes" field.</summary>
    public const int MeshesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Mesh> _repeated_meshes_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Gltf.Grpc.Mesh.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Mesh> meshes_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Mesh>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Mesh> Meshes {
      get { return meshes_; }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Node> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(66, global::Com.Gltf.Grpc.Node.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Node> nodes_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Node> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "samplers" field.</summary>
    public const int SamplersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Sampler> _repeated_samplers_codec
        = pb::FieldCodec.ForMessage(74, global::Com.Gltf.Grpc.Sampler.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Sampler> samplers_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Sampler>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Sampler> Samplers {
      get { return samplers_; }
    }

    /// <summary>Field number for the "scenes" field.</summary>
    public const int ScenesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Scene> _repeated_scenes_codec
        = pb::FieldCodec.ForMessage(82, global::Com.Gltf.Grpc.Scene.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Scene> scenes_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Scene>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Scene> Scenes {
      get { return scenes_; }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 11;
    private int scene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Scene {
      get { return scene_; }
      set {
        scene_ = value;
      }
    }

    /// <summary>Field number for the "textures" field.</summary>
    public const int TexturesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Texture> _repeated_textures_codec
        = pb::FieldCodec.ForMessage(98, global::Com.Gltf.Grpc.Texture.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Texture> textures_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Texture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Texture> Textures {
      get { return textures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GltfModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GltfModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Asset, other.Asset)) return false;
      if(!accessors_.Equals(other.accessors_)) return false;
      if(!bufferViews_.Equals(other.bufferViews_)) return false;
      if(!buffers_.Equals(other.buffers_)) return false;
      if(!images_.Equals(other.images_)) return false;
      if(!materials_.Equals(other.materials_)) return false;
      if(!meshes_.Equals(other.meshes_)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!samplers_.Equals(other.samplers_)) return false;
      if(!scenes_.Equals(other.scenes_)) return false;
      if (Scene != other.Scene) return false;
      if(!textures_.Equals(other.textures_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (asset_ != null) hash ^= Asset.GetHashCode();
      hash ^= accessors_.GetHashCode();
      hash ^= bufferViews_.GetHashCode();
      hash ^= buffers_.GetHashCode();
      hash ^= images_.GetHashCode();
      hash ^= materials_.GetHashCode();
      hash ^= meshes_.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= samplers_.GetHashCode();
      hash ^= scenes_.GetHashCode();
      if (Scene != 0) hash ^= Scene.GetHashCode();
      hash ^= textures_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (asset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Asset);
      }
      accessors_.WriteTo(output, _repeated_accessors_codec);
      bufferViews_.WriteTo(output, _repeated_bufferViews_codec);
      buffers_.WriteTo(output, _repeated_buffers_codec);
      images_.WriteTo(output, _repeated_images_codec);
      materials_.WriteTo(output, _repeated_materials_codec);
      meshes_.WriteTo(output, _repeated_meshes_codec);
      nodes_.WriteTo(output, _repeated_nodes_codec);
      samplers_.WriteTo(output, _repeated_samplers_codec);
      scenes_.WriteTo(output, _repeated_scenes_codec);
      if (Scene != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Scene);
      }
      textures_.WriteTo(output, _repeated_textures_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (asset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Asset);
      }
      size += accessors_.CalculateSize(_repeated_accessors_codec);
      size += bufferViews_.CalculateSize(_repeated_bufferViews_codec);
      size += buffers_.CalculateSize(_repeated_buffers_codec);
      size += images_.CalculateSize(_repeated_images_codec);
      size += materials_.CalculateSize(_repeated_materials_codec);
      size += meshes_.CalculateSize(_repeated_meshes_codec);
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += samplers_.CalculateSize(_repeated_samplers_codec);
      size += scenes_.CalculateSize(_repeated_scenes_codec);
      if (Scene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scene);
      }
      size += textures_.CalculateSize(_repeated_textures_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GltfModel other) {
      if (other == null) {
        return;
      }
      if (other.asset_ != null) {
        if (asset_ == null) {
          asset_ = new global::Com.Gltf.Grpc.Asset();
        }
        Asset.MergeFrom(other.Asset);
      }
      accessors_.Add(other.accessors_);
      bufferViews_.Add(other.bufferViews_);
      buffers_.Add(other.buffers_);
      images_.Add(other.images_);
      materials_.Add(other.materials_);
      meshes_.Add(other.meshes_);
      nodes_.Add(other.nodes_);
      samplers_.Add(other.samplers_);
      scenes_.Add(other.scenes_);
      if (other.Scene != 0) {
        Scene = other.Scene;
      }
      textures_.Add(other.textures_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (asset_ == null) {
              asset_ = new global::Com.Gltf.Grpc.Asset();
            }
            input.ReadMessage(asset_);
            break;
          }
          case 18: {
            accessors_.AddEntriesFrom(input, _repeated_accessors_codec);
            break;
          }
          case 26: {
            bufferViews_.AddEntriesFrom(input, _repeated_bufferViews_codec);
            break;
          }
          case 34: {
            buffers_.AddEntriesFrom(input, _repeated_buffers_codec);
            break;
          }
          case 42: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 50: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
          case 58: {
            meshes_.AddEntriesFrom(input, _repeated_meshes_codec);
            break;
          }
          case 66: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 74: {
            samplers_.AddEntriesFrom(input, _repeated_samplers_codec);
            break;
          }
          case 82: {
            scenes_.AddEntriesFrom(input, _repeated_scenes_codec);
            break;
          }
          case 88: {
            Scene = input.ReadInt32();
            break;
          }
          case 98: {
            textures_.AddEntriesFrom(input, _repeated_textures_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Asset : pb::IMessage<Asset> {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset(Asset other) : this() {
      generator_ = other.generator_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "generator" field.</summary>
    public const int GeneratorFieldNumber = 1;
    private string generator_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Generator {
      get { return generator_; }
      set {
        generator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Generator != other.Generator) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Generator.Length != 0) hash ^= Generator.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Generator.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Generator);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Generator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Generator);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Generator.Length != 0) {
        Generator = other.Generator;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Generator = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Accessor : pb::IMessage<Accessor> {
    private static readonly pb::MessageParser<Accessor> _parser = new pb::MessageParser<Accessor>(() => new Accessor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Accessor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accessor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accessor(Accessor other) : this() {
      bufferView_ = other.bufferView_;
      componentType_ = other.componentType_;
      count_ = other.count_;
      max_ = other.max_.Clone();
      min_ = other.min_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Accessor Clone() {
      return new Accessor(this);
    }

    /// <summary>Field number for the "bufferView" field.</summary>
    public const int BufferViewFieldNumber = 1;
    private int bufferView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BufferView {
      get { return bufferView_; }
      set {
        bufferView_ = value;
      }
    }

    /// <summary>Field number for the "componentType" field.</summary>
    public const int ComponentTypeFieldNumber = 2;
    private int componentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentType {
      get { return componentType_; }
      set {
        componentType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_max_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> max_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Max {
      get { return max_; }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_min_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> min_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Min {
      get { return min_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Accessor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Accessor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BufferView != other.BufferView) return false;
      if (ComponentType != other.ComponentType) return false;
      if (Count != other.Count) return false;
      if(!max_.Equals(other.max_)) return false;
      if(!min_.Equals(other.min_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BufferView != 0) hash ^= BufferView.GetHashCode();
      if (ComponentType != 0) hash ^= ComponentType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= max_.GetHashCode();
      hash ^= min_.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BufferView != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BufferView);
      }
      if (ComponentType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ComponentType);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      max_.WriteTo(output, _repeated_max_codec);
      min_.WriteTo(output, _repeated_min_codec);
      if (Type.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BufferView != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BufferView);
      }
      if (ComponentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      size += max_.CalculateSize(_repeated_max_codec);
      size += min_.CalculateSize(_repeated_min_codec);
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Accessor other) {
      if (other == null) {
        return;
      }
      if (other.BufferView != 0) {
        BufferView = other.BufferView;
      }
      if (other.ComponentType != 0) {
        ComponentType = other.ComponentType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      max_.Add(other.max_);
      min_.Add(other.min_);
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BufferView = input.ReadInt32();
            break;
          }
          case 16: {
            ComponentType = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 34:
          case 37: {
            max_.AddEntriesFrom(input, _repeated_max_codec);
            break;
          }
          case 42:
          case 45: {
            min_.AddEntriesFrom(input, _repeated_min_codec);
            break;
          }
          case 50: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BufferView : pb::IMessage<BufferView> {
    private static readonly pb::MessageParser<BufferView> _parser = new pb::MessageParser<BufferView>(() => new BufferView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferView(BufferView other) : this() {
      buffer_ = other.buffer_;
      byteLength_ = other.byteLength_;
      byteOffset_ = other.byteOffset_;
      target_ = other.target_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferView Clone() {
      return new BufferView(this);
    }

    /// <summary>Field number for the "buffer" field.</summary>
    public const int BufferFieldNumber = 1;
    private int buffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Buffer {
      get { return buffer_; }
      set {
        buffer_ = value;
      }
    }

    /// <summary>Field number for the "byteLength" field.</summary>
    public const int ByteLengthFieldNumber = 2;
    private int byteLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ByteLength {
      get { return byteLength_; }
      set {
        byteLength_ = value;
      }
    }

    /// <summary>Field number for the "byteOffset" field.</summary>
    public const int ByteOffsetFieldNumber = 3;
    private int byteOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ByteOffset {
      get { return byteOffset_; }
      set {
        byteOffset_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Buffer != other.Buffer) return false;
      if (ByteLength != other.ByteLength) return false;
      if (ByteOffset != other.ByteOffset) return false;
      if (Target != other.Target) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Buffer != 0) hash ^= Buffer.GetHashCode();
      if (ByteLength != 0) hash ^= ByteLength.GetHashCode();
      if (ByteOffset != 0) hash ^= ByteOffset.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Buffer != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Buffer);
      }
      if (ByteLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ByteLength);
      }
      if (ByteOffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ByteOffset);
      }
      if (Target != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Buffer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Buffer);
      }
      if (ByteLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ByteLength);
      }
      if (ByteOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ByteOffset);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferView other) {
      if (other == null) {
        return;
      }
      if (other.Buffer != 0) {
        Buffer = other.Buffer;
      }
      if (other.ByteLength != 0) {
        ByteLength = other.ByteLength;
      }
      if (other.ByteOffset != 0) {
        ByteOffset = other.ByteOffset;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Buffer = input.ReadInt32();
            break;
          }
          case 16: {
            ByteLength = input.ReadInt32();
            break;
          }
          case 24: {
            ByteOffset = input.ReadInt32();
            break;
          }
          case 32: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Buffer : pb::IMessage<Buffer> {
    private static readonly pb::MessageParser<Buffer> _parser = new pb::MessageParser<Buffer>(() => new Buffer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Buffer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer(Buffer other) : this() {
      byteLength_ = other.byteLength_;
      uri_ = other.uri_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buffer Clone() {
      return new Buffer(this);
    }

    /// <summary>Field number for the "byteLength" field.</summary>
    public const int ByteLengthFieldNumber = 1;
    private int byteLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ByteLength {
      get { return byteLength_; }
      set {
        byteLength_ = value;
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private uint id_;
    /// <summary>
    ///  aus Datenbank
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Buffer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Buffer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ByteLength != other.ByteLength) return false;
      if (Uri != other.Uri) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ByteLength != 0) hash ^= ByteLength.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ByteLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ByteLength);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ByteLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ByteLength);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Buffer other) {
      if (other == null) {
        return;
      }
      if (other.ByteLength != 0) {
        ByteLength = other.ByteLength;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ByteLength = input.ReadInt32();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      mimeType_ = other.mimeType_;
      name_ = other.name_;
      uri_ = other.uri_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "mimeType" field.</summary>
    public const int MimeTypeFieldNumber = 1;
    private string mimeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MimeType {
      get { return mimeType_; }
      set {
        mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 3;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private uint id_;
    /// <summary>
    ///  aus Datenbank
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MimeType != other.MimeType) return false;
      if (Name != other.Name) return false;
      if (Uri != other.Uri) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MimeType.Length != 0) hash ^= MimeType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MimeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MimeType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uri);
      }
      if (Id != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MimeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MimeType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.MimeType.Length != 0) {
        MimeType = other.MimeType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MimeType = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Uri = input.ReadString();
            break;
          }
          case 32: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MaterialTexture : pb::IMessage<MaterialTexture> {
    private static readonly pb::MessageParser<MaterialTexture> _parser = new pb::MessageParser<MaterialTexture>(() => new MaterialTexture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialTexture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialTexture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialTexture(MaterialTexture other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialTexture Clone() {
      return new MaterialTexture(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialTexture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialTexture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialTexture other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PbrMetallicRoughness : pb::IMessage<PbrMetallicRoughness> {
    private static readonly pb::MessageParser<PbrMetallicRoughness> _parser = new pb::MessageParser<PbrMetallicRoughness>(() => new PbrMetallicRoughness());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PbrMetallicRoughness> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbrMetallicRoughness() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbrMetallicRoughness(PbrMetallicRoughness other) : this() {
      BaseColorTexture = other.baseColorTexture_ != null ? other.BaseColorTexture.Clone() : null;
      baseColorFactor_ = other.baseColorFactor_.Clone();
      MetallicRoughnessTexture = other.metallicRoughnessTexture_ != null ? other.MetallicRoughnessTexture.Clone() : null;
      metallicFactor_ = other.metallicFactor_;
      roughnessFactor_ = other.roughnessFactor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PbrMetallicRoughness Clone() {
      return new PbrMetallicRoughness(this);
    }

    /// <summary>Field number for the "baseColorTexture" field.</summary>
    public const int BaseColorTextureFieldNumber = 1;
    private global::Com.Gltf.Grpc.MaterialTexture baseColorTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.MaterialTexture BaseColorTexture {
      get { return baseColorTexture_; }
      set {
        baseColorTexture_ = value;
      }
    }

    /// <summary>Field number for the "baseColorFactor" field.</summary>
    public const int BaseColorFactorFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_baseColorFactor_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> baseColorFactor_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BaseColorFactor {
      get { return baseColorFactor_; }
    }

    /// <summary>Field number for the "metallicRoughnessTexture" field.</summary>
    public const int MetallicRoughnessTextureFieldNumber = 3;
    private global::Com.Gltf.Grpc.MaterialTexture metallicRoughnessTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.MaterialTexture MetallicRoughnessTexture {
      get { return metallicRoughnessTexture_; }
      set {
        metallicRoughnessTexture_ = value;
      }
    }

    /// <summary>Field number for the "metallicFactor" field.</summary>
    public const int MetallicFactorFieldNumber = 4;
    private float metallicFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MetallicFactor {
      get { return metallicFactor_; }
      set {
        metallicFactor_ = value;
      }
    }

    /// <summary>Field number for the "roughnessFactor" field.</summary>
    public const int RoughnessFactorFieldNumber = 5;
    private float roughnessFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoughnessFactor {
      get { return roughnessFactor_; }
      set {
        roughnessFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PbrMetallicRoughness);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PbrMetallicRoughness other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseColorTexture, other.BaseColorTexture)) return false;
      if(!baseColorFactor_.Equals(other.baseColorFactor_)) return false;
      if (!object.Equals(MetallicRoughnessTexture, other.MetallicRoughnessTexture)) return false;
      if (MetallicFactor != other.MetallicFactor) return false;
      if (RoughnessFactor != other.RoughnessFactor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseColorTexture_ != null) hash ^= BaseColorTexture.GetHashCode();
      hash ^= baseColorFactor_.GetHashCode();
      if (metallicRoughnessTexture_ != null) hash ^= MetallicRoughnessTexture.GetHashCode();
      if (MetallicFactor != 0F) hash ^= MetallicFactor.GetHashCode();
      if (RoughnessFactor != 0F) hash ^= RoughnessFactor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseColorTexture_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseColorTexture);
      }
      baseColorFactor_.WriteTo(output, _repeated_baseColorFactor_codec);
      if (metallicRoughnessTexture_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MetallicRoughnessTexture);
      }
      if (MetallicFactor != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MetallicFactor);
      }
      if (RoughnessFactor != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RoughnessFactor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseColorTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseColorTexture);
      }
      size += baseColorFactor_.CalculateSize(_repeated_baseColorFactor_codec);
      if (metallicRoughnessTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetallicRoughnessTexture);
      }
      if (MetallicFactor != 0F) {
        size += 1 + 4;
      }
      if (RoughnessFactor != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PbrMetallicRoughness other) {
      if (other == null) {
        return;
      }
      if (other.baseColorTexture_ != null) {
        if (baseColorTexture_ == null) {
          baseColorTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
        }
        BaseColorTexture.MergeFrom(other.BaseColorTexture);
      }
      baseColorFactor_.Add(other.baseColorFactor_);
      if (other.metallicRoughnessTexture_ != null) {
        if (metallicRoughnessTexture_ == null) {
          metallicRoughnessTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
        }
        MetallicRoughnessTexture.MergeFrom(other.MetallicRoughnessTexture);
      }
      if (other.MetallicFactor != 0F) {
        MetallicFactor = other.MetallicFactor;
      }
      if (other.RoughnessFactor != 0F) {
        RoughnessFactor = other.RoughnessFactor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseColorTexture_ == null) {
              baseColorTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
            }
            input.ReadMessage(baseColorTexture_);
            break;
          }
          case 18:
          case 21: {
            baseColorFactor_.AddEntriesFrom(input, _repeated_baseColorFactor_codec);
            break;
          }
          case 26: {
            if (metallicRoughnessTexture_ == null) {
              metallicRoughnessTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
            }
            input.ReadMessage(metallicRoughnessTexture_);
            break;
          }
          case 37: {
            MetallicFactor = input.ReadFloat();
            break;
          }
          case 45: {
            RoughnessFactor = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Material : pb::IMessage<Material> {
    private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material(Material other) : this() {
      name_ = other.name_;
      doubleSided_ = other.doubleSided_;
      emissiveFactor_ = other.emissiveFactor_.Clone();
      EmissiveTexture = other.emissiveTexture_ != null ? other.EmissiveTexture.Clone() : null;
      NormalTexture = other.normalTexture_ != null ? other.NormalTexture.Clone() : null;
      OcclusionTexture = other.occlusionTexture_ != null ? other.OcclusionTexture.Clone() : null;
      PbrMetallicRoughness = other.pbrMetallicRoughness_ != null ? other.PbrMetallicRoughness.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material Clone() {
      return new Material(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "doubleSided" field.</summary>
    public const int DoubleSidedFieldNumber = 2;
    private bool doubleSided_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoubleSided {
      get { return doubleSided_; }
      set {
        doubleSided_ = value;
      }
    }

    /// <summary>Field number for the "emissiveFactor" field.</summary>
    public const int EmissiveFactorFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_emissiveFactor_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> emissiveFactor_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EmissiveFactor {
      get { return emissiveFactor_; }
    }

    /// <summary>Field number for the "emissiveTexture" field.</summary>
    public const int EmissiveTextureFieldNumber = 4;
    private global::Com.Gltf.Grpc.MaterialTexture emissiveTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.MaterialTexture EmissiveTexture {
      get { return emissiveTexture_; }
      set {
        emissiveTexture_ = value;
      }
    }

    /// <summary>Field number for the "normalTexture" field.</summary>
    public const int NormalTextureFieldNumber = 5;
    private global::Com.Gltf.Grpc.MaterialTexture normalTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.MaterialTexture NormalTexture {
      get { return normalTexture_; }
      set {
        normalTexture_ = value;
      }
    }

    /// <summary>Field number for the "occlusionTexture" field.</summary>
    public const int OcclusionTextureFieldNumber = 6;
    private global::Com.Gltf.Grpc.MaterialTexture occlusionTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.MaterialTexture OcclusionTexture {
      get { return occlusionTexture_; }
      set {
        occlusionTexture_ = value;
      }
    }

    /// <summary>Field number for the "pbrMetallicRoughness" field.</summary>
    public const int PbrMetallicRoughnessFieldNumber = 7;
    private global::Com.Gltf.Grpc.PbrMetallicRoughness pbrMetallicRoughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.PbrMetallicRoughness PbrMetallicRoughness {
      get { return pbrMetallicRoughness_; }
      set {
        pbrMetallicRoughness_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DoubleSided != other.DoubleSided) return false;
      if(!emissiveFactor_.Equals(other.emissiveFactor_)) return false;
      if (!object.Equals(EmissiveTexture, other.EmissiveTexture)) return false;
      if (!object.Equals(NormalTexture, other.NormalTexture)) return false;
      if (!object.Equals(OcclusionTexture, other.OcclusionTexture)) return false;
      if (!object.Equals(PbrMetallicRoughness, other.PbrMetallicRoughness)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DoubleSided != false) hash ^= DoubleSided.GetHashCode();
      hash ^= emissiveFactor_.GetHashCode();
      if (emissiveTexture_ != null) hash ^= EmissiveTexture.GetHashCode();
      if (normalTexture_ != null) hash ^= NormalTexture.GetHashCode();
      if (occlusionTexture_ != null) hash ^= OcclusionTexture.GetHashCode();
      if (pbrMetallicRoughness_ != null) hash ^= PbrMetallicRoughness.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DoubleSided != false) {
        output.WriteRawTag(16);
        output.WriteBool(DoubleSided);
      }
      emissiveFactor_.WriteTo(output, _repeated_emissiveFactor_codec);
      if (emissiveTexture_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EmissiveTexture);
      }
      if (normalTexture_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NormalTexture);
      }
      if (occlusionTexture_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OcclusionTexture);
      }
      if (pbrMetallicRoughness_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PbrMetallicRoughness);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DoubleSided != false) {
        size += 1 + 1;
      }
      size += emissiveFactor_.CalculateSize(_repeated_emissiveFactor_codec);
      if (emissiveTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmissiveTexture);
      }
      if (normalTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalTexture);
      }
      if (occlusionTexture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OcclusionTexture);
      }
      if (pbrMetallicRoughness_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PbrMetallicRoughness);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Material other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DoubleSided != false) {
        DoubleSided = other.DoubleSided;
      }
      emissiveFactor_.Add(other.emissiveFactor_);
      if (other.emissiveTexture_ != null) {
        if (emissiveTexture_ == null) {
          emissiveTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
        }
        EmissiveTexture.MergeFrom(other.EmissiveTexture);
      }
      if (other.normalTexture_ != null) {
        if (normalTexture_ == null) {
          normalTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
        }
        NormalTexture.MergeFrom(other.NormalTexture);
      }
      if (other.occlusionTexture_ != null) {
        if (occlusionTexture_ == null) {
          occlusionTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
        }
        OcclusionTexture.MergeFrom(other.OcclusionTexture);
      }
      if (other.pbrMetallicRoughness_ != null) {
        if (pbrMetallicRoughness_ == null) {
          pbrMetallicRoughness_ = new global::Com.Gltf.Grpc.PbrMetallicRoughness();
        }
        PbrMetallicRoughness.MergeFrom(other.PbrMetallicRoughness);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            DoubleSided = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            emissiveFactor_.AddEntriesFrom(input, _repeated_emissiveFactor_codec);
            break;
          }
          case 34: {
            if (emissiveTexture_ == null) {
              emissiveTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
            }
            input.ReadMessage(emissiveTexture_);
            break;
          }
          case 42: {
            if (normalTexture_ == null) {
              normalTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
            }
            input.ReadMessage(normalTexture_);
            break;
          }
          case 50: {
            if (occlusionTexture_ == null) {
              occlusionTexture_ = new global::Com.Gltf.Grpc.MaterialTexture();
            }
            input.ReadMessage(occlusionTexture_);
            break;
          }
          case 58: {
            if (pbrMetallicRoughness_ == null) {
              pbrMetallicRoughness_ = new global::Com.Gltf.Grpc.PbrMetallicRoughness();
            }
            input.ReadMessage(pbrMetallicRoughness_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh(Mesh other) : this() {
      name_ = other.name_;
      primitives_ = other.primitives_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primitives" field.</summary>
    public const int PrimitivesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Gltf.Grpc.Primitive> _repeated_primitives_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Gltf.Grpc.Primitive.Parser);
    private readonly pbc::RepeatedField<global::Com.Gltf.Grpc.Primitive> primitives_ = new pbc::RepeatedField<global::Com.Gltf.Grpc.Primitive>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Gltf.Grpc.Primitive> Primitives {
      get { return primitives_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!primitives_.Equals(other.primitives_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= primitives_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      primitives_.WriteTo(output, _repeated_primitives_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += primitives_.CalculateSize(_repeated_primitives_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      primitives_.Add(other.primitives_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            primitives_.AddEntriesFrom(input, _repeated_primitives_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Primitive : pb::IMessage<Primitive> {
    private static readonly pb::MessageParser<Primitive> _parser = new pb::MessageParser<Primitive>(() => new Primitive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Primitive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Primitive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Primitive(Primitive other) : this() {
      attributes_ = other.attributes_.Clone();
      indices_ = other.indices_;
      material_ = other.material_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Primitive Clone() {
      return new Primitive(this);
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_attributes_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<string, int> attributes_ = new pbc::MapField<string, int>();
    /// <summary>
    ///  Attributes attributes = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "indices" field.</summary>
    public const int IndicesFieldNumber = 2;
    private int indices_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Indices {
      get { return indices_; }
      set {
        indices_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 3;
    private int material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Primitive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Primitive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Attributes.Equals(other.Attributes)) return false;
      if (Indices != other.Indices) return false;
      if (Material != other.Material) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Attributes.GetHashCode();
      if (Indices != 0) hash ^= Indices.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attributes_.WriteTo(output, _map_attributes_codec);
      if (Indices != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Indices);
      }
      if (Material != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Material);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attributes_.CalculateSize(_map_attributes_codec);
      if (Indices != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Indices);
      }
      if (Material != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Material);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Primitive other) {
      if (other == null) {
        return;
      }
      attributes_.Add(other.attributes_);
      if (other.Indices != 0) {
        Indices = other.Indices;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attributes_.AddEntriesFrom(input, _map_attributes_codec);
            break;
          }
          case 16: {
            Indices = input.ReadInt32();
            break;
          }
          case 24: {
            Material = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// message Attributes {
  /// int32 POSITION = 1;
  /// int32 NORMAL = 2;
  /// int32 TEXCOORD_0 = 3;
  /// }
  /// </summary>
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      mesh_ = other.mesh_;
      name_ = other.name_;
      scale_ = other.scale_.Clone();
      translation_ = other.translation_.Clone();
      rotation_ = other.rotation_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 1;
    private int mesh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mesh {
      get { return mesh_; }
      set {
        mesh_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_scale_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> scale_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Scale {
      get { return scale_; }
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_translation_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> translation_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Translation {
      get { return translation_; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_rotation_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> rotation_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotation {
      get { return rotation_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mesh != other.Mesh) return false;
      if (Name != other.Name) return false;
      if(!scale_.Equals(other.scale_)) return false;
      if(!translation_.Equals(other.translation_)) return false;
      if(!rotation_.Equals(other.rotation_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mesh != 0) hash ^= Mesh.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= scale_.GetHashCode();
      hash ^= translation_.GetHashCode();
      hash ^= rotation_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mesh != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mesh);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      scale_.WriteTo(output, _repeated_scale_codec);
      translation_.WriteTo(output, _repeated_translation_codec);
      rotation_.WriteTo(output, _repeated_rotation_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mesh != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mesh);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += scale_.CalculateSize(_repeated_scale_codec);
      size += translation_.CalculateSize(_repeated_translation_codec);
      size += rotation_.CalculateSize(_repeated_rotation_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Mesh != 0) {
        Mesh = other.Mesh;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      scale_.Add(other.scale_);
      translation_.Add(other.translation_);
      rotation_.Add(other.rotation_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mesh = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26:
          case 29: {
            scale_.AddEntriesFrom(input, _repeated_scale_codec);
            break;
          }
          case 34:
          case 37: {
            translation_.AddEntriesFrom(input, _repeated_translation_codec);
            break;
          }
          case 42:
          case 45: {
            rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Sampler : pb::IMessage<Sampler> {
    private static readonly pb::MessageParser<Sampler> _parser = new pb::MessageParser<Sampler>(() => new Sampler());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sampler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler(Sampler other) : this() {
      magFilter_ = other.magFilter_;
      minFilter_ = other.minFilter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sampler Clone() {
      return new Sampler(this);
    }

    /// <summary>Field number for the "magFilter" field.</summary>
    public const int MagFilterFieldNumber = 1;
    private int magFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagFilter {
      get { return magFilter_; }
      set {
        magFilter_ = value;
      }
    }

    /// <summary>Field number for the "minFilter" field.</summary>
    public const int MinFilterFieldNumber = 2;
    private int minFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinFilter {
      get { return minFilter_; }
      set {
        minFilter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sampler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sampler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MagFilter != other.MagFilter) return false;
      if (MinFilter != other.MinFilter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MagFilter != 0) hash ^= MagFilter.GetHashCode();
      if (MinFilter != 0) hash ^= MinFilter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MagFilter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MagFilter);
      }
      if (MinFilter != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinFilter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MagFilter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagFilter);
      }
      if (MinFilter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinFilter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sampler other) {
      if (other == null) {
        return;
      }
      if (other.MagFilter != 0) {
        MagFilter = other.MagFilter;
      }
      if (other.MinFilter != 0) {
        MinFilter = other.MinFilter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MagFilter = input.ReadInt32();
            break;
          }
          case 16: {
            MinFilter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scene : pb::IMessage<Scene> {
    private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene(Scene other) : this() {
      name_ = other.name_;
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene Clone() {
      return new Scene(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_nodes_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> nodes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Texture : pb::IMessage<Texture> {
    private static readonly pb::MessageParser<Texture> _parser = new pb::MessageParser<Texture>(() => new Texture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Texture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture(Texture other) : this() {
      sampler_ = other.sampler_;
      source_ = other.source_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Texture Clone() {
      return new Texture(this);
    }

    /// <summary>Field number for the "sampler" field.</summary>
    public const int SamplerFieldNumber = 1;
    private int sampler_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sampler {
      get { return sampler_; }
      set {
        sampler_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private int source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Texture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Texture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sampler != other.Sampler) return false;
      if (Source != other.Source) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sampler != 0) hash ^= Sampler.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sampler != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sampler);
      }
      if (Source != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Source);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sampler != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sampler);
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Source);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Texture other) {
      if (other == null) {
        return;
      }
      if (other.Sampler != 0) {
        Sampler = other.Sampler;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sampler = input.ReadInt32();
            break;
          }
          case 16: {
            Source = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
