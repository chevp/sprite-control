// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: islandEngine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Island.Grpc {

  /// <summary>Holder for reflection information generated from islandEngine.proto</summary>
  public static partial class IslandEngineReflection {

    #region Descriptor
    /// <summary>File descriptor for islandEngine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IslandEngineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJpc2xhbmRFbmdpbmUucHJvdG8SD2NvbS5pc2xhbmQuZ3JwYxoTY29udGV4",
            "dEVuZ2luZS5wcm90bxoMY29tbW9uLnByb3RvIqAECgdDbWRJdGVtEiUKA2Nt",
            "ZBgBIAEoDjIYLmNvbS5pc2xhbmQuZ3JwYy5DbWRFbnVtEjQKBnBhcmFtcxgC",
            "IAMoCzIkLmNvbS5pc2xhbmQuZ3JwYy5DbWRJdGVtLlBhcmFtc0VudHJ5Ei0K",
            "BG5vZGUYAyABKAsyHS5jb20uY29udGV4dC5ncnBjLk5vZGVDb250ZXh0SAAS",
            "NwoJbm9kZUdyb3VwGAQgASgLMiIuY29tLmNvbnRleHQuZ3JwYy5Ob2RlR3Jv",
            "dXBDb250ZXh0SAASJAoDY2FtGAUgASgLMhUuY29tLmNvbnRleHQuZ3JwYy5D",
            "YW1IABI0CgtlbnZpcm9ubWVudBgGIAEoCzIdLmNvbS5jb250ZXh0LmdycGMu",
            "RW52aXJvbm1lbnRIABIxCgZzY3JpcHQYByABKAsyHy5jb20uY29udGV4dC5n",
            "cnBjLlNjcmlwdENvbnRleHRIABJAChFsaW5lYXJUcmFuc2xhdGlvbhgIIAEo",
            "CzIjLmNvbS5jb250ZXh0LmdycGMuTGluZWFyVHJhbnNsYXRpb25IABJGChRu",
            "b25MaW5lYXJUcmFuc2xhdGlvbhgJIAEoCzImLmNvbS5jb250ZXh0LmdycGMu",
            "Tm9uTGluZWFyVHJhbnNsYXRpb25IABotCgtQYXJhbXNFbnRyeRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAk6AjgBQggKBm1fdHlwZSK0AQoOSXRlbVNl",
            "dE1lc3NhZ2USCgoCaWQYASABKAcSOwoGcGFyYW1zGAIgAygLMisuY29tLmlz",
            "bGFuZC5ncnBjLkl0ZW1TZXRNZXNzYWdlLlBhcmFtc0VudHJ5EioKCGNtZEl0",
            "ZW1zGAMgAygLMhguY29tLmlzbGFuZC5ncnBjLkNtZEl0ZW0aLQoLUGFyYW1z",
            "RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJGChFJdGVt",
            "U2V0Q29sbGVjdGlvbhIxCghpdGVtU2V0cxgBIAMoCzIfLmNvbS5pc2xhbmQu",
            "Z3JwYy5JdGVtU2V0TWVzc2FnZSLnAQoMRXZlbnRNZXNzYWdlEgoKAmlkGAEg",
            "ASgHEgwKBHBhdGgYAiABKAkSOQoGcGFyYW1zGAMgAygLMikuY29tLmlzbGFu",
            "ZC5ncnBjLkV2ZW50TWVzc2FnZS5QYXJhbXNFbnRyeRIPCgVpbnB1dBgEIAEo",
            "CUgAEiQKA2NhbRgFIAEoCzIVLmNvbS5jb250ZXh0LmdycGMuQ2FtSAASDQoF",
            "dG9rZW4YBiABKAkaLQoLUGFyYW1zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgJOgI4AUINCgtwYXJhbV9vbmVvZiIgCg9Cb29sZWFuUmVzcG9u",
            "c2USDQoFdmFsdWUYASABKAgigwEKCFNldHRpbmdzEhQKDHdpbmRvd0hlaWdo",
            "dBgBIAEoBRITCgt3aW5kb3dXaWR0aBgCIAEoBRISCgp2YWxpZGF0aW9uGAMg",
            "ASgIEhIKCmZ1bGxzY3JlZW4YBCABKAgSDQoFdnN5bmMYBSABKAgSFQoNbXVs",
            "dGlTYW1wbGluZxgGIAEoCCIrCg1CaW5hcnlNZXNzYWdlEgoKAmlkGAEgASgH",
            "Eg4KBm1WYWx1ZRgCIAEoDCpDCgdDbWRFbnVtEgoKBlNFTEVDVBAAEgoKBklO",
            "U0VSVBABEgoKBlVQREFURRACEgoKBlJFTU9WRRADEggKBERST1AQBDLfCAoT",
            "SXNsYW5kRW5naW5lU2VydmljZRI6CgRwaW5nEhguY29tLmNvbW1vbi5ncnBj",
            "LlJwY1ZvaWQaGC5jb20uY29tbW9uLmdycGMuUnBjVm9pZBJACgtnZXRTZXR0",
            "aW5ncxIWLmNvbS5jb21tb24uZ3JwYy5JZGVudBoZLmNvbS5pc2xhbmQuZ3Jw",
            "Yy5TZXR0aW5ncxJBCg1kZXN0cm95V2luZG93EhYuY29tLmNvbW1vbi5ncnBj",
            "LklkZW50GhguY29tLmNvbW1vbi5ncnBjLlJwY1ZvaWQSTgoRcHV0SXRlbVNl",
            "dE1lc3NhZ2USHy5jb20uaXNsYW5kLmdycGMuSXRlbVNldE1lc3NhZ2UaGC5j",
            "b20uY29tbW9uLmdycGMuUnBjVm9pZBJJCg5zdWJzY3JpYmVFdmVudBIWLmNv",
            "bS5jb21tb24uZ3JwYy5JZGVudBodLmNvbS5pc2xhbmQuZ3JwYy5FdmVudE1l",
            "c3NhZ2UwARI8CglwdXRDYW1lcmESFS5jb20uY29udGV4dC5ncnBjLkNhbRoY",
            "LmNvbS5jb21tb24uZ3JwYy5ScGNWb2lkEkQKCXNlbmRFdmVudBIdLmNvbS5p",
            "c2xhbmQuZ3JwYy5FdmVudE1lc3NhZ2UaGC5jb20uY29tbW9uLmdycGMuUnBj",
            "Vm9pZBJUChdzdWJzY3JpYmVJdGVtU2V0TWVzc2FnZRIWLmNvbS5jb21tb24u",
            "Z3JwYy5JZGVudBofLmNvbS5pc2xhbmQuZ3JwYy5JdGVtU2V0TWVzc2FnZTAB",
            "Ek4KDmdldEFsbEl0ZW1TZXRzEhguY29tLmNvbW1vbi5ncnBjLlJwY1ZvaWQa",
            "Ii5jb20uaXNsYW5kLmdycGMuSXRlbVNldENvbGxlY3Rpb24SQwoJZ2V0Qmlu",
            "YXJ5EhYuY29tLmNvbW1vbi5ncnBjLklkZW50Gh4uY29tLmlzbGFuZC5ncnBj",
            "LkJpbmFyeU1lc3NhZ2USSwoQY2hlY2tHbHRmQ29udGV4dBIdLmNvbS5jb250",
            "ZXh0LmdycGMuR2x0ZkNvbnRleHQaGC5jb20uY29tbW9uLmdycGMuUnBjVm9p",
            "ZBJWChZjaGVja0l0ZW1TZXRDb2xsZWN0aW9uEiIuY29tLmlzbGFuZC5ncnBj",
            "Lkl0ZW1TZXRDb2xsZWN0aW9uGhguY29tLmNvbW1vbi5ncnBjLlJwY1ZvaWQS",
            "TAoRY2hlY2tFdmVudE1lc3NhZ2USHS5jb20uaXNsYW5kLmdycGMuRXZlbnRN",
            "ZXNzYWdlGhguY29tLmNvbW1vbi5ncnBjLlJwY1ZvaWQSQgoPY2hlY2tNYXBD",
            "b250ZXh0EhUuY29tLmNvbnRleHQuZ3JwYy5NYXAaGC5jb20uY29tbW9uLmdy",
            "cGMuUnBjVm9pZBJGChFjaGVja1NjZW5lQ29udGV4dBIXLmNvbS5jb250ZXh0",
            "LmdycGMuU2NlbmUaGC5jb20uY29tbW9uLmdycGMuUnBjVm9pZDKNAQoSQ2hp",
            "b3NFbmdpbmVTZXJ2aWNlEjoKBHBpbmcSGC5jb20uY29tbW9uLmdycGMuUnBj",
            "Vm9pZBoYLmNvbS5jb21tb24uZ3JwYy5ScGNWb2lkEjsKBWNsZWFyEhguY29t",
            "LmNvbW1vbi5ncnBjLlJwY1ZvaWQaGC5jb20uY29tbW9uLmdycGMuUnBjVm9p",
            "ZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Context.Grpc.ContextEngineReflection.Descriptor, global::Com.Common.Grpc.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Island.Grpc.CmdEnum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Island.Grpc.CmdItem), global::Com.Island.Grpc.CmdItem.Parser, new[]{ "Cmd", "Params", "Node", "NodeGroup", "Cam", "Environment", "Script", "LinearTranslation", "NonLinearTranslation" }, new[]{ "MType" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Island.Grpc.ItemSetMessage), global::Com.Island.Grpc.ItemSetMessage.Parser, new[]{ "Id", "Params", "CmdItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Island.Grpc.ItemSetCollection), global::Com.Island.Grpc.ItemSetCollection.Parser, new[]{ "ItemSets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Island.Grpc.EventMessage), global::Com.Island.Grpc.EventMessage.Parser, new[]{ "Id", "Path", "Params", "Input", "Cam", "Token" }, new[]{ "ParamOneof" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Island.Grpc.BooleanResponse), global::Com.Island.Grpc.BooleanResponse.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Island.Grpc.Settings), global::Com.Island.Grpc.Settings.Parser, new[]{ "WindowHeight", "WindowWidth", "Validation", "Fullscreen", "Vsync", "MultiSampling" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Island.Grpc.BinaryMessage), global::Com.Island.Grpc.BinaryMessage.Parser, new[]{ "Id", "MValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CmdEnum {
    [pbr::OriginalName("SELECT")] Select = 0,
    [pbr::OriginalName("INSERT")] Insert = 1,
    [pbr::OriginalName("UPDATE")] Update = 2,
    [pbr::OriginalName("REMOVE")] Remove = 3,
    [pbr::OriginalName("DROP")] Drop = 4,
  }

  #endregion

  #region Messages
  public sealed partial class CmdItem : pb::IMessage<CmdItem> {
    private static readonly pb::MessageParser<CmdItem> _parser = new pb::MessageParser<CmdItem>(() => new CmdItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdItem(CmdItem other) : this() {
      cmd_ = other.cmd_;
      params_ = other.params_.Clone();
      switch (other.MTypeCase) {
        case MTypeOneofCase.Node:
          Node = other.Node.Clone();
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup.Clone();
          break;
        case MTypeOneofCase.Cam:
          Cam = other.Cam.Clone();
          break;
        case MTypeOneofCase.Environment:
          Environment = other.Environment.Clone();
          break;
        case MTypeOneofCase.Script:
          Script = other.Script.Clone();
          break;
        case MTypeOneofCase.LinearTranslation:
          LinearTranslation = other.LinearTranslation.Clone();
          break;
        case MTypeOneofCase.NonLinearTranslation:
          NonLinearTranslation = other.NonLinearTranslation.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdItem Clone() {
      return new CmdItem(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::Com.Island.Grpc.CmdEnum cmd_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Island.Grpc.CmdEnum Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeContext Node {
      get { return mTypeCase_ == MTypeOneofCase.Node ? (global::Com.Context.Grpc.NodeContext) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Node;
      }
    }

    /// <summary>Field number for the "nodeGroup" field.</summary>
    public const int NodeGroupFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeGroupContext NodeGroup {
      get { return mTypeCase_ == MTypeOneofCase.NodeGroup ? (global::Com.Context.Grpc.NodeGroupContext) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.NodeGroup;
      }
    }

    /// <summary>Field number for the "cam" field.</summary>
    public const int CamFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Cam Cam {
      get { return mTypeCase_ == MTypeOneofCase.Cam ? (global::Com.Context.Grpc.Cam) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Cam;
      }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Environment Environment {
      get { return mTypeCase_ == MTypeOneofCase.Environment ? (global::Com.Context.Grpc.Environment) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Environment;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.ScriptContext Script {
      get { return mTypeCase_ == MTypeOneofCase.Script ? (global::Com.Context.Grpc.ScriptContext) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Script;
      }
    }

    /// <summary>Field number for the "linearTranslation" field.</summary>
    public const int LinearTranslationFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.LinearTranslation LinearTranslation {
      get { return mTypeCase_ == MTypeOneofCase.LinearTranslation ? (global::Com.Context.Grpc.LinearTranslation) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.LinearTranslation;
      }
    }

    /// <summary>Field number for the "nonLinearTranslation" field.</summary>
    public const int NonLinearTranslationFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NonLinearTranslation NonLinearTranslation {
      get { return mTypeCase_ == MTypeOneofCase.NonLinearTranslation ? (global::Com.Context.Grpc.NonLinearTranslation) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.NonLinearTranslation;
      }
    }

    private object mType_;
    /// <summary>Enum of possible cases for the "m_type" oneof.</summary>
    public enum MTypeOneofCase {
      None = 0,
      Node = 3,
      NodeGroup = 4,
      Cam = 5,
      Environment = 6,
      Script = 7,
      LinearTranslation = 8,
      NonLinearTranslation = 9,
    }
    private MTypeOneofCase mTypeCase_ = MTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTypeOneofCase MTypeCase {
      get { return mTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMType() {
      mTypeCase_ = MTypeOneofCase.None;
      mType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CmdItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CmdItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (!Params.Equals(other.Params)) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(NodeGroup, other.NodeGroup)) return false;
      if (!object.Equals(Cam, other.Cam)) return false;
      if (!object.Equals(Environment, other.Environment)) return false;
      if (!object.Equals(Script, other.Script)) return false;
      if (!object.Equals(LinearTranslation, other.LinearTranslation)) return false;
      if (!object.Equals(NonLinearTranslation, other.NonLinearTranslation)) return false;
      if (MTypeCase != other.MTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      hash ^= Params.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Node) hash ^= Node.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) hash ^= NodeGroup.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Cam) hash ^= Cam.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Environment) hash ^= Environment.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Script) hash ^= Script.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.LinearTranslation) hash ^= LinearTranslation.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) hash ^= NonLinearTranslation.GetHashCode();
      hash ^= (int) mTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      params_.WriteTo(output, _map_params_codec);
      if (mTypeCase_ == MTypeOneofCase.Node) {
        output.WriteRawTag(26);
        output.WriteMessage(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        output.WriteRawTag(34);
        output.WriteMessage(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Cam) {
        output.WriteRawTag(42);
        output.WriteMessage(Cam);
      }
      if (mTypeCase_ == MTypeOneofCase.Environment) {
        output.WriteRawTag(50);
        output.WriteMessage(Environment);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        output.WriteRawTag(58);
        output.WriteMessage(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.LinearTranslation) {
        output.WriteRawTag(66);
        output.WriteMessage(LinearTranslation);
      }
      if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) {
        output.WriteRawTag(74);
        output.WriteMessage(NonLinearTranslation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      size += params_.CalculateSize(_map_params_codec);
      if (mTypeCase_ == MTypeOneofCase.Node) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Cam) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cam);
      }
      if (mTypeCase_ == MTypeOneofCase.Environment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Environment);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.LinearTranslation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearTranslation);
      }
      if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonLinearTranslation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CmdItem other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      params_.Add(other.params_);
      switch (other.MTypeCase) {
        case MTypeOneofCase.Node:
          Node = other.Node;
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup;
          break;
        case MTypeOneofCase.Cam:
          Cam = other.Cam;
          break;
        case MTypeOneofCase.Environment:
          Environment = other.Environment;
          break;
        case MTypeOneofCase.Script:
          Script = other.Script;
          break;
        case MTypeOneofCase.LinearTranslation:
          LinearTranslation = other.LinearTranslation;
          break;
        case MTypeOneofCase.NonLinearTranslation:
          NonLinearTranslation = other.NonLinearTranslation;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            cmd_ = (global::Com.Island.Grpc.CmdEnum) input.ReadEnum();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            global::Com.Context.Grpc.NodeContext subBuilder = new global::Com.Context.Grpc.NodeContext();
            if (mTypeCase_ == MTypeOneofCase.Node) {
              subBuilder.MergeFrom(Node);
            }
            input.ReadMessage(subBuilder);
            Node = subBuilder;
            break;
          }
          case 34: {
            global::Com.Context.Grpc.NodeGroupContext subBuilder = new global::Com.Context.Grpc.NodeGroupContext();
            if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
              subBuilder.MergeFrom(NodeGroup);
            }
            input.ReadMessage(subBuilder);
            NodeGroup = subBuilder;
            break;
          }
          case 42: {
            global::Com.Context.Grpc.Cam subBuilder = new global::Com.Context.Grpc.Cam();
            if (mTypeCase_ == MTypeOneofCase.Cam) {
              subBuilder.MergeFrom(Cam);
            }
            input.ReadMessage(subBuilder);
            Cam = subBuilder;
            break;
          }
          case 50: {
            global::Com.Context.Grpc.Environment subBuilder = new global::Com.Context.Grpc.Environment();
            if (mTypeCase_ == MTypeOneofCase.Environment) {
              subBuilder.MergeFrom(Environment);
            }
            input.ReadMessage(subBuilder);
            Environment = subBuilder;
            break;
          }
          case 58: {
            global::Com.Context.Grpc.ScriptContext subBuilder = new global::Com.Context.Grpc.ScriptContext();
            if (mTypeCase_ == MTypeOneofCase.Script) {
              subBuilder.MergeFrom(Script);
            }
            input.ReadMessage(subBuilder);
            Script = subBuilder;
            break;
          }
          case 66: {
            global::Com.Context.Grpc.LinearTranslation subBuilder = new global::Com.Context.Grpc.LinearTranslation();
            if (mTypeCase_ == MTypeOneofCase.LinearTranslation) {
              subBuilder.MergeFrom(LinearTranslation);
            }
            input.ReadMessage(subBuilder);
            LinearTranslation = subBuilder;
            break;
          }
          case 74: {
            global::Com.Context.Grpc.NonLinearTranslation subBuilder = new global::Com.Context.Grpc.NonLinearTranslation();
            if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) {
              subBuilder.MergeFrom(NonLinearTranslation);
            }
            input.ReadMessage(subBuilder);
            NonLinearTranslation = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemSetMessage : pb::IMessage<ItemSetMessage> {
    private static readonly pb::MessageParser<ItemSetMessage> _parser = new pb::MessageParser<ItemSetMessage>(() => new ItemSetMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemSetMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSetMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSetMessage(ItemSetMessage other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      cmdItems_ = other.cmdItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSetMessage Clone() {
      return new ItemSetMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "cmdItems" field.</summary>
    public const int CmdItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Island.Grpc.CmdItem> _repeated_cmdItems_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Island.Grpc.CmdItem.Parser);
    private readonly pbc::RepeatedField<global::Com.Island.Grpc.CmdItem> cmdItems_ = new pbc::RepeatedField<global::Com.Island.Grpc.CmdItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Island.Grpc.CmdItem> CmdItems {
      get { return cmdItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemSetMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemSetMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if(!cmdItems_.Equals(other.cmdItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      hash ^= cmdItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      cmdItems_.WriteTo(output, _repeated_cmdItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      size += cmdItems_.CalculateSize(_repeated_cmdItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemSetMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      cmdItems_.Add(other.cmdItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            cmdItems_.AddEntriesFrom(input, _repeated_cmdItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemSetCollection : pb::IMessage<ItemSetCollection> {
    private static readonly pb::MessageParser<ItemSetCollection> _parser = new pb::MessageParser<ItemSetCollection>(() => new ItemSetCollection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemSetCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSetCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSetCollection(ItemSetCollection other) : this() {
      itemSets_ = other.itemSets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSetCollection Clone() {
      return new ItemSetCollection(this);
    }

    /// <summary>Field number for the "itemSets" field.</summary>
    public const int ItemSetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Island.Grpc.ItemSetMessage> _repeated_itemSets_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Island.Grpc.ItemSetMessage.Parser);
    private readonly pbc::RepeatedField<global::Com.Island.Grpc.ItemSetMessage> itemSets_ = new pbc::RepeatedField<global::Com.Island.Grpc.ItemSetMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Island.Grpc.ItemSetMessage> ItemSets {
      get { return itemSets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemSetCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemSetCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemSets_.Equals(other.itemSets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemSets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemSets_.WriteTo(output, _repeated_itemSets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemSets_.CalculateSize(_repeated_itemSets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemSetCollection other) {
      if (other == null) {
        return;
      }
      itemSets_.Add(other.itemSets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemSets_.AddEntriesFrom(input, _repeated_itemSets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventMessage : pb::IMessage<EventMessage> {
    private static readonly pb::MessageParser<EventMessage> _parser = new pb::MessageParser<EventMessage>(() => new EventMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMessage(EventMessage other) : this() {
      id_ = other.id_;
      path_ = other.path_;
      params_ = other.params_.Clone();
      token_ = other.token_;
      switch (other.ParamOneofCase) {
        case ParamOneofOneofCase.Input:
          Input = other.Input;
          break;
        case ParamOneofOneofCase.Cam:
          Cam = other.Cam.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMessage Clone() {
      return new EventMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    ///  /home, /menu
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Input {
      get { return paramOneofCase_ == ParamOneofOneofCase.Input ? (string) paramOneof_ : ""; }
      set {
        paramOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        paramOneofCase_ = ParamOneofOneofCase.Input;
      }
    }

    /// <summary>Field number for the "cam" field.</summary>
    public const int CamFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Cam Cam {
      get { return paramOneofCase_ == ParamOneofOneofCase.Cam ? (global::Com.Context.Grpc.Cam) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Cam;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 6;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object paramOneof_;
    /// <summary>Enum of possible cases for the "param_oneof" oneof.</summary>
    public enum ParamOneofOneofCase {
      None = 0,
      Input = 4,
      Cam = 5,
    }
    private ParamOneofOneofCase paramOneofCase_ = ParamOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamOneofOneofCase ParamOneofCase {
      get { return paramOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParamOneof() {
      paramOneofCase_ = ParamOneofOneofCase.None;
      paramOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      if (!Params.Equals(other.Params)) return false;
      if (Input != other.Input) return false;
      if (!object.Equals(Cam, other.Cam)) return false;
      if (Token != other.Token) return false;
      if (ParamOneofCase != other.ParamOneofCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      hash ^= Params.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Input) hash ^= Input.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Cam) hash ^= Cam.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= (int) paramOneofCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      params_.WriteTo(output, _map_params_codec);
      if (paramOneofCase_ == ParamOneofOneofCase.Input) {
        output.WriteRawTag(34);
        output.WriteString(Input);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Cam) {
        output.WriteRawTag(42);
        output.WriteMessage(Cam);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      size += params_.CalculateSize(_map_params_codec);
      if (paramOneofCase_ == ParamOneofOneofCase.Input) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Input);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Cam) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cam);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      params_.Add(other.params_);
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      switch (other.ParamOneofCase) {
        case ParamOneofOneofCase.Input:
          Input = other.Input;
          break;
        case ParamOneofOneofCase.Cam:
          Cam = other.Cam;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 34: {
            Input = input.ReadString();
            break;
          }
          case 42: {
            global::Com.Context.Grpc.Cam subBuilder = new global::Com.Context.Grpc.Cam();
            if (paramOneofCase_ == ParamOneofOneofCase.Cam) {
              subBuilder.MergeFrom(Cam);
            }
            input.ReadMessage(subBuilder);
            Cam = subBuilder;
            break;
          }
          case 50: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BooleanResponse : pb::IMessage<BooleanResponse> {
    private static readonly pb::MessageParser<BooleanResponse> _parser = new pb::MessageParser<BooleanResponse>(() => new BooleanResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BooleanResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BooleanResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BooleanResponse(BooleanResponse other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BooleanResponse Clone() {
      return new BooleanResponse(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BooleanResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BooleanResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BooleanResponse other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Settings : pb::IMessage<Settings> {
    private static readonly pb::MessageParser<Settings> _parser = new pb::MessageParser<Settings>(() => new Settings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Settings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings(Settings other) : this() {
      windowHeight_ = other.windowHeight_;
      windowWidth_ = other.windowWidth_;
      validation_ = other.validation_;
      fullscreen_ = other.fullscreen_;
      vsync_ = other.vsync_;
      multiSampling_ = other.multiSampling_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings Clone() {
      return new Settings(this);
    }

    /// <summary>Field number for the "windowHeight" field.</summary>
    public const int WindowHeightFieldNumber = 1;
    private int windowHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WindowHeight {
      get { return windowHeight_; }
      set {
        windowHeight_ = value;
      }
    }

    /// <summary>Field number for the "windowWidth" field.</summary>
    public const int WindowWidthFieldNumber = 2;
    private int windowWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WindowWidth {
      get { return windowWidth_; }
      set {
        windowWidth_ = value;
      }
    }

    /// <summary>Field number for the "validation" field.</summary>
    public const int ValidationFieldNumber = 3;
    private bool validation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Validation {
      get { return validation_; }
      set {
        validation_ = value;
      }
    }

    /// <summary>Field number for the "fullscreen" field.</summary>
    public const int FullscreenFieldNumber = 4;
    private bool fullscreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fullscreen {
      get { return fullscreen_; }
      set {
        fullscreen_ = value;
      }
    }

    /// <summary>Field number for the "vsync" field.</summary>
    public const int VsyncFieldNumber = 5;
    private bool vsync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Vsync {
      get { return vsync_; }
      set {
        vsync_ = value;
      }
    }

    /// <summary>Field number for the "multiSampling" field.</summary>
    public const int MultiSamplingFieldNumber = 6;
    private bool multiSampling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MultiSampling {
      get { return multiSampling_; }
      set {
        multiSampling_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Settings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Settings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WindowHeight != other.WindowHeight) return false;
      if (WindowWidth != other.WindowWidth) return false;
      if (Validation != other.Validation) return false;
      if (Fullscreen != other.Fullscreen) return false;
      if (Vsync != other.Vsync) return false;
      if (MultiSampling != other.MultiSampling) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WindowHeight != 0) hash ^= WindowHeight.GetHashCode();
      if (WindowWidth != 0) hash ^= WindowWidth.GetHashCode();
      if (Validation != false) hash ^= Validation.GetHashCode();
      if (Fullscreen != false) hash ^= Fullscreen.GetHashCode();
      if (Vsync != false) hash ^= Vsync.GetHashCode();
      if (MultiSampling != false) hash ^= MultiSampling.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WindowHeight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WindowHeight);
      }
      if (WindowWidth != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WindowWidth);
      }
      if (Validation != false) {
        output.WriteRawTag(24);
        output.WriteBool(Validation);
      }
      if (Fullscreen != false) {
        output.WriteRawTag(32);
        output.WriteBool(Fullscreen);
      }
      if (Vsync != false) {
        output.WriteRawTag(40);
        output.WriteBool(Vsync);
      }
      if (MultiSampling != false) {
        output.WriteRawTag(48);
        output.WriteBool(MultiSampling);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WindowHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindowHeight);
      }
      if (WindowWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindowWidth);
      }
      if (Validation != false) {
        size += 1 + 1;
      }
      if (Fullscreen != false) {
        size += 1 + 1;
      }
      if (Vsync != false) {
        size += 1 + 1;
      }
      if (MultiSampling != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Settings other) {
      if (other == null) {
        return;
      }
      if (other.WindowHeight != 0) {
        WindowHeight = other.WindowHeight;
      }
      if (other.WindowWidth != 0) {
        WindowWidth = other.WindowWidth;
      }
      if (other.Validation != false) {
        Validation = other.Validation;
      }
      if (other.Fullscreen != false) {
        Fullscreen = other.Fullscreen;
      }
      if (other.Vsync != false) {
        Vsync = other.Vsync;
      }
      if (other.MultiSampling != false) {
        MultiSampling = other.MultiSampling;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WindowHeight = input.ReadInt32();
            break;
          }
          case 16: {
            WindowWidth = input.ReadInt32();
            break;
          }
          case 24: {
            Validation = input.ReadBool();
            break;
          }
          case 32: {
            Fullscreen = input.ReadBool();
            break;
          }
          case 40: {
            Vsync = input.ReadBool();
            break;
          }
          case 48: {
            MultiSampling = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinaryMessage : pb::IMessage<BinaryMessage> {
    private static readonly pb::MessageParser<BinaryMessage> _parser = new pb::MessageParser<BinaryMessage>(() => new BinaryMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinaryMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMessage(BinaryMessage other) : this() {
      id_ = other.id_;
      mValue_ = other.mValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMessage Clone() {
      return new BinaryMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "mValue" field.</summary>
    public const int MValueFieldNumber = 2;
    private pb::ByteString mValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MValue {
      get { return mValue_; }
      set {
        mValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinaryMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinaryMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MValue != other.MValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MValue.Length != 0) hash ^= MValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (MValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (MValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinaryMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MValue.Length != 0) {
        MValue = other.MValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            MValue = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
