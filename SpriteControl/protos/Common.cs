// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Common.Grpc {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SD2NvbS5jb21tb24uZ3JwYyIJCgdScGNWb2lkIjQK",
            "BUlkZW50EgwKAmlkGAEgASgHSAASDgoEdXVpZBgCIAEoCUgAQg0KC3BhcmFt",
            "X29uZW9mInAKCFBhcmFtTWFwEjUKBnBhcmFtcxgBIAMoCzIlLmNvbS5jb21t",
            "b24uZ3JwYy5QYXJhbU1hcC5QYXJhbXNFbnRyeRotCgtQYXJhbXNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Common.Grpc.RpcVoid), global::Com.Common.Grpc.RpcVoid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Common.Grpc.Ident), global::Com.Common.Grpc.Ident.Parser, new[]{ "Id", "Uuid" }, new[]{ "ParamOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Common.Grpc.ParamMap), global::Com.Common.Grpc.ParamMap.Parser, new[]{ "Params" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RpcVoid : pb::IMessage<RpcVoid> {
    private static readonly pb::MessageParser<RpcVoid> _parser = new pb::MessageParser<RpcVoid>(() => new RpcVoid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcVoid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Common.Grpc.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcVoid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcVoid(RpcVoid other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcVoid Clone() {
      return new RpcVoid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcVoid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcVoid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcVoid other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Ident : pb::IMessage<Ident> {
    private static readonly pb::MessageParser<Ident> _parser = new pb::MessageParser<Ident>(() => new Ident());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ident> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Common.Grpc.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ident() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ident(Ident other) : this() {
      switch (other.ParamOneofCase) {
        case ParamOneofOneofCase.Id:
          Id = other.Id;
          break;
        case ParamOneofOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ident Clone() {
      return new Ident(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return paramOneofCase_ == ParamOneofOneofCase.Id ? (uint) paramOneof_ : 0; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = ParamOneofOneofCase.Id;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return paramOneofCase_ == ParamOneofOneofCase.Uuid ? (string) paramOneof_ : ""; }
      set {
        paramOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        paramOneofCase_ = ParamOneofOneofCase.Uuid;
      }
    }

    private object paramOneof_;
    /// <summary>Enum of possible cases for the "param_oneof" oneof.</summary>
    public enum ParamOneofOneofCase {
      None = 0,
      Id = 1,
      Uuid = 2,
    }
    private ParamOneofOneofCase paramOneofCase_ = ParamOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamOneofOneofCase ParamOneofCase {
      get { return paramOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParamOneof() {
      paramOneofCase_ = ParamOneofOneofCase.None;
      paramOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ident);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ident other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uuid != other.Uuid) return false;
      if (ParamOneofCase != other.ParamOneofCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paramOneofCase_ == ParamOneofOneofCase.Id) hash ^= Id.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Uuid) hash ^= Uuid.GetHashCode();
      hash ^= (int) paramOneofCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paramOneofCase_ == ParamOneofOneofCase.Id) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Uuid) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paramOneofCase_ == ParamOneofOneofCase.Id) {
        size += 1 + 4;
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Uuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ident other) {
      if (other == null) {
        return;
      }
      switch (other.ParamOneofCase) {
        case ParamOneofOneofCase.Id:
          Id = other.Id;
          break;
        case ParamOneofOneofCase.Uuid:
          Uuid = other.Uuid;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParamMap : pb::IMessage<ParamMap> {
    private static readonly pb::MessageParser<ParamMap> _parser = new pb::MessageParser<ParamMap>(() => new ParamMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Common.Grpc.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamMap(ParamMap other) : this() {
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamMap Clone() {
      return new ParamMap(this);
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Params.Equals(other.Params)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Params.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      params_.WriteTo(output, _map_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += params_.CalculateSize(_map_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamMap other) {
      if (other == null) {
        return;
      }
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
