// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipcoe1.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Com.Ipcoe1.Grpc {
  public static class IPCOE1Service
  {
    static readonly string __ServiceName = "com.ipcoe1.grpc.IPCOE1Service";

    static readonly Marshaller<global::Com.Ipcoe1.Grpc.RpcVoid> __Marshaller_RpcVoid = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Ipcoe1.Grpc.RpcVoid.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Ipcoe1.Grpc.Value> __Marshaller_Value = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Ipcoe1.Grpc.Value.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Ipcoe1.Grpc.Struct> __Marshaller_Struct = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Ipcoe1.Grpc.Struct.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Ipcoe1.Grpc.StructList> __Marshaller_StructList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Ipcoe1.Grpc.StructList.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Ipcoe1.Grpc.Table> __Marshaller_Table = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Ipcoe1.Grpc.Table.Parser.ParseFrom);

    static readonly Method<global::Com.Ipcoe1.Grpc.RpcVoid, global::Com.Ipcoe1.Grpc.RpcVoid> __Method_ping = new Method<global::Com.Ipcoe1.Grpc.RpcVoid, global::Com.Ipcoe1.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "ping",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.Value> __Method_get = new Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.Value>(
        MethodType.Unary,
        __ServiceName,
        "get",
        __Marshaller_Value,
        __Marshaller_Value);

    static readonly Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.RpcVoid> __Method_post = new Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "post",
        __Marshaller_Value,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.RpcVoid> __Method_put = new Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "put",
        __Marshaller_Value,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.RpcVoid> __Method_remove = new Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "remove",
        __Marshaller_Value,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Ipcoe1.Grpc.Struct, global::Com.Ipcoe1.Grpc.Value> __Method_subscribe = new Method<global::Com.Ipcoe1.Grpc.Struct, global::Com.Ipcoe1.Grpc.Value>(
        MethodType.ServerStreaming,
        __ServiceName,
        "subscribe",
        __Marshaller_Struct,
        __Marshaller_Value);

    static readonly Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.Value> __Method_subscribeWithStream = new Method<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.Value>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "subscribeWithStream",
        __Marshaller_Value,
        __Marshaller_Value);

    static readonly Method<global::Com.Ipcoe1.Grpc.Struct, global::Com.Ipcoe1.Grpc.StructList> __Method_subscribeStructList = new Method<global::Com.Ipcoe1.Grpc.Struct, global::Com.Ipcoe1.Grpc.StructList>(
        MethodType.ServerStreaming,
        __ServiceName,
        "subscribeStructList",
        __Marshaller_Struct,
        __Marshaller_StructList);

    static readonly Method<global::Com.Ipcoe1.Grpc.Struct, global::Com.Ipcoe1.Grpc.Table> __Method_subscribeTable = new Method<global::Com.Ipcoe1.Grpc.Struct, global::Com.Ipcoe1.Grpc.Table>(
        MethodType.ServerStreaming,
        __ServiceName,
        "subscribeTable",
        __Marshaller_Struct,
        __Marshaller_Table);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IPCOE1Service</summary>
    public abstract class IPCOE1ServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Com.Ipcoe1.Grpc.RpcVoid> ping(global::Com.Ipcoe1.Grpc.RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.Ipcoe1.Grpc.Value> get(global::Com.Ipcoe1.Grpc.Value request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.Ipcoe1.Grpc.RpcVoid> post(global::Com.Ipcoe1.Grpc.Value request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.Ipcoe1.Grpc.RpcVoid> put(global::Com.Ipcoe1.Grpc.Value request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.Ipcoe1.Grpc.RpcVoid> remove(global::Com.Ipcoe1.Grpc.Value request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task subscribe(global::Com.Ipcoe1.Grpc.Struct request, IServerStreamWriter<global::Com.Ipcoe1.Grpc.Value> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task subscribeWithStream(IAsyncStreamReader<global::Com.Ipcoe1.Grpc.Value> requestStream, IServerStreamWriter<global::Com.Ipcoe1.Grpc.Value> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task subscribeStructList(global::Com.Ipcoe1.Grpc.Struct request, IServerStreamWriter<global::Com.Ipcoe1.Grpc.StructList> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task subscribeTable(global::Com.Ipcoe1.Grpc.Struct request, IServerStreamWriter<global::Com.Ipcoe1.Grpc.Table> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IPCOE1Service</summary>
    public class IPCOE1ServiceClient : ClientBase<IPCOE1ServiceClient>
    {
      /// <summary>Creates a new client for IPCOE1Service</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IPCOE1ServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IPCOE1Service that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IPCOE1ServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IPCOE1ServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IPCOE1ServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Com.Ipcoe1.Grpc.RpcVoid ping(global::Com.Ipcoe1.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ping(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Ipcoe1.Grpc.RpcVoid ping(global::Com.Ipcoe1.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ping, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> pingAsync(global::Com.Ipcoe1.Grpc.RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return pingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> pingAsync(global::Com.Ipcoe1.Grpc.RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ping, null, options, request);
      }
      public virtual global::Com.Ipcoe1.Grpc.Value get(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return get(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Ipcoe1.Grpc.Value get(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_get, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.Value> getAsync(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.Value> getAsync(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_get, null, options, request);
      }
      public virtual global::Com.Ipcoe1.Grpc.RpcVoid post(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return post(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Ipcoe1.Grpc.RpcVoid post(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_post, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> postAsync(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return postAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> postAsync(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_post, null, options, request);
      }
      public virtual global::Com.Ipcoe1.Grpc.RpcVoid put(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return put(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Ipcoe1.Grpc.RpcVoid put(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_put, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> putAsync(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> putAsync(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_put, null, options, request);
      }
      public virtual global::Com.Ipcoe1.Grpc.RpcVoid remove(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return remove(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Ipcoe1.Grpc.RpcVoid remove(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_remove, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> removeAsync(global::Com.Ipcoe1.Grpc.Value request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return removeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.Ipcoe1.Grpc.RpcVoid> removeAsync(global::Com.Ipcoe1.Grpc.Value request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_remove, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::Com.Ipcoe1.Grpc.Value> subscribe(global::Com.Ipcoe1.Grpc.Struct request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return subscribe(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Com.Ipcoe1.Grpc.Value> subscribe(global::Com.Ipcoe1.Grpc.Struct request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribe, null, options, request);
      }
      public virtual AsyncDuplexStreamingCall<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.Value> subscribeWithStream(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return subscribeWithStream(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::Com.Ipcoe1.Grpc.Value, global::Com.Ipcoe1.Grpc.Value> subscribeWithStream(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_subscribeWithStream, null, options);
      }
      public virtual AsyncServerStreamingCall<global::Com.Ipcoe1.Grpc.StructList> subscribeStructList(global::Com.Ipcoe1.Grpc.Struct request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return subscribeStructList(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Com.Ipcoe1.Grpc.StructList> subscribeStructList(global::Com.Ipcoe1.Grpc.Struct request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeStructList, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::Com.Ipcoe1.Grpc.Table> subscribeTable(global::Com.Ipcoe1.Grpc.Struct request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return subscribeTable(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Com.Ipcoe1.Grpc.Table> subscribeTable(global::Com.Ipcoe1.Grpc.Struct request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeTable, null, options, request);
      }
      protected override IPCOE1ServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IPCOE1ServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(IPCOE1ServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ping, serviceImpl.ping)
          .AddMethod(__Method_get, serviceImpl.get)
          .AddMethod(__Method_post, serviceImpl.post)
          .AddMethod(__Method_put, serviceImpl.put)
          .AddMethod(__Method_remove, serviceImpl.remove)
          .AddMethod(__Method_subscribe, serviceImpl.subscribe)
          .AddMethod(__Method_subscribeWithStream, serviceImpl.subscribeWithStream)
          .AddMethod(__Method_subscribeStructList, serviceImpl.subscribeStructList)
          .AddMethod(__Method_subscribeTable, serviceImpl.subscribeTable).Build();
    }

  }
}
#endregion
