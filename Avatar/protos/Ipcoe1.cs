// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipcoe1.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Ipcoe1.Grpc {

  /// <summary>Holder for reflection information generated from ipcoe1.proto</summary>
  public static partial class Ipcoe1Reflection {

    #region Descriptor
    /// <summary>File descriptor for ipcoe1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Ipcoe1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxpcGNvZTEucHJvdG8SD2NvbS5pcGNvZTEuZ3JwYyIJCgdScGNWb2lkIpsB",
            "CgREYXRhEgoKAmlkGAEgASgNEjEKBmhlYWRlchgCIAMoCzIhLmNvbS5pcGNv",
            "ZTEuZ3JwYy5EYXRhLkhlYWRlckVudHJ5EiUKBXZhbHVlGAMgASgLMhYuY29t",
            "LmlwY29lMS5ncnBjLlZhbHVlGi0KC0hlYWRlckVudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEigQEKBlN0cnVjdBIxCgV2YWx1ZRgBIAMo",
            "CzIiLmNvbS5pcGNvZTEuZ3JwYy5TdHJ1Y3QuVmFsdWVFbnRyeRpECgpWYWx1",
            "ZUVudHJ5EgsKA2tleRgBIAEoCRIlCgV2YWx1ZRgCIAEoCzIWLmNvbS5pcGNv",
            "ZTEuZ3JwYy5WYWx1ZToCOAEiNQoKU3RydWN0TGlzdBInCgZ2YWx1ZXMYASAD",
            "KAsyFy5jb20uaXBjb2UxLmdycGMuU3RydWN0Iv4GCgVWYWx1ZRIVCgtpbnQz",
            "Ml92YWx1ZRgBIAEoBUgAEhYKDHVpbnQzMl92YWx1ZRgCIAEoDUgAEhcKDWZp",
            "eGVkMzJfdmFsdWUYAyABKAdIABIVCgtpbnQ2NF92YWx1ZRgEIAEoA0gAEhYK",
            "DHVpbnQ2NF92YWx1ZRgFIAEoBEgAEhcKDWZpeGVkNjRfdmFsdWUYBiABKAZI",
            "ABIWCgxzdHJpbmdfdmFsdWUYByABKAlIABIWCgxkb3VibGVfdmFsdWUYCCAB",
            "KAFIABIVCgtmbG9hdF92YWx1ZRgJIAEoAkgAEhQKCmJvb2xfdmFsdWUYCiAB",
            "KAhIABIvCgxzdHJ1Y3RfdmFsdWUYCyABKAsyFy5jb20uaXBjb2UxLmdycGMu",
            "U3RydWN0SAASMgoLc3RydWN0X2xpc3QYDCABKAsyGy5jb20uaXBjb2UxLmdy",
            "cGMuU3RydWN0TGlzdEgAEjIKC3VpbnQzMl9saXN0GA0gASgLMhsuY29tLmlw",
            "Y29lMS5ncnBjLlVpbnQzMkxpc3RIABIwCgpmbG9hdF9saXN0GA4gASgLMhou",
            "Y29tLmlwY29lMS5ncnBjLkZsb2F0TGlzdEgAEjIKC3N0cmluZ19saXN0GA8g",
            "ASgLMhsuY29tLmlwY29lMS5ncnBjLlN0cmluZ0xpc3RIABIVCgtieXRlc192",
            "YWx1ZRgQIAEoDEgAEjQKDGZsb2F0X21hdHJpeBgRIAEoCzIcLmNvbS5pcGNv",
            "ZTEuZ3JwYy5GbG9hdE1hdHJpeEgAEi0KC3RhYmxlX3ZhbHVlGBIgASgLMhYu",
            "Y29tLmlwY29lMS5ncnBjLlRhYmxlSAASMAoKbnVsbF92YWx1ZRgTIAEoDjIa",
            "LmNvbS5pcGNvZTEuZ3JwYy5OdWxsVmFsdWVIABI3ChBkaWN0aW9uYXJ5X3Zh",
            "bHVlGBQgASgOMhsuY29tLmlwY29lMS5ncnBjLkRpY3Rpb25hcnlIABIwCgp2",
            "YWx1ZV9saXN0GBUgASgLMhouY29tLmlwY29lMS5ncnBjLlZhbHVlTGlzdEgA",
            "EjMKDnZlY3RvcjNmX3ZhbHVlGBYgASgLMhkuY29tLmlwY29lMS5ncnBjLlZl",
            "Y3RvcjNmSAASMwoOdmVjdG9yNGZfdmFsdWUYFyABKAsyGS5jb20uaXBjb2Ux",
            "LmdycGMuVmVjdG9yNGZIAEIGCgRraW5kIisKCFZlY3RvcjNmEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIjYKCFZlY3RvcjRmEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCEgkKAXcYBCABKAIiMwoJVmFsdWVM",
            "aXN0EiYKBnZhbHVlcxgBIAMoCzIWLmNvbS5pcGNvZTEuZ3JwYy5WYWx1ZSI3",
            "CgtGbG9hdE1hdHJpeBIoCgRyb3dzGAEgAygLMhouY29tLmlwY29lMS5ncnBj",
            "LkZsb2F0TGlzdCJICgVUYWJsZRIPCgdoZWFkZXJzGAEgAygJEi4KBGNvbHMY",
            "AiADKAsyIC5jb20uaXBjb2UxLmdycGMuVmFsdWVDb2xsZWN0aW9uIhwKClVp",
            "bnQzMkxpc3QSDgoGdmFsdWVzGAEgAygNIhsKCUZsb2F0TGlzdBIOCgZ2YWx1",
            "ZXMYASADKAIiHAoKU3RyaW5nTGlzdBIOCgZ2YWx1ZXMYASADKAkiOQoMVmVj",
            "dG9yM2ZMaXN0EikKBnZhbHVlcxgBIAMoCzIZLmNvbS5pcGNvZTEuZ3JwYy5W",
            "ZWN0b3IzZiLrAQoPVmFsdWVDb2xsZWN0aW9uEjIKC3VpbnQzMl9saXN0GAEg",
            "ASgLMhsuY29tLmlwY29lMS5ncnBjLlVpbnQzMkxpc3RIABIwCgpmbG9hdF9s",
            "aXN0GAIgASgLMhouY29tLmlwY29lMS5ncnBjLkZsb2F0TGlzdEgAEjIKC3N0",
            "cmluZ19saXN0GAMgASgLMhsuY29tLmlwY29lMS5ncnBjLlN0cmluZ0xpc3RI",
            "ABI2Cg12ZWN0b3IzZl9saXN0GAQgASgLMh0uY29tLmlwY29lMS5ncnBjLlZl",
            "Y3RvcjNmTGlzdEgAQgYKBGtpbmQqGwoJTnVsbFZhbHVlEg4KCk5VTExfVkFM",
            "VUUQACr3AgoKRGljdGlvbmFyeRIICgROVUxMEAASCQoFU1RBUlQQARIICgRT",
            "VE9QEAISCAoESURMRRADEgsKB1JFU1RBUlQQBBIICgRPUEVOEAUSCQoFQ0xP",
            "U0UQBhIKCgZSRUxPQUQQBxIICgRFWElUEAgSCAoESU5JVBAJEgkKBUVSUk9S",
            "EAoSCgoGREVOSUVEEAsSDQoJTk9UX0ZPVU5EEAwSCQoFQ0xFQVIQDhIKCgZT",
            "RUxFQ1QQDxIKCgZJTlNFUlQQEBIKCgZVUERBVEUQERIKCgZSRU1PVkUQEhII",
            "CgREUk9QEBMSDAoIVkVSWV9MT1cQFBIHCgNMT1cQFRIKCgZNRURJVU0QFhII",
            "CgRISUdIEBcSDQoJVkVSWV9ISUdIEBgSCAoEQVVUTxAZEgcKA0VOVhAaEgcK",
            "A0NNRBAbEggKBENPUFkQHBILCgdXT1JLRElSEB0SBwoDUlVOEB4SEQoNQ1VS",
            "UkVOVF9TVEFURRAfEggKBEpPSU4QIDLQBAoNSVBDT0UxU2VydmljZRI6CgRw",
            "aW5nEhguY29tLmlwY29lMS5ncnBjLlJwY1ZvaWQaGC5jb20uaXBjb2UxLmdy",
            "cGMuUnBjVm9pZBI1CgNnZXQSFi5jb20uaXBjb2UxLmdycGMuVmFsdWUaFi5j",
            "b20uaXBjb2UxLmdycGMuVmFsdWUSOAoEcG9zdBIWLmNvbS5pcGNvZTEuZ3Jw",
            "Yy5WYWx1ZRoYLmNvbS5pcGNvZTEuZ3JwYy5ScGNWb2lkEjcKA3B1dBIWLmNv",
            "bS5pcGNvZTEuZ3JwYy5WYWx1ZRoYLmNvbS5pcGNvZTEuZ3JwYy5ScGNWb2lk",
            "EjoKBnJlbW92ZRIWLmNvbS5pcGNvZTEuZ3JwYy5WYWx1ZRoYLmNvbS5pcGNv",
            "ZTEuZ3JwYy5ScGNWb2lkEj4KCXN1YnNjcmliZRIXLmNvbS5pcGNvZTEuZ3Jw",
            "Yy5TdHJ1Y3QaFi5jb20uaXBjb2UxLmdycGMuVmFsdWUwARJJChNzdWJzY3Jp",
            "YmVXaXRoU3RyZWFtEhYuY29tLmlwY29lMS5ncnBjLlZhbHVlGhYuY29tLmlw",
            "Y29lMS5ncnBjLlZhbHVlKAEwARJNChNzdWJzY3JpYmVTdHJ1Y3RMaXN0Ehcu",
            "Y29tLmlwY29lMS5ncnBjLlN0cnVjdBobLmNvbS5pcGNvZTEuZ3JwYy5TdHJ1",
            "Y3RMaXN0MAESQwoOc3Vic2NyaWJlVGFibGUSFy5jb20uaXBjb2UxLmdycGMu",
            "U3RydWN0GhYuY29tLmlwY29lMS5ncnBjLlRhYmxlMAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Ipcoe1.Grpc.NullValue), typeof(global::Com.Ipcoe1.Grpc.Dictionary), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.RpcVoid), global::Com.Ipcoe1.Grpc.RpcVoid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Data), global::Com.Ipcoe1.Grpc.Data.Parser, new[]{ "Id", "Header", "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Struct), global::Com.Ipcoe1.Grpc.Struct.Parser, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.StructList), global::Com.Ipcoe1.Grpc.StructList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Value), global::Com.Ipcoe1.Grpc.Value.Parser, new[]{ "Int32Value", "Uint32Value", "Fixed32Value", "Int64Value", "Uint64Value", "Fixed64Value", "StringValue", "DoubleValue", "FloatValue", "BoolValue", "StructValue", "StructList", "Uint32List", "FloatList", "StringList", "BytesValue", "FloatMatrix", "TableValue", "NullValue", "DictionaryValue", "ValueList", "Vector3FValue", "Vector4FValue" }, new[]{ "Kind" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Vector3f), global::Com.Ipcoe1.Grpc.Vector3f.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Vector4f), global::Com.Ipcoe1.Grpc.Vector4f.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.ValueList), global::Com.Ipcoe1.Grpc.ValueList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.FloatMatrix), global::Com.Ipcoe1.Grpc.FloatMatrix.Parser, new[]{ "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Table), global::Com.Ipcoe1.Grpc.Table.Parser, new[]{ "Headers", "Cols" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Uint32List), global::Com.Ipcoe1.Grpc.Uint32List.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.FloatList), global::Com.Ipcoe1.Grpc.FloatList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.StringList), global::Com.Ipcoe1.Grpc.StringList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.Vector3fList), global::Com.Ipcoe1.Grpc.Vector3fList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Ipcoe1.Grpc.ValueCollection), global::Com.Ipcoe1.Grpc.ValueCollection.Parser, new[]{ "Uint32List", "FloatList", "StringList", "Vector3FList" }, new[]{ "Kind" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum NullValue {
    [pbr::OriginalName("NULL_VALUE")] NullValue = 0,
  }

  public enum Dictionary {
    [pbr::OriginalName("NULL")] Null = 0,
    [pbr::OriginalName("START")] Start = 1,
    [pbr::OriginalName("STOP")] Stop = 2,
    [pbr::OriginalName("IDLE")] Idle = 3,
    [pbr::OriginalName("RESTART")] Restart = 4,
    [pbr::OriginalName("OPEN")] Open = 5,
    [pbr::OriginalName("CLOSE")] Close = 6,
    [pbr::OriginalName("RELOAD")] Reload = 7,
    [pbr::OriginalName("EXIT")] Exit = 8,
    [pbr::OriginalName("INIT")] Init = 9,
    [pbr::OriginalName("ERROR")] Error = 10,
    [pbr::OriginalName("DENIED")] Denied = 11,
    [pbr::OriginalName("NOT_FOUND")] NotFound = 12,
    [pbr::OriginalName("CLEAR")] Clear = 14,
    [pbr::OriginalName("SELECT")] Select = 15,
    [pbr::OriginalName("INSERT")] Insert = 16,
    [pbr::OriginalName("UPDATE")] Update = 17,
    [pbr::OriginalName("REMOVE")] Remove = 18,
    [pbr::OriginalName("DROP")] Drop = 19,
    [pbr::OriginalName("VERY_LOW")] VeryLow = 20,
    [pbr::OriginalName("LOW")] Low = 21,
    [pbr::OriginalName("MEDIUM")] Medium = 22,
    [pbr::OriginalName("HIGH")] High = 23,
    [pbr::OriginalName("VERY_HIGH")] VeryHigh = 24,
    [pbr::OriginalName("AUTO")] Auto = 25,
    [pbr::OriginalName("ENV")] Env = 26,
    [pbr::OriginalName("CMD")] Cmd = 27,
    [pbr::OriginalName("COPY")] Copy = 28,
    [pbr::OriginalName("WORKDIR")] Workdir = 29,
    [pbr::OriginalName("RUN")] Run = 30,
    [pbr::OriginalName("CURRENT_STATE")] CurrentState = 31,
    [pbr::OriginalName("JOIN")] Join = 32,
  }

  #endregion

  #region Messages
  public sealed partial class RpcVoid : pb::IMessage<RpcVoid> {
    private static readonly pb::MessageParser<RpcVoid> _parser = new pb::MessageParser<RpcVoid>(() => new RpcVoid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcVoid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcVoid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcVoid(RpcVoid other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcVoid Clone() {
      return new RpcVoid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcVoid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcVoid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcVoid other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Data : pb::IMessage<Data> {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data(Data other) : this() {
      id_ = other.id_;
      header_ = other.header_.Clone();
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_header_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> header_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Header {
      get { return header_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private global::Com.Ipcoe1.Grpc.Value value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Header.Equals(other.Header)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Header.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      header_.WriteTo(output, _map_header_codec);
      if (value_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += header_.CalculateSize(_map_header_codec);
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      header_.Add(other.header_);
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Com.Ipcoe1.Grpc.Value();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            header_.AddEntriesFrom(input, _map_header_codec);
            break;
          }
          case 26: {
            if (value_ == null) {
              value_ = new global::Com.Ipcoe1.Grpc.Value();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Struct : pb::IMessage<Struct> {
    private static readonly pb::MessageParser<Struct> _parser = new pb::MessageParser<Struct>(() => new Struct());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Struct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Struct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Struct(Struct other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Struct Clone() {
      return new Struct(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Com.Ipcoe1.Grpc.Value>.Codec _map_value_codec
        = new pbc::MapField<string, global::Com.Ipcoe1.Grpc.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Com.Ipcoe1.Grpc.Value.Parser), 10);
    private readonly pbc::MapField<string, global::Com.Ipcoe1.Grpc.Value> value_ = new pbc::MapField<string, global::Com.Ipcoe1.Grpc.Value>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Com.Ipcoe1.Grpc.Value> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Struct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Struct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Struct other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StructList : pb::IMessage<StructList> {
    private static readonly pb::MessageParser<StructList> _parser = new pb::MessageParser<StructList>(() => new StructList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StructList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructList(StructList other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StructList Clone() {
      return new StructList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Ipcoe1.Grpc.Struct> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Ipcoe1.Grpc.Struct.Parser);
    private readonly pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Struct> values_ = new pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Struct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Struct> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StructList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StructList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StructList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Value : pb::IMessage<Value> {
    private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value(Value other) : this() {
      switch (other.KindCase) {
        case KindOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case KindOneofCase.Uint32Value:
          Uint32Value = other.Uint32Value;
          break;
        case KindOneofCase.Fixed32Value:
          Fixed32Value = other.Fixed32Value;
          break;
        case KindOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case KindOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case KindOneofCase.Fixed64Value:
          Fixed64Value = other.Fixed64Value;
          break;
        case KindOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case KindOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case KindOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case KindOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case KindOneofCase.StructValue:
          StructValue = other.StructValue.Clone();
          break;
        case KindOneofCase.StructList:
          StructList = other.StructList.Clone();
          break;
        case KindOneofCase.Uint32List:
          Uint32List = other.Uint32List.Clone();
          break;
        case KindOneofCase.FloatList:
          FloatList = other.FloatList.Clone();
          break;
        case KindOneofCase.StringList:
          StringList = other.StringList.Clone();
          break;
        case KindOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case KindOneofCase.FloatMatrix:
          FloatMatrix = other.FloatMatrix.Clone();
          break;
        case KindOneofCase.TableValue:
          TableValue = other.TableValue.Clone();
          break;
        case KindOneofCase.NullValue:
          NullValue = other.NullValue;
          break;
        case KindOneofCase.DictionaryValue:
          DictionaryValue = other.DictionaryValue;
          break;
        case KindOneofCase.ValueList:
          ValueList = other.ValueList.Clone();
          break;
        case KindOneofCase.Vector3FValue:
          Vector3FValue = other.Vector3FValue.Clone();
          break;
        case KindOneofCase.Vector4FValue:
          Vector4FValue = other.Vector4FValue.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value Clone() {
      return new Value(this);
    }

    /// <summary>Field number for the "int32_value" field.</summary>
    public const int Int32ValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Value {
      get { return kindCase_ == KindOneofCase.Int32Value ? (int) kind_ : 0; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Int32Value;
      }
    }

    /// <summary>Field number for the "uint32_value" field.</summary>
    public const int Uint32ValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uint32Value {
      get { return kindCase_ == KindOneofCase.Uint32Value ? (uint) kind_ : 0; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Uint32Value;
      }
    }

    /// <summary>Field number for the "fixed32_value" field.</summary>
    public const int Fixed32ValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fixed32Value {
      get { return kindCase_ == KindOneofCase.Fixed32Value ? (uint) kind_ : 0; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Fixed32Value;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return kindCase_ == KindOneofCase.Int64Value ? (long) kind_ : 0L; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Int64Value;
      }
    }

    /// <summary>Field number for the "uint64_value" field.</summary>
    public const int Uint64ValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uint64Value {
      get { return kindCase_ == KindOneofCase.Uint64Value ? (ulong) kind_ : 0UL; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Uint64Value;
      }
    }

    /// <summary>Field number for the "fixed64_value" field.</summary>
    public const int Fixed64ValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fixed64Value {
      get { return kindCase_ == KindOneofCase.Fixed64Value ? (ulong) kind_ : 0UL; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.Fixed64Value;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return kindCase_ == KindOneofCase.StringValue ? (string) kind_ : ""; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        kindCase_ = KindOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return kindCase_ == KindOneofCase.DoubleValue ? (double) kind_ : 0D; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return kindCase_ == KindOneofCase.FloatValue ? (float) kind_ : 0F; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return kindCase_ == KindOneofCase.BoolValue ? (bool) kind_ : false; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "struct_value" field.</summary>
    public const int StructValueFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Struct StructValue {
      get { return kindCase_ == KindOneofCase.StructValue ? (global::Com.Ipcoe1.Grpc.Struct) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.StructValue;
      }
    }

    /// <summary>Field number for the "struct_list" field.</summary>
    public const int StructListFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.StructList StructList {
      get { return kindCase_ == KindOneofCase.StructList ? (global::Com.Ipcoe1.Grpc.StructList) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.StructList;
      }
    }

    /// <summary>Field number for the "uint32_list" field.</summary>
    public const int Uint32ListFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Uint32List Uint32List {
      get { return kindCase_ == KindOneofCase.Uint32List ? (global::Com.Ipcoe1.Grpc.Uint32List) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Uint32List;
      }
    }

    /// <summary>Field number for the "float_list" field.</summary>
    public const int FloatListFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.FloatList FloatList {
      get { return kindCase_ == KindOneofCase.FloatList ? (global::Com.Ipcoe1.Grpc.FloatList) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.FloatList;
      }
    }

    /// <summary>Field number for the "string_list" field.</summary>
    public const int StringListFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.StringList StringList {
      get { return kindCase_ == KindOneofCase.StringList ? (global::Com.Ipcoe1.Grpc.StringList) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.StringList;
      }
    }

    /// <summary>Field number for the "bytes_value" field.</summary>
    public const int BytesValueFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return kindCase_ == KindOneofCase.BytesValue ? (pb::ByteString) kind_ : pb::ByteString.Empty; }
      set {
        kind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        kindCase_ = KindOneofCase.BytesValue;
      }
    }

    /// <summary>Field number for the "float_matrix" field.</summary>
    public const int FloatMatrixFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.FloatMatrix FloatMatrix {
      get { return kindCase_ == KindOneofCase.FloatMatrix ? (global::Com.Ipcoe1.Grpc.FloatMatrix) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.FloatMatrix;
      }
    }

    /// <summary>Field number for the "table_value" field.</summary>
    public const int TableValueFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Table TableValue {
      get { return kindCase_ == KindOneofCase.TableValue ? (global::Com.Ipcoe1.Grpc.Table) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.TableValue;
      }
    }

    /// <summary>Field number for the "null_value" field.</summary>
    public const int NullValueFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.NullValue NullValue {
      get { return kindCase_ == KindOneofCase.NullValue ? (global::Com.Ipcoe1.Grpc.NullValue) kind_ : 0; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.NullValue;
      }
    }

    /// <summary>Field number for the "dictionary_value" field.</summary>
    public const int DictionaryValueFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Dictionary DictionaryValue {
      get { return kindCase_ == KindOneofCase.DictionaryValue ? (global::Com.Ipcoe1.Grpc.Dictionary) kind_ : 0; }
      set {
        kind_ = value;
        kindCase_ = KindOneofCase.DictionaryValue;
      }
    }

    /// <summary>Field number for the "value_list" field.</summary>
    public const int ValueListFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.ValueList ValueList {
      get { return kindCase_ == KindOneofCase.ValueList ? (global::Com.Ipcoe1.Grpc.ValueList) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.ValueList;
      }
    }

    /// <summary>Field number for the "vector3f_value" field.</summary>
    public const int Vector3FValueFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Vector3f Vector3FValue {
      get { return kindCase_ == KindOneofCase.Vector3FValue ? (global::Com.Ipcoe1.Grpc.Vector3f) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Vector3FValue;
      }
    }

    /// <summary>Field number for the "vector4f_value" field.</summary>
    public const int Vector4FValueFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Vector4f Vector4FValue {
      get { return kindCase_ == KindOneofCase.Vector4FValue ? (global::Com.Ipcoe1.Grpc.Vector4f) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Vector4FValue;
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      Int32Value = 1,
      Uint32Value = 2,
      Fixed32Value = 3,
      Int64Value = 4,
      Uint64Value = 5,
      Fixed64Value = 6,
      StringValue = 7,
      DoubleValue = 8,
      FloatValue = 9,
      BoolValue = 10,
      StructValue = 11,
      StructList = 12,
      Uint32List = 13,
      FloatList = 14,
      StringList = 15,
      BytesValue = 16,
      FloatMatrix = 17,
      TableValue = 18,
      NullValue = 19,
      DictionaryValue = 20,
      ValueList = 21,
      Vector3FValue = 22,
      Vector4FValue = 23,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Int32Value != other.Int32Value) return false;
      if (Uint32Value != other.Uint32Value) return false;
      if (Fixed32Value != other.Fixed32Value) return false;
      if (Int64Value != other.Int64Value) return false;
      if (Uint64Value != other.Uint64Value) return false;
      if (Fixed64Value != other.Fixed64Value) return false;
      if (StringValue != other.StringValue) return false;
      if (DoubleValue != other.DoubleValue) return false;
      if (FloatValue != other.FloatValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (!object.Equals(StructValue, other.StructValue)) return false;
      if (!object.Equals(StructList, other.StructList)) return false;
      if (!object.Equals(Uint32List, other.Uint32List)) return false;
      if (!object.Equals(FloatList, other.FloatList)) return false;
      if (!object.Equals(StringList, other.StringList)) return false;
      if (BytesValue != other.BytesValue) return false;
      if (!object.Equals(FloatMatrix, other.FloatMatrix)) return false;
      if (!object.Equals(TableValue, other.TableValue)) return false;
      if (NullValue != other.NullValue) return false;
      if (DictionaryValue != other.DictionaryValue) return false;
      if (!object.Equals(ValueList, other.ValueList)) return false;
      if (!object.Equals(Vector3FValue, other.Vector3FValue)) return false;
      if (!object.Equals(Vector4FValue, other.Vector4FValue)) return false;
      if (KindCase != other.KindCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.Int32Value) hash ^= Int32Value.GetHashCode();
      if (kindCase_ == KindOneofCase.Uint32Value) hash ^= Uint32Value.GetHashCode();
      if (kindCase_ == KindOneofCase.Fixed32Value) hash ^= Fixed32Value.GetHashCode();
      if (kindCase_ == KindOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      if (kindCase_ == KindOneofCase.Uint64Value) hash ^= Uint64Value.GetHashCode();
      if (kindCase_ == KindOneofCase.Fixed64Value) hash ^= Fixed64Value.GetHashCode();
      if (kindCase_ == KindOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (kindCase_ == KindOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
      if (kindCase_ == KindOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
      if (kindCase_ == KindOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (kindCase_ == KindOneofCase.StructValue) hash ^= StructValue.GetHashCode();
      if (kindCase_ == KindOneofCase.StructList) hash ^= StructList.GetHashCode();
      if (kindCase_ == KindOneofCase.Uint32List) hash ^= Uint32List.GetHashCode();
      if (kindCase_ == KindOneofCase.FloatList) hash ^= FloatList.GetHashCode();
      if (kindCase_ == KindOneofCase.StringList) hash ^= StringList.GetHashCode();
      if (kindCase_ == KindOneofCase.BytesValue) hash ^= BytesValue.GetHashCode();
      if (kindCase_ == KindOneofCase.FloatMatrix) hash ^= FloatMatrix.GetHashCode();
      if (kindCase_ == KindOneofCase.TableValue) hash ^= TableValue.GetHashCode();
      if (kindCase_ == KindOneofCase.NullValue) hash ^= NullValue.GetHashCode();
      if (kindCase_ == KindOneofCase.DictionaryValue) hash ^= DictionaryValue.GetHashCode();
      if (kindCase_ == KindOneofCase.ValueList) hash ^= ValueList.GetHashCode();
      if (kindCase_ == KindOneofCase.Vector3FValue) hash ^= Vector3FValue.GetHashCode();
      if (kindCase_ == KindOneofCase.Vector4FValue) hash ^= Vector4FValue.GetHashCode();
      hash ^= (int) kindCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kindCase_ == KindOneofCase.Int32Value) {
        output.WriteRawTag(8);
        output.WriteInt32(Int32Value);
      }
      if (kindCase_ == KindOneofCase.Uint32Value) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uint32Value);
      }
      if (kindCase_ == KindOneofCase.Fixed32Value) {
        output.WriteRawTag(29);
        output.WriteFixed32(Fixed32Value);
      }
      if (kindCase_ == KindOneofCase.Int64Value) {
        output.WriteRawTag(32);
        output.WriteInt64(Int64Value);
      }
      if (kindCase_ == KindOneofCase.Uint64Value) {
        output.WriteRawTag(40);
        output.WriteUInt64(Uint64Value);
      }
      if (kindCase_ == KindOneofCase.Fixed64Value) {
        output.WriteRawTag(49);
        output.WriteFixed64(Fixed64Value);
      }
      if (kindCase_ == KindOneofCase.StringValue) {
        output.WriteRawTag(58);
        output.WriteString(StringValue);
      }
      if (kindCase_ == KindOneofCase.DoubleValue) {
        output.WriteRawTag(65);
        output.WriteDouble(DoubleValue);
      }
      if (kindCase_ == KindOneofCase.FloatValue) {
        output.WriteRawTag(77);
        output.WriteFloat(FloatValue);
      }
      if (kindCase_ == KindOneofCase.BoolValue) {
        output.WriteRawTag(80);
        output.WriteBool(BoolValue);
      }
      if (kindCase_ == KindOneofCase.StructValue) {
        output.WriteRawTag(90);
        output.WriteMessage(StructValue);
      }
      if (kindCase_ == KindOneofCase.StructList) {
        output.WriteRawTag(98);
        output.WriteMessage(StructList);
      }
      if (kindCase_ == KindOneofCase.Uint32List) {
        output.WriteRawTag(106);
        output.WriteMessage(Uint32List);
      }
      if (kindCase_ == KindOneofCase.FloatList) {
        output.WriteRawTag(114);
        output.WriteMessage(FloatList);
      }
      if (kindCase_ == KindOneofCase.StringList) {
        output.WriteRawTag(122);
        output.WriteMessage(StringList);
      }
      if (kindCase_ == KindOneofCase.BytesValue) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(BytesValue);
      }
      if (kindCase_ == KindOneofCase.FloatMatrix) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FloatMatrix);
      }
      if (kindCase_ == KindOneofCase.TableValue) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(TableValue);
      }
      if (kindCase_ == KindOneofCase.NullValue) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) NullValue);
      }
      if (kindCase_ == KindOneofCase.DictionaryValue) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) DictionaryValue);
      }
      if (kindCase_ == KindOneofCase.ValueList) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ValueList);
      }
      if (kindCase_ == KindOneofCase.Vector3FValue) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Vector3FValue);
      }
      if (kindCase_ == KindOneofCase.Vector4FValue) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Vector4FValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.Int32Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Value);
      }
      if (kindCase_ == KindOneofCase.Uint32Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Value);
      }
      if (kindCase_ == KindOneofCase.Fixed32Value) {
        size += 1 + 4;
      }
      if (kindCase_ == KindOneofCase.Int64Value) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (kindCase_ == KindOneofCase.Uint64Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uint64Value);
      }
      if (kindCase_ == KindOneofCase.Fixed64Value) {
        size += 1 + 8;
      }
      if (kindCase_ == KindOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (kindCase_ == KindOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (kindCase_ == KindOneofCase.FloatValue) {
        size += 1 + 4;
      }
      if (kindCase_ == KindOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (kindCase_ == KindOneofCase.StructValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructValue);
      }
      if (kindCase_ == KindOneofCase.StructList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructList);
      }
      if (kindCase_ == KindOneofCase.Uint32List) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint32List);
      }
      if (kindCase_ == KindOneofCase.FloatList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatList);
      }
      if (kindCase_ == KindOneofCase.StringList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringList);
      }
      if (kindCase_ == KindOneofCase.BytesValue) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (kindCase_ == KindOneofCase.FloatMatrix) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FloatMatrix);
      }
      if (kindCase_ == KindOneofCase.TableValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TableValue);
      }
      if (kindCase_ == KindOneofCase.NullValue) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NullValue);
      }
      if (kindCase_ == KindOneofCase.DictionaryValue) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DictionaryValue);
      }
      if (kindCase_ == KindOneofCase.ValueList) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ValueList);
      }
      if (kindCase_ == KindOneofCase.Vector3FValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vector3FValue);
      }
      if (kindCase_ == KindOneofCase.Vector4FValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Vector4FValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value other) {
      if (other == null) {
        return;
      }
      switch (other.KindCase) {
        case KindOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case KindOneofCase.Uint32Value:
          Uint32Value = other.Uint32Value;
          break;
        case KindOneofCase.Fixed32Value:
          Fixed32Value = other.Fixed32Value;
          break;
        case KindOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case KindOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case KindOneofCase.Fixed64Value:
          Fixed64Value = other.Fixed64Value;
          break;
        case KindOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case KindOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case KindOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case KindOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case KindOneofCase.StructValue:
          StructValue = other.StructValue;
          break;
        case KindOneofCase.StructList:
          StructList = other.StructList;
          break;
        case KindOneofCase.Uint32List:
          Uint32List = other.Uint32List;
          break;
        case KindOneofCase.FloatList:
          FloatList = other.FloatList;
          break;
        case KindOneofCase.StringList:
          StringList = other.StringList;
          break;
        case KindOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case KindOneofCase.FloatMatrix:
          FloatMatrix = other.FloatMatrix;
          break;
        case KindOneofCase.TableValue:
          TableValue = other.TableValue;
          break;
        case KindOneofCase.NullValue:
          NullValue = other.NullValue;
          break;
        case KindOneofCase.DictionaryValue:
          DictionaryValue = other.DictionaryValue;
          break;
        case KindOneofCase.ValueList:
          ValueList = other.ValueList;
          break;
        case KindOneofCase.Vector3FValue:
          Vector3FValue = other.Vector3FValue;
          break;
        case KindOneofCase.Vector4FValue:
          Vector4FValue = other.Vector4FValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Int32Value = input.ReadInt32();
            break;
          }
          case 16: {
            Uint32Value = input.ReadUInt32();
            break;
          }
          case 29: {
            Fixed32Value = input.ReadFixed32();
            break;
          }
          case 32: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 40: {
            Uint64Value = input.ReadUInt64();
            break;
          }
          case 49: {
            Fixed64Value = input.ReadFixed64();
            break;
          }
          case 58: {
            StringValue = input.ReadString();
            break;
          }
          case 65: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 77: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 80: {
            BoolValue = input.ReadBool();
            break;
          }
          case 90: {
            global::Com.Ipcoe1.Grpc.Struct subBuilder = new global::Com.Ipcoe1.Grpc.Struct();
            if (kindCase_ == KindOneofCase.StructValue) {
              subBuilder.MergeFrom(StructValue);
            }
            input.ReadMessage(subBuilder);
            StructValue = subBuilder;
            break;
          }
          case 98: {
            global::Com.Ipcoe1.Grpc.StructList subBuilder = new global::Com.Ipcoe1.Grpc.StructList();
            if (kindCase_ == KindOneofCase.StructList) {
              subBuilder.MergeFrom(StructList);
            }
            input.ReadMessage(subBuilder);
            StructList = subBuilder;
            break;
          }
          case 106: {
            global::Com.Ipcoe1.Grpc.Uint32List subBuilder = new global::Com.Ipcoe1.Grpc.Uint32List();
            if (kindCase_ == KindOneofCase.Uint32List) {
              subBuilder.MergeFrom(Uint32List);
            }
            input.ReadMessage(subBuilder);
            Uint32List = subBuilder;
            break;
          }
          case 114: {
            global::Com.Ipcoe1.Grpc.FloatList subBuilder = new global::Com.Ipcoe1.Grpc.FloatList();
            if (kindCase_ == KindOneofCase.FloatList) {
              subBuilder.MergeFrom(FloatList);
            }
            input.ReadMessage(subBuilder);
            FloatList = subBuilder;
            break;
          }
          case 122: {
            global::Com.Ipcoe1.Grpc.StringList subBuilder = new global::Com.Ipcoe1.Grpc.StringList();
            if (kindCase_ == KindOneofCase.StringList) {
              subBuilder.MergeFrom(StringList);
            }
            input.ReadMessage(subBuilder);
            StringList = subBuilder;
            break;
          }
          case 130: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 138: {
            global::Com.Ipcoe1.Grpc.FloatMatrix subBuilder = new global::Com.Ipcoe1.Grpc.FloatMatrix();
            if (kindCase_ == KindOneofCase.FloatMatrix) {
              subBuilder.MergeFrom(FloatMatrix);
            }
            input.ReadMessage(subBuilder);
            FloatMatrix = subBuilder;
            break;
          }
          case 146: {
            global::Com.Ipcoe1.Grpc.Table subBuilder = new global::Com.Ipcoe1.Grpc.Table();
            if (kindCase_ == KindOneofCase.TableValue) {
              subBuilder.MergeFrom(TableValue);
            }
            input.ReadMessage(subBuilder);
            TableValue = subBuilder;
            break;
          }
          case 152: {
            kind_ = input.ReadEnum();
            kindCase_ = KindOneofCase.NullValue;
            break;
          }
          case 160: {
            kind_ = input.ReadEnum();
            kindCase_ = KindOneofCase.DictionaryValue;
            break;
          }
          case 170: {
            global::Com.Ipcoe1.Grpc.ValueList subBuilder = new global::Com.Ipcoe1.Grpc.ValueList();
            if (kindCase_ == KindOneofCase.ValueList) {
              subBuilder.MergeFrom(ValueList);
            }
            input.ReadMessage(subBuilder);
            ValueList = subBuilder;
            break;
          }
          case 178: {
            global::Com.Ipcoe1.Grpc.Vector3f subBuilder = new global::Com.Ipcoe1.Grpc.Vector3f();
            if (kindCase_ == KindOneofCase.Vector3FValue) {
              subBuilder.MergeFrom(Vector3FValue);
            }
            input.ReadMessage(subBuilder);
            Vector3FValue = subBuilder;
            break;
          }
          case 186: {
            global::Com.Ipcoe1.Grpc.Vector4f subBuilder = new global::Com.Ipcoe1.Grpc.Vector4f();
            if (kindCase_ == KindOneofCase.Vector4FValue) {
              subBuilder.MergeFrom(Vector4FValue);
            }
            input.ReadMessage(subBuilder);
            Vector4FValue = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3f : pb::IMessage<Vector3f> {
    private static readonly pb::MessageParser<Vector3f> _parser = new pb::MessageParser<Vector3f>(() => new Vector3f());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3f> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3f() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3f(Vector3f other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3f Clone() {
      return new Vector3f(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3f);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3f other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3f other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector4f : pb::IMessage<Vector4f> {
    private static readonly pb::MessageParser<Vector4f> _parser = new pb::MessageParser<Vector4f>(() => new Vector4f());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector4f> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4f() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4f(Vector4f other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector4f Clone() {
      return new Vector4f(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector4f);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector4f other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector4f other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValueList : pb::IMessage<ValueList> {
    private static readonly pb::MessageParser<ValueList> _parser = new pb::MessageParser<ValueList>(() => new ValueList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueList(ValueList other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueList Clone() {
      return new ValueList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Ipcoe1.Grpc.Value> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Ipcoe1.Grpc.Value.Parser);
    private readonly pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Value> values_ = new pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Value>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Value> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FloatMatrix : pb::IMessage<FloatMatrix> {
    private static readonly pb::MessageParser<FloatMatrix> _parser = new pb::MessageParser<FloatMatrix>(() => new FloatMatrix());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatMatrix(FloatMatrix other) : this() {
      rows_ = other.rows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatMatrix Clone() {
      return new FloatMatrix(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Ipcoe1.Grpc.FloatList> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Ipcoe1.Grpc.FloatList.Parser);
    private readonly pbc::RepeatedField<global::Com.Ipcoe1.Grpc.FloatList> rows_ = new pbc::RepeatedField<global::Com.Ipcoe1.Grpc.FloatList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Ipcoe1.Grpc.FloatList> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FloatMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FloatMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rows_.Equals(other.rows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rows_.WriteTo(output, _repeated_rows_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rows_.CalculateSize(_repeated_rows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FloatMatrix other) {
      if (other == null) {
        return;
      }
      rows_.Add(other.rows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      headers_ = other.headers_.Clone();
      cols_ = other.cols_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_headers_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> headers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Headers {
      get { return headers_; }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Ipcoe1.Grpc.ValueCollection> _repeated_cols_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Ipcoe1.Grpc.ValueCollection.Parser);
    private readonly pbc::RepeatedField<global::Com.Ipcoe1.Grpc.ValueCollection> cols_ = new pbc::RepeatedField<global::Com.Ipcoe1.Grpc.ValueCollection>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Ipcoe1.Grpc.ValueCollection> Cols {
      get { return cols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      if(!cols_.Equals(other.cols_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      hash ^= cols_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
      cols_.WriteTo(output, _repeated_cols_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      size += cols_.CalculateSize(_repeated_cols_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
      cols_.Add(other.cols_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Uint32List : pb::IMessage<Uint32List> {
    private static readonly pb::MessageParser<Uint32List> _parser = new pb::MessageParser<Uint32List>(() => new Uint32List());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uint32List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32List(Uint32List other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uint32List Clone() {
      return new Uint32List(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_values_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> values_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uint32List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uint32List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uint32List other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FloatList : pb::IMessage<FloatList> {
    private static readonly pb::MessageParser<FloatList> _parser = new pb::MessageParser<FloatList>(() => new FloatList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatList(FloatList other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatList Clone() {
      return new FloatList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_values_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> values_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FloatList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FloatList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FloatList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringList : pb::IMessage<StringList> {
    private static readonly pb::MessageParser<StringList> _parser = new pb::MessageParser<StringList>(() => new StringList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList(StringList other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList Clone() {
      return new StringList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_values_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3fList : pb::IMessage<Vector3fList> {
    private static readonly pb::MessageParser<Vector3fList> _parser = new pb::MessageParser<Vector3fList>(() => new Vector3fList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3fList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3fList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3fList(Vector3fList other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3fList Clone() {
      return new Vector3fList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Ipcoe1.Grpc.Vector3f> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Ipcoe1.Grpc.Vector3f.Parser);
    private readonly pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Vector3f> values_ = new pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Vector3f>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Ipcoe1.Grpc.Vector3f> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3fList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3fList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3fList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValueCollection : pb::IMessage<ValueCollection> {
    private static readonly pb::MessageParser<ValueCollection> _parser = new pb::MessageParser<ValueCollection>(() => new ValueCollection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Ipcoe1.Grpc.Ipcoe1Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueCollection(ValueCollection other) : this() {
      switch (other.KindCase) {
        case KindOneofCase.Uint32List:
          Uint32List = other.Uint32List.Clone();
          break;
        case KindOneofCase.FloatList:
          FloatList = other.FloatList.Clone();
          break;
        case KindOneofCase.StringList:
          StringList = other.StringList.Clone();
          break;
        case KindOneofCase.Vector3FList:
          Vector3FList = other.Vector3FList.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueCollection Clone() {
      return new ValueCollection(this);
    }

    /// <summary>Field number for the "uint32_list" field.</summary>
    public const int Uint32ListFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Uint32List Uint32List {
      get { return kindCase_ == KindOneofCase.Uint32List ? (global::Com.Ipcoe1.Grpc.Uint32List) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Uint32List;
      }
    }

    /// <summary>Field number for the "float_list" field.</summary>
    public const int FloatListFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.FloatList FloatList {
      get { return kindCase_ == KindOneofCase.FloatList ? (global::Com.Ipcoe1.Grpc.FloatList) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.FloatList;
      }
    }

    /// <summary>Field number for the "string_list" field.</summary>
    public const int StringListFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.StringList StringList {
      get { return kindCase_ == KindOneofCase.StringList ? (global::Com.Ipcoe1.Grpc.StringList) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.StringList;
      }
    }

    /// <summary>Field number for the "vector3f_list" field.</summary>
    public const int Vector3FListFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Ipcoe1.Grpc.Vector3fList Vector3FList {
      get { return kindCase_ == KindOneofCase.Vector3FList ? (global::Com.Ipcoe1.Grpc.Vector3fList) kind_ : null; }
      set {
        kind_ = value;
        kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Vector3FList;
      }
    }

    private object kind_;
    /// <summary>Enum of possible cases for the "kind" oneof.</summary>
    public enum KindOneofCase {
      None = 0,
      Uint32List = 1,
      FloatList = 2,
      StringList = 3,
      Vector3FList = 4,
    }
    private KindOneofCase kindCase_ = KindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KindOneofCase KindCase {
      get { return kindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      kindCase_ = KindOneofCase.None;
      kind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uint32List, other.Uint32List)) return false;
      if (!object.Equals(FloatList, other.FloatList)) return false;
      if (!object.Equals(StringList, other.StringList)) return false;
      if (!object.Equals(Vector3FList, other.Vector3FList)) return false;
      if (KindCase != other.KindCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (kindCase_ == KindOneofCase.Uint32List) hash ^= Uint32List.GetHashCode();
      if (kindCase_ == KindOneofCase.FloatList) hash ^= FloatList.GetHashCode();
      if (kindCase_ == KindOneofCase.StringList) hash ^= StringList.GetHashCode();
      if (kindCase_ == KindOneofCase.Vector3FList) hash ^= Vector3FList.GetHashCode();
      hash ^= (int) kindCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (kindCase_ == KindOneofCase.Uint32List) {
        output.WriteRawTag(10);
        output.WriteMessage(Uint32List);
      }
      if (kindCase_ == KindOneofCase.FloatList) {
        output.WriteRawTag(18);
        output.WriteMessage(FloatList);
      }
      if (kindCase_ == KindOneofCase.StringList) {
        output.WriteRawTag(26);
        output.WriteMessage(StringList);
      }
      if (kindCase_ == KindOneofCase.Vector3FList) {
        output.WriteRawTag(34);
        output.WriteMessage(Vector3FList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (kindCase_ == KindOneofCase.Uint32List) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uint32List);
      }
      if (kindCase_ == KindOneofCase.FloatList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatList);
      }
      if (kindCase_ == KindOneofCase.StringList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringList);
      }
      if (kindCase_ == KindOneofCase.Vector3FList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vector3FList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueCollection other) {
      if (other == null) {
        return;
      }
      switch (other.KindCase) {
        case KindOneofCase.Uint32List:
          Uint32List = other.Uint32List;
          break;
        case KindOneofCase.FloatList:
          FloatList = other.FloatList;
          break;
        case KindOneofCase.StringList:
          StringList = other.StringList;
          break;
        case KindOneofCase.Vector3FList:
          Vector3FList = other.Vector3FList;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Com.Ipcoe1.Grpc.Uint32List subBuilder = new global::Com.Ipcoe1.Grpc.Uint32List();
            if (kindCase_ == KindOneofCase.Uint32List) {
              subBuilder.MergeFrom(Uint32List);
            }
            input.ReadMessage(subBuilder);
            Uint32List = subBuilder;
            break;
          }
          case 18: {
            global::Com.Ipcoe1.Grpc.FloatList subBuilder = new global::Com.Ipcoe1.Grpc.FloatList();
            if (kindCase_ == KindOneofCase.FloatList) {
              subBuilder.MergeFrom(FloatList);
            }
            input.ReadMessage(subBuilder);
            FloatList = subBuilder;
            break;
          }
          case 26: {
            global::Com.Ipcoe1.Grpc.StringList subBuilder = new global::Com.Ipcoe1.Grpc.StringList();
            if (kindCase_ == KindOneofCase.StringList) {
              subBuilder.MergeFrom(StringList);
            }
            input.ReadMessage(subBuilder);
            StringList = subBuilder;
            break;
          }
          case 34: {
            global::Com.Ipcoe1.Grpc.Vector3fList subBuilder = new global::Com.Ipcoe1.Grpc.Vector3fList();
            if (kindCase_ == KindOneofCase.Vector3FList) {
              subBuilder.MergeFrom(Vector3FList);
            }
            input.ReadMessage(subBuilder);
            Vector3FList = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
