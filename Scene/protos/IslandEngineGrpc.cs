// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: islandEngine.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Com.Island.Grpc {
  public static class IslandEngineService
  {
    static readonly string __ServiceName = "com.island.grpc.IslandEngineService";

    static readonly Marshaller<global::RpcVoid> __Marshaller_RpcVoid = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcVoid.Parser.ParseFrom);
    static readonly Marshaller<global::Ident> __Marshaller_Ident = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ident.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Island.Grpc.Settings> __Marshaller_Settings = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Island.Grpc.Settings.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Island.Grpc.ItemSetMessage> __Marshaller_ItemSetMessage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Island.Grpc.ItemSetMessage.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Island.Grpc.UserEventMessage> __Marshaller_UserEventMessage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Island.Grpc.UserEventMessage.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Context.Grpc.Cam> __Marshaller_Cam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Context.Grpc.Cam.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Island.Grpc.ItemSetCollection> __Marshaller_ItemSetCollection = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Island.Grpc.ItemSetCollection.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Island.Grpc.BinaryMessage> __Marshaller_BinaryMessage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Island.Grpc.BinaryMessage.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Context.Grpc.GltfContext> __Marshaller_GltfContext = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Context.Grpc.GltfContext.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Context.Grpc.Map> __Marshaller_Map = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Context.Grpc.Map.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Context.Grpc.Scene> __Marshaller_Scene = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Context.Grpc.Scene.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Island.Grpc.CmdItem> __Marshaller_CmdItem = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Island.Grpc.CmdItem.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Context.Grpc.NodeGroupContext> __Marshaller_NodeGroupContext = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Context.Grpc.NodeGroupContext.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Context.Grpc.NodeContext> __Marshaller_NodeContext = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Context.Grpc.NodeContext.Parser.ParseFrom);

    static readonly Method<global::RpcVoid, global::RpcVoid> __Method_ping = new Method<global::RpcVoid, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "ping",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::Com.Island.Grpc.Settings> __Method_getSettings = new Method<global::Ident, global::Com.Island.Grpc.Settings>(
        MethodType.Unary,
        __ServiceName,
        "getSettings",
        __Marshaller_Ident,
        __Marshaller_Settings);

    static readonly Method<global::Ident, global::RpcVoid> __Method_destroyWindow = new Method<global::Ident, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "destroyWindow",
        __Marshaller_Ident,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Island.Grpc.ItemSetMessage, global::RpcVoid> __Method_putItemSetMessage = new Method<global::Com.Island.Grpc.ItemSetMessage, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "putItemSetMessage",
        __Marshaller_ItemSetMessage,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::Com.Island.Grpc.UserEventMessage> __Method_subscribeUserEvent = new Method<global::Ident, global::Com.Island.Grpc.UserEventMessage>(
        MethodType.ServerStreaming,
        __ServiceName,
        "subscribeUserEvent",
        __Marshaller_Ident,
        __Marshaller_UserEventMessage);

    static readonly Method<global::Com.Context.Grpc.Cam, global::RpcVoid> __Method_putCamera = new Method<global::Com.Context.Grpc.Cam, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "putCamera",
        __Marshaller_Cam,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Island.Grpc.UserEventMessage, global::RpcVoid> __Method_sendUserEvent = new Method<global::Com.Island.Grpc.UserEventMessage, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "sendUserEvent",
        __Marshaller_UserEventMessage,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::Com.Island.Grpc.ItemSetMessage> __Method_subscribeItemSetMessage = new Method<global::Ident, global::Com.Island.Grpc.ItemSetMessage>(
        MethodType.ServerStreaming,
        __ServiceName,
        "subscribeItemSetMessage",
        __Marshaller_Ident,
        __Marshaller_ItemSetMessage);

    static readonly Method<global::RpcVoid, global::Com.Island.Grpc.ItemSetCollection> __Method_getAllItemSets = new Method<global::RpcVoid, global::Com.Island.Grpc.ItemSetCollection>(
        MethodType.Unary,
        __ServiceName,
        "getAllItemSets",
        __Marshaller_RpcVoid,
        __Marshaller_ItemSetCollection);

    static readonly Method<global::Ident, global::Com.Island.Grpc.BinaryMessage> __Method_getBinary = new Method<global::Ident, global::Com.Island.Grpc.BinaryMessage>(
        MethodType.Unary,
        __ServiceName,
        "getBinary",
        __Marshaller_Ident,
        __Marshaller_BinaryMessage);

    static readonly Method<global::Com.Context.Grpc.GltfContext, global::RpcVoid> __Method_checkGltfContext = new Method<global::Com.Context.Grpc.GltfContext, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "checkGltfContext",
        __Marshaller_GltfContext,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Island.Grpc.ItemSetCollection, global::RpcVoid> __Method_checkItemSetCollection = new Method<global::Com.Island.Grpc.ItemSetCollection, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "checkItemSetCollection",
        __Marshaller_ItemSetCollection,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Island.Grpc.UserEventMessage, global::RpcVoid> __Method_checkEventMessage = new Method<global::Com.Island.Grpc.UserEventMessage, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "checkEventMessage",
        __Marshaller_UserEventMessage,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Context.Grpc.Map, global::RpcVoid> __Method_checkMapContext = new Method<global::Com.Context.Grpc.Map, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "checkMapContext",
        __Marshaller_Map,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Context.Grpc.Scene, global::RpcVoid> __Method_checkSceneContext = new Method<global::Com.Context.Grpc.Scene, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "checkSceneContext",
        __Marshaller_Scene,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Island.Grpc.CmdItem, global::RpcVoid> __Method_putCmdItem = new Method<global::Com.Island.Grpc.CmdItem, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "putCmdItem",
        __Marshaller_CmdItem,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Context.Grpc.NodeGroupContext, global::RpcVoid> __Method_insertNodeGroup = new Method<global::Com.Context.Grpc.NodeGroupContext, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "insertNodeGroup",
        __Marshaller_NodeGroupContext,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Context.Grpc.NodeContext, global::RpcVoid> __Method_insertNode = new Method<global::Com.Context.Grpc.NodeContext, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "insertNode",
        __Marshaller_NodeContext,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Context.Grpc.NodeContext, global::RpcVoid> __Method_updateNode = new Method<global::Com.Context.Grpc.NodeContext, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "updateNode",
        __Marshaller_NodeContext,
        __Marshaller_RpcVoid);

    static readonly Method<global::RpcVoid, global::RpcVoid> __Method_clearAll = new Method<global::RpcVoid, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "clearAll",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IslandEngineService</summary>
    public abstract class IslandEngineServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> ping(global::RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  window
      ///  rpc getWindow(Ident) returns (WindowOptions);
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Com.Island.Grpc.Settings> getSettings(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> destroyWindow(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  private
      ///  rpc putNodeMessage(NodeMessage) returns (RpcVoid);
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> putItemSetMessage(global::Com.Island.Grpc.ItemSetMessage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task subscribeUserEvent(global::Ident request, IServerStreamWriter<global::Com.Island.Grpc.UserEventMessage> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  cam only changes
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> putCamera(global::Com.Context.Grpc.Cam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  rpc putNodes(NodeMessage) returns (RpcVoid); // nodes only changes
      ///  public
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> sendUserEvent(global::Com.Island.Grpc.UserEventMessage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  rpc subscribeNodeMessage(Ident) returns (stream NodeMessage);
      ///  rpc subscribeNodeMessage2(Ident) returns (stream NodeMessage2);
      /// </summary>
      public virtual global::System.Threading.Tasks.Task subscribeItemSetMessage(global::Ident request, IServerStreamWriter<global::Com.Island.Grpc.ItemSetMessage> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.Island.Grpc.ItemSetCollection> getAllItemSets(global::RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  rpc getAllNodeMessages(RpcVoid) returns (NodeMessageList);
      ///  rpc getNodeMessage(Ident) returns (NodeMessage);
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Com.Island.Grpc.BinaryMessage> getBinary(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> checkGltfContext(global::Com.Context.Grpc.GltfContext request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> checkItemSetCollection(global::Com.Island.Grpc.ItemSetCollection request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> checkEventMessage(global::Com.Island.Grpc.UserEventMessage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> checkMapContext(global::Com.Context.Grpc.Map request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> checkSceneContext(global::Com.Context.Grpc.Scene request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  DEBUG only
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> putCmdItem(global::Com.Island.Grpc.CmdItem request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> insertNodeGroup(global::Com.Context.Grpc.NodeGroupContext request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> insertNode(global::Com.Context.Grpc.NodeContext request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> updateNode(global::Com.Context.Grpc.NodeContext request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> clearAll(global::RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IslandEngineService</summary>
    public class IslandEngineServiceClient : ClientBase<IslandEngineServiceClient>
    {
      /// <summary>Creates a new client for IslandEngineService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IslandEngineServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IslandEngineService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IslandEngineServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IslandEngineServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IslandEngineServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RpcVoid ping(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ping(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid ping(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ping, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> pingAsync(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return pingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> pingAsync(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ping, null, options, request);
      }
      /// <summary>
      ///  window
      ///  rpc getWindow(Ident) returns (WindowOptions);
      /// </summary>
      public virtual global::Com.Island.Grpc.Settings getSettings(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getSettings(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  window
      ///  rpc getWindow(Ident) returns (WindowOptions);
      /// </summary>
      public virtual global::Com.Island.Grpc.Settings getSettings(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getSettings, null, options, request);
      }
      /// <summary>
      ///  window
      ///  rpc getWindow(Ident) returns (WindowOptions);
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Island.Grpc.Settings> getSettingsAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getSettingsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  window
      ///  rpc getWindow(Ident) returns (WindowOptions);
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Island.Grpc.Settings> getSettingsAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getSettings, null, options, request);
      }
      public virtual global::RpcVoid destroyWindow(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return destroyWindow(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid destroyWindow(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_destroyWindow, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> destroyWindowAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return destroyWindowAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> destroyWindowAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_destroyWindow, null, options, request);
      }
      /// <summary>
      ///  private
      ///  rpc putNodeMessage(NodeMessage) returns (RpcVoid);
      /// </summary>
      public virtual global::RpcVoid putItemSetMessage(global::Com.Island.Grpc.ItemSetMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putItemSetMessage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  private
      ///  rpc putNodeMessage(NodeMessage) returns (RpcVoid);
      /// </summary>
      public virtual global::RpcVoid putItemSetMessage(global::Com.Island.Grpc.ItemSetMessage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_putItemSetMessage, null, options, request);
      }
      /// <summary>
      ///  private
      ///  rpc putNodeMessage(NodeMessage) returns (RpcVoid);
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> putItemSetMessageAsync(global::Com.Island.Grpc.ItemSetMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putItemSetMessageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  private
      ///  rpc putNodeMessage(NodeMessage) returns (RpcVoid);
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> putItemSetMessageAsync(global::Com.Island.Grpc.ItemSetMessage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_putItemSetMessage, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::Com.Island.Grpc.UserEventMessage> subscribeUserEvent(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return subscribeUserEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Com.Island.Grpc.UserEventMessage> subscribeUserEvent(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeUserEvent, null, options, request);
      }
      /// <summary>
      ///  cam only changes
      /// </summary>
      public virtual global::RpcVoid putCamera(global::Com.Context.Grpc.Cam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putCamera(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  cam only changes
      /// </summary>
      public virtual global::RpcVoid putCamera(global::Com.Context.Grpc.Cam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_putCamera, null, options, request);
      }
      /// <summary>
      ///  cam only changes
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> putCameraAsync(global::Com.Context.Grpc.Cam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putCameraAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  cam only changes
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> putCameraAsync(global::Com.Context.Grpc.Cam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_putCamera, null, options, request);
      }
      /// <summary>
      ///  rpc putNodes(NodeMessage) returns (RpcVoid); // nodes only changes
      ///  public
      /// </summary>
      public virtual global::RpcVoid sendUserEvent(global::Com.Island.Grpc.UserEventMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return sendUserEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  rpc putNodes(NodeMessage) returns (RpcVoid); // nodes only changes
      ///  public
      /// </summary>
      public virtual global::RpcVoid sendUserEvent(global::Com.Island.Grpc.UserEventMessage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendUserEvent, null, options, request);
      }
      /// <summary>
      ///  rpc putNodes(NodeMessage) returns (RpcVoid); // nodes only changes
      ///  public
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> sendUserEventAsync(global::Com.Island.Grpc.UserEventMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return sendUserEventAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  rpc putNodes(NodeMessage) returns (RpcVoid); // nodes only changes
      ///  public
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> sendUserEventAsync(global::Com.Island.Grpc.UserEventMessage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendUserEvent, null, options, request);
      }
      /// <summary>
      ///  rpc subscribeNodeMessage(Ident) returns (stream NodeMessage);
      ///  rpc subscribeNodeMessage2(Ident) returns (stream NodeMessage2);
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Com.Island.Grpc.ItemSetMessage> subscribeItemSetMessage(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return subscribeItemSetMessage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  rpc subscribeNodeMessage(Ident) returns (stream NodeMessage);
      ///  rpc subscribeNodeMessage2(Ident) returns (stream NodeMessage2);
      /// </summary>
      public virtual AsyncServerStreamingCall<global::Com.Island.Grpc.ItemSetMessage> subscribeItemSetMessage(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeItemSetMessage, null, options, request);
      }
      public virtual global::Com.Island.Grpc.ItemSetCollection getAllItemSets(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAllItemSets(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Island.Grpc.ItemSetCollection getAllItemSets(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getAllItemSets, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Com.Island.Grpc.ItemSetCollection> getAllItemSetsAsync(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getAllItemSetsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Com.Island.Grpc.ItemSetCollection> getAllItemSetsAsync(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getAllItemSets, null, options, request);
      }
      /// <summary>
      ///  rpc getAllNodeMessages(RpcVoid) returns (NodeMessageList);
      ///  rpc getNodeMessage(Ident) returns (NodeMessage);
      /// </summary>
      public virtual global::Com.Island.Grpc.BinaryMessage getBinary(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getBinary(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  rpc getAllNodeMessages(RpcVoid) returns (NodeMessageList);
      ///  rpc getNodeMessage(Ident) returns (NodeMessage);
      /// </summary>
      public virtual global::Com.Island.Grpc.BinaryMessage getBinary(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getBinary, null, options, request);
      }
      /// <summary>
      ///  rpc getAllNodeMessages(RpcVoid) returns (NodeMessageList);
      ///  rpc getNodeMessage(Ident) returns (NodeMessage);
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Island.Grpc.BinaryMessage> getBinaryAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getBinaryAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  rpc getAllNodeMessages(RpcVoid) returns (NodeMessageList);
      ///  rpc getNodeMessage(Ident) returns (NodeMessage);
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Island.Grpc.BinaryMessage> getBinaryAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getBinary, null, options, request);
      }
      public virtual global::RpcVoid checkGltfContext(global::Com.Context.Grpc.GltfContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkGltfContext(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid checkGltfContext(global::Com.Context.Grpc.GltfContext request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkGltfContext, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkGltfContextAsync(global::Com.Context.Grpc.GltfContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkGltfContextAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkGltfContextAsync(global::Com.Context.Grpc.GltfContext request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkGltfContext, null, options, request);
      }
      public virtual global::RpcVoid checkItemSetCollection(global::Com.Island.Grpc.ItemSetCollection request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkItemSetCollection(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid checkItemSetCollection(global::Com.Island.Grpc.ItemSetCollection request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkItemSetCollection, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkItemSetCollectionAsync(global::Com.Island.Grpc.ItemSetCollection request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkItemSetCollectionAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkItemSetCollectionAsync(global::Com.Island.Grpc.ItemSetCollection request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkItemSetCollection, null, options, request);
      }
      public virtual global::RpcVoid checkEventMessage(global::Com.Island.Grpc.UserEventMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkEventMessage(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid checkEventMessage(global::Com.Island.Grpc.UserEventMessage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkEventMessage, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkEventMessageAsync(global::Com.Island.Grpc.UserEventMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkEventMessageAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkEventMessageAsync(global::Com.Island.Grpc.UserEventMessage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkEventMessage, null, options, request);
      }
      public virtual global::RpcVoid checkMapContext(global::Com.Context.Grpc.Map request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkMapContext(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid checkMapContext(global::Com.Context.Grpc.Map request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkMapContext, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkMapContextAsync(global::Com.Context.Grpc.Map request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkMapContextAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkMapContextAsync(global::Com.Context.Grpc.Map request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkMapContext, null, options, request);
      }
      public virtual global::RpcVoid checkSceneContext(global::Com.Context.Grpc.Scene request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkSceneContext(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid checkSceneContext(global::Com.Context.Grpc.Scene request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkSceneContext, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkSceneContextAsync(global::Com.Context.Grpc.Scene request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return checkSceneContextAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> checkSceneContextAsync(global::Com.Context.Grpc.Scene request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkSceneContext, null, options, request);
      }
      /// <summary>
      ///  DEBUG only
      /// </summary>
      public virtual global::RpcVoid putCmdItem(global::Com.Island.Grpc.CmdItem request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putCmdItem(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  DEBUG only
      /// </summary>
      public virtual global::RpcVoid putCmdItem(global::Com.Island.Grpc.CmdItem request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_putCmdItem, null, options, request);
      }
      /// <summary>
      ///  DEBUG only
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> putCmdItemAsync(global::Com.Island.Grpc.CmdItem request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return putCmdItemAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  DEBUG only
      /// </summary>
      public virtual AsyncUnaryCall<global::RpcVoid> putCmdItemAsync(global::Com.Island.Grpc.CmdItem request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_putCmdItem, null, options, request);
      }
      public virtual global::RpcVoid insertNodeGroup(global::Com.Context.Grpc.NodeGroupContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertNodeGroup(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid insertNodeGroup(global::Com.Context.Grpc.NodeGroupContext request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_insertNodeGroup, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> insertNodeGroupAsync(global::Com.Context.Grpc.NodeGroupContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertNodeGroupAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> insertNodeGroupAsync(global::Com.Context.Grpc.NodeGroupContext request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_insertNodeGroup, null, options, request);
      }
      public virtual global::RpcVoid insertNode(global::Com.Context.Grpc.NodeContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertNode(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid insertNode(global::Com.Context.Grpc.NodeContext request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_insertNode, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> insertNodeAsync(global::Com.Context.Grpc.NodeContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return insertNodeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> insertNodeAsync(global::Com.Context.Grpc.NodeContext request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_insertNode, null, options, request);
      }
      public virtual global::RpcVoid updateNode(global::Com.Context.Grpc.NodeContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return updateNode(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid updateNode(global::Com.Context.Grpc.NodeContext request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateNode, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> updateNodeAsync(global::Com.Context.Grpc.NodeContext request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return updateNodeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> updateNodeAsync(global::Com.Context.Grpc.NodeContext request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateNode, null, options, request);
      }
      public virtual global::RpcVoid clearAll(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return clearAll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid clearAll(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_clearAll, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> clearAllAsync(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return clearAllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> clearAllAsync(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_clearAll, null, options, request);
      }
      protected override IslandEngineServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IslandEngineServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(IslandEngineServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ping, serviceImpl.ping)
          .AddMethod(__Method_getSettings, serviceImpl.getSettings)
          .AddMethod(__Method_destroyWindow, serviceImpl.destroyWindow)
          .AddMethod(__Method_putItemSetMessage, serviceImpl.putItemSetMessage)
          .AddMethod(__Method_subscribeUserEvent, serviceImpl.subscribeUserEvent)
          .AddMethod(__Method_putCamera, serviceImpl.putCamera)
          .AddMethod(__Method_sendUserEvent, serviceImpl.sendUserEvent)
          .AddMethod(__Method_subscribeItemSetMessage, serviceImpl.subscribeItemSetMessage)
          .AddMethod(__Method_getAllItemSets, serviceImpl.getAllItemSets)
          .AddMethod(__Method_getBinary, serviceImpl.getBinary)
          .AddMethod(__Method_checkGltfContext, serviceImpl.checkGltfContext)
          .AddMethod(__Method_checkItemSetCollection, serviceImpl.checkItemSetCollection)
          .AddMethod(__Method_checkEventMessage, serviceImpl.checkEventMessage)
          .AddMethod(__Method_checkMapContext, serviceImpl.checkMapContext)
          .AddMethod(__Method_checkSceneContext, serviceImpl.checkSceneContext)
          .AddMethod(__Method_putCmdItem, serviceImpl.putCmdItem)
          .AddMethod(__Method_insertNodeGroup, serviceImpl.insertNodeGroup)
          .AddMethod(__Method_insertNode, serviceImpl.insertNode)
          .AddMethod(__Method_updateNode, serviceImpl.updateNode)
          .AddMethod(__Method_clearAll, serviceImpl.clearAll).Build();
    }

  }
  public static class ChiosEngineService
  {
    static readonly string __ServiceName = "com.island.grpc.ChiosEngineService";

    static readonly Marshaller<global::RpcVoid> __Marshaller_RpcVoid = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcVoid.Parser.ParseFrom);

    static readonly Method<global::RpcVoid, global::RpcVoid> __Method_ping = new Method<global::RpcVoid, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "ping",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::RpcVoid, global::RpcVoid> __Method_clear = new Method<global::RpcVoid, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "clear",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Island.Grpc.IslandEngineReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ChiosEngineService</summary>
    public abstract class ChiosEngineServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> ping(global::RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> clear(global::RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChiosEngineService</summary>
    public class ChiosEngineServiceClient : ClientBase<ChiosEngineServiceClient>
    {
      /// <summary>Creates a new client for ChiosEngineService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChiosEngineServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChiosEngineService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChiosEngineServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChiosEngineServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChiosEngineServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RpcVoid ping(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ping(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid ping(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ping, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> pingAsync(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return pingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> pingAsync(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ping, null, options, request);
      }
      public virtual global::RpcVoid clear(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return clear(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid clear(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_clear, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> clearAsync(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return clearAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> clearAsync(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_clear, null, options, request);
      }
      protected override ChiosEngineServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChiosEngineServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ChiosEngineServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ping, serviceImpl.ping)
          .AddMethod(__Method_clear, serviceImpl.clear).Build();
    }

  }
}
#endregion
