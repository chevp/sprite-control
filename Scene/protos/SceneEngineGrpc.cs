// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sceneEngine.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Com.Scene.Grpc {
  public static class SceneEngineService
  {
    static readonly string __ServiceName = "com.scene.grpc.SceneEngineService";

    static readonly Marshaller<global::RpcVoid> __Marshaller_RpcVoid = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RpcVoid.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Scene.Grpc.InitScene> __Marshaller_InitScene = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Scene.Grpc.InitScene.Parser.ParseFrom);
    static readonly Marshaller<global::Ident> __Marshaller_Ident = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ident.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Scene.Grpc.SystemModel> __Marshaller_SystemModel = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Scene.Grpc.SystemModel.Parser.ParseFrom);
    static readonly Marshaller<global::Com.Scene.Grpc.ViewPortElmnts> __Marshaller_ViewPortElmnts = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Scene.Grpc.ViewPortElmnts.Parser.ParseFrom);

    static readonly Method<global::RpcVoid, global::RpcVoid> __Method_ping = new Method<global::RpcVoid, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "ping",
        __Marshaller_RpcVoid,
        __Marshaller_RpcVoid);

    static readonly Method<global::Com.Scene.Grpc.InitScene, global::RpcVoid> __Method_init = new Method<global::Com.Scene.Grpc.InitScene, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "init",
        __Marshaller_InitScene,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::RpcVoid> __Method_remove = new Method<global::Ident, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "remove",
        __Marshaller_Ident,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::RpcVoid> __Method_add = new Method<global::Ident, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "add",
        __Marshaller_Ident,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::RpcVoid> __Method_start = new Method<global::Ident, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "start",
        __Marshaller_Ident,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::RpcVoid> __Method_restart = new Method<global::Ident, global::RpcVoid>(
        MethodType.Unary,
        __ServiceName,
        "restart",
        __Marshaller_Ident,
        __Marshaller_RpcVoid);

    static readonly Method<global::Ident, global::Com.Scene.Grpc.SystemModel> __Method_getSystemModel = new Method<global::Ident, global::Com.Scene.Grpc.SystemModel>(
        MethodType.Unary,
        __ServiceName,
        "getSystemModel",
        __Marshaller_Ident,
        __Marshaller_SystemModel);

    static readonly Method<global::Ident, global::Com.Scene.Grpc.ViewPortElmnts> __Method_subscribeViewPort = new Method<global::Ident, global::Com.Scene.Grpc.ViewPortElmnts>(
        MethodType.ServerStreaming,
        __ServiceName,
        "subscribeViewPort",
        __Marshaller_Ident,
        __Marshaller_ViewPortElmnts);

    static readonly Method<global::Ident, global::Com.Scene.Grpc.ViewPortElmnts> __Method_getViewPort = new Method<global::Ident, global::Com.Scene.Grpc.ViewPortElmnts>(
        MethodType.Unary,
        __ServiceName,
        "getViewPort",
        __Marshaller_Ident,
        __Marshaller_ViewPortElmnts);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Scene.Grpc.SceneEngineReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SceneEngineService</summary>
    public abstract class SceneEngineServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> ping(global::RpcVoid request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> init(global::Com.Scene.Grpc.InitScene request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> remove(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> add(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> start(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RpcVoid> restart(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  rpc getAllChilds(RpcVoid) returns (ChildSystemModelList);
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Com.Scene.Grpc.SystemModel> getSystemModel(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task subscribeViewPort(global::Ident request, IServerStreamWriter<global::Com.Scene.Grpc.ViewPortElmnts> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///  user state machine
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Com.Scene.Grpc.ViewPortElmnts> getViewPort(global::Ident request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SceneEngineService</summary>
    public class SceneEngineServiceClient : ClientBase<SceneEngineServiceClient>
    {
      /// <summary>Creates a new client for SceneEngineService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SceneEngineServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SceneEngineService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SceneEngineServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SceneEngineServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SceneEngineServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RpcVoid ping(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ping(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid ping(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ping, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> pingAsync(global::RpcVoid request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return pingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> pingAsync(global::RpcVoid request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ping, null, options, request);
      }
      public virtual global::RpcVoid init(global::Com.Scene.Grpc.InitScene request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return init(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid init(global::Com.Scene.Grpc.InitScene request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_init, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> initAsync(global::Com.Scene.Grpc.InitScene request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return initAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> initAsync(global::Com.Scene.Grpc.InitScene request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_init, null, options, request);
      }
      public virtual global::RpcVoid remove(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return remove(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid remove(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_remove, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> removeAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return removeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> removeAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_remove, null, options, request);
      }
      public virtual global::RpcVoid add(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return add(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid add(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_add, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> addAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return addAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> addAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_add, null, options, request);
      }
      public virtual global::RpcVoid start(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return start(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid start(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_start, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> startAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return startAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> startAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_start, null, options, request);
      }
      public virtual global::RpcVoid restart(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return restart(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RpcVoid restart(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_restart, null, options, request);
      }
      public virtual AsyncUnaryCall<global::RpcVoid> restartAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return restartAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::RpcVoid> restartAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_restart, null, options, request);
      }
      /// <summary>
      ///  rpc getAllChilds(RpcVoid) returns (ChildSystemModelList);
      /// </summary>
      public virtual global::Com.Scene.Grpc.SystemModel getSystemModel(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getSystemModel(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  rpc getAllChilds(RpcVoid) returns (ChildSystemModelList);
      /// </summary>
      public virtual global::Com.Scene.Grpc.SystemModel getSystemModel(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getSystemModel, null, options, request);
      }
      /// <summary>
      ///  rpc getAllChilds(RpcVoid) returns (ChildSystemModelList);
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Scene.Grpc.SystemModel> getSystemModelAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getSystemModelAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  rpc getAllChilds(RpcVoid) returns (ChildSystemModelList);
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Scene.Grpc.SystemModel> getSystemModelAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getSystemModel, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::Com.Scene.Grpc.ViewPortElmnts> subscribeViewPort(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return subscribeViewPort(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::Com.Scene.Grpc.ViewPortElmnts> subscribeViewPort(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeViewPort, null, options, request);
      }
      /// <summary>
      ///  user state machine
      /// </summary>
      public virtual global::Com.Scene.Grpc.ViewPortElmnts getViewPort(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getViewPort(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  user state machine
      /// </summary>
      public virtual global::Com.Scene.Grpc.ViewPortElmnts getViewPort(global::Ident request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getViewPort, null, options, request);
      }
      /// <summary>
      ///  user state machine
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Scene.Grpc.ViewPortElmnts> getViewPortAsync(global::Ident request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getViewPortAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  user state machine
      /// </summary>
      public virtual AsyncUnaryCall<global::Com.Scene.Grpc.ViewPortElmnts> getViewPortAsync(global::Ident request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getViewPort, null, options, request);
      }
      protected override SceneEngineServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SceneEngineServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SceneEngineServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ping, serviceImpl.ping)
          .AddMethod(__Method_init, serviceImpl.init)
          .AddMethod(__Method_remove, serviceImpl.remove)
          .AddMethod(__Method_add, serviceImpl.add)
          .AddMethod(__Method_start, serviceImpl.start)
          .AddMethod(__Method_restart, serviceImpl.restart)
          .AddMethod(__Method_getSystemModel, serviceImpl.getSystemModel)
          .AddMethod(__Method_subscribeViewPort, serviceImpl.subscribeViewPort)
          .AddMethod(__Method_getViewPort, serviceImpl.getViewPort).Build();
    }

  }
}
#endregion
