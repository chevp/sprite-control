// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contextEngine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Context.Grpc {

  /// <summary>Holder for reflection information generated from contextEngine.proto</summary>
  public static partial class ContextEngineReflection {

    #region Descriptor
    /// <summary>File descriptor for contextEngine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContextEngineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNjb250ZXh0RW5naW5lLnByb3RvEhBjb20uY29udGV4dC5ncnBjGgxjb21t",
            "b24ucHJvdG8aEGdsdGZFbmdpbmUucHJvdG8i7wMKCVNpbmdsZVJzYxIoCgRn",
            "bHRmGAEgASgLMhguY29tLmdsdGYuZ3JwYy5HbHRmTW9kZWxIABImCgRub2Rl",
            "GAIgASgLMhYuY29tLmNvbnRleHQuZ3JwYy5Ob2RlSAASMAoJbm9kZUdyb3Vw",
            "GAMgASgLMhsuY29tLmNvbnRleHQuZ3JwYy5Ob2RlR3JvdXBIABIkCgNtYXAY",
            "BCABKAsyFS5jb20uY29udGV4dC5ncnBjLk1hcEgAEigKBXNjZW5lGAUgASgL",
            "MhcuY29tLmNvbnRleHQuZ3JwYy5TY2VuZUgAEioKBnNjcmlwdBgGIAEoCzIY",
            "LmNvbS5jb250ZXh0LmdycGMuU2NyaXB0SAASDwoFYnl0ZXMYByABKAxIABIo",
            "CgVpbWFnZRgIIAEoCzIXLmNvbS5jb250ZXh0LmdycGMuSW1hZ2VIABIKCgJp",
            "ZBgKIAEoBxIMCgR1dWlkGAsgASgJEgwKBG5hbWUYDCABKAkSDQoFbV9rZXkY",
            "DiABKAkSNwoGcGFyYW1zGA8gAygLMicuY29tLmNvbnRleHQuZ3JwYy5TaW5n",
            "bGVSc2MuUGFyYW1zRW50cnkaLQoLUGFyYW1zRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4AUIICgZtX3R5cGUi+QIKClNpbmdsZVJzYzIS",
            "CgoCaWQYASABKAcSDAoEdXVpZBgCIAEoCRIMCgRuYW1lGAMgASgJEigKBGds",
            "dGYYBCABKAsyGC5jb20uZ2x0Zi5ncnBjLkdsdGZNb2RlbEgAEiYKBG5vZGUY",
            "BSABKAsyFi5jb20uY29udGV4dC5ncnBjLk5vZGVIABIwCglub2RlR3JvdXAY",
            "BiABKAsyGy5jb20uY29udGV4dC5ncnBjLk5vZGVHcm91cEgAEiQKA21hcBgH",
            "IAEoCzIVLmNvbS5jb250ZXh0LmdycGMuTWFwSAASKAoFc2NlbmUYCCABKAsy",
            "Fy5jb20uY29udGV4dC5ncnBjLlNjZW5lSAASKgoGc2NyaXB0GAkgASgLMhgu",
            "Y29tLmNvbnRleHQuZ3JwYy5TY3JpcHRIABIPCgVieXRlcxgKIAEoDEgAEigK",
            "BWltYWdlGAsgASgLMhcuY29tLmNvbnRleHQuZ3JwYy5JbWFnZUgAQggKBm1f",
            "dHlwZSKFBQoNU2luZ2xlQ29udGV4dBIKCgJpZBgBIAEoBxI7CgZwYXJhbXMY",
            "AiADKAsyKy5jb20uY29udGV4dC5ncnBjLlNpbmdsZUNvbnRleHQuUGFyYW1z",
            "RW50cnkSKAoEZ2x0ZhgDIAEoCzIYLmNvbS5nbHRmLmdycGMuR2x0Zk1vZGVs",
            "SAASJgoEbm9kZRgEIAEoCzIWLmNvbS5jb250ZXh0LmdycGMuTm9kZUgAEjAK",
            "CW5vZGVHcm91cBgFIAEoCzIbLmNvbS5jb250ZXh0LmdycGMuTm9kZUdyb3Vw",
            "SAASJAoDbWFwGAYgASgLMhUuY29tLmNvbnRleHQuZ3JwYy5NYXBIABIoCgVz",
            "Y2VuZRgHIAEoCzIXLmNvbS5jb250ZXh0LmdycGMuU2NlbmVIABIqCgZzY3Jp",
            "cHQYCCABKAsyGC5jb20uY29udGV4dC5ncnBjLlNjcmlwdEgAEg8KBWJ5dGVz",
            "GAkgASgMSAASKAoFaW1hZ2UYCiABKAsyFy5jb20uY29udGV4dC5ncnBjLklt",
            "YWdlSAASQAoRbGluZWFyVHJhbnNsYXRpb24YCyABKAsyIy5jb20uY29udGV4",
            "dC5ncnBjLkxpbmVhclRyYW5zbGF0aW9uSAASRgoUbm9uTGluZWFyVHJhbnNs",
            "YXRpb24YDCABKAsyJi5jb20uY29udGV4dC5ncnBjLk5vbkxpbmVhclRyYW5z",
            "bGF0aW9uSAASLQoEZmlsZRgOIAEoCzIdLmNvbS5jb250ZXh0LmdycGMuRmls",
            "ZUNvbnRleHRIABotCgtQYXJhbXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAk6AjgBQggKBm1fdHlwZSIxCgNNYXASKgoGZWxtbnRzGAEgAygL",
            "MhouY29tLmNvbnRleHQuZ3JwYy5NYXBFbG1udCIpCghNYXBFbG1udBIPCgdz",
            "Y2VuZUlkGAEgASgHEgwKBGFyZWEYAiADKAIiNQoFU2NlbmUSLAoGZWxtbnRz",
            "GAEgAygLMhwuY29tLmNvbnRleHQuZ3JwYy5TY2VuZUVsbW50IosFCgpTY2Vu",
            "ZUVsbW50EigKBGdsdGYYASABKAsyGC5jb20uZ2x0Zi5ncnBjLkdsdGZNb2Rl",
            "bEgAEi0KBG5vZGUYAiABKAsyHS5jb20uY29udGV4dC5ncnBjLk5vZGVDb250",
            "ZXh0SAASNwoJbm9kZUdyb3VwGAMgASgLMiIuY29tLmNvbnRleHQuZ3JwYy5O",
            "b2RlR3JvdXBDb250ZXh0SAASJAoDY2FtGAYgASgLMhUuY29tLmNvbnRleHQu",
            "Z3JwYy5DYW1IABImCgR0ZXh0GAcgASgLMhYuY29tLmNvbnRleHQuZ3JwYy5U",
            "ZXh0SAASJgoEbGluZRgIIAEoCzIWLmNvbS5jb250ZXh0LmdycGMuTGluZUgA",
            "EigKBXBsYW5lGAkgASgLMhcuY29tLmNvbnRleHQuZ3JwYy5QbGFuZUgAEioK",
            "BmJ1dHRvbhgKIAEoCzIYLmNvbS5jb250ZXh0LmdycGMuQnV0dG9uSAASNAoL",
            "ZW52aXJvbm1lbnQYCyABKAsyHS5jb20uY29udGV4dC5ncnBjLkVudmlyb25t",
            "ZW50SAASMQoGc2NyaXB0GAwgASgLMh8uY29tLmNvbnRleHQuZ3JwYy5TY3Jp",
            "cHRDb250ZXh0SAASQAoRbGluZWFyVHJhbnNsYXRpb24YDiABKAsyIy5jb20u",
            "Y29udGV4dC5ncnBjLkxpbmVhclRyYW5zbGF0aW9uSAASRgoUbm9uTGluZWFy",
            "VHJhbnNsYXRpb24YDyABKAsyJi5jb20uY29udGV4dC5ncnBjLk5vbkxpbmVh",
            "clRyYW5zbGF0aW9uSAASHQoIcGFyYW1NYXAYECABKAsyCS5QYXJhbU1hcEgA",
            "Qg0KC3BhcmFtX29uZW9mIisKC0ZpbGVDb250ZXh0EgoKAmlkGAEgASgHEhAK",
            "CGZpbGVwYXRoGAIgASgJIjEKD0ZpbGVOb2RlQ29udGV4dBIOCgZmaWxlSWQY",
            "ASABKAcSDgoGbm9kZUlkGAIgASgHIl4KB05vZGVEdG8SCgoCaWQYASABKAcS",
            "EwoLbm9kZUdyb3VwSWQYAiABKAcSDgoGZ2x0ZklkGAMgASgHEgoKAnB4GAQg",
            "ASgCEgoKAnB5GAUgASgCEgoKAnB6GAYgASgCIr4CCgpOb2RlRW50aXR5EgoK",
            "AmlkGAEgASgHEjgKBnBhcmFtcxgCIAMoCzIoLmNvbS5jb250ZXh0LmdycGMu",
            "Tm9kZUVudGl0eS5QYXJhbXNFbnRyeRITCgtub2RlR3JvdXBJZBgDIAEoBxIO",
            "CgZnbHRmSWQYBCABKAcSCgoCcHgYBSABKAISCgoCcHkYBiABKAISCgoCcHoY",
            "ByABKAISCgoCcngYCCABKAISCgoCcnkYCSABKAISCgoCcnoYCiABKAISCgoC",
            "cncYCyABKAISEQoJYW5pbWF0aW9uGAwgASgCEi8KB3F1YWxpdHkYDiABKA4y",
            "Hi5jb20uY29udGV4dC5ncnBjLlF1YWxpdHlMZXZlbBotCgtQYXJhbXNFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIqkBCgtOb2RlQ29u",
            "dGV4dBIKCgJpZBgBIAEoBxI5CgZwYXJhbXMYAiADKAsyKS5jb20uY29udGV4",
            "dC5ncnBjLk5vZGVDb250ZXh0LlBhcmFtc0VudHJ5EiQKBG5vZGUYAyABKAsy",
            "Fi5jb20uY29udGV4dC5ncnBjLk5vZGUaLQoLUGFyYW1zRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLDAQoETm9kZRITCgtub2RlR3Jv",
            "dXBJZBgBIAEoBxIOCgZnbHRmSWQYAiABKAcSCgoCcHgYAyABKAISCgoCcHkY",
            "BCABKAISCgoCcHoYBSABKAISCgoCcngYBiABKAISCgoCcnkYByABKAISCgoC",
            "cnoYCCABKAISCgoCcncYCSABKAISEQoJYW5pbWF0aW9uGAogASgCEi8KB3F1",
            "YWxpdHkYCyABKA4yHi5jb20uY29udGV4dC5ncnBjLlF1YWxpdHlMZXZlbCJH",
            "CgRUZXh0EgoKAmlkGAEgASgHEg0KBXZhbHVlGAIgASgJEhAKCGZvbnRTaXpl",
            "GAMgASgFEhIKCmZvbnRGYW1pbHkYBCABKAkiBgoETGluZSIHCgVQbGFuZSII",
            "CgZCdXR0b24iDQoLRW52aXJvbm1lbnQilQEKDUJpbmFyeUNvbnRleHQSCgoC",
            "aWQYASABKAcSOwoGcGFyYW1zGAIgAygLMisuY29tLmNvbnRleHQuZ3JwYy5C",
            "aW5hcnlDb250ZXh0LlBhcmFtc0VudHJ5EgwKBGRhdGEYAyABKAwaLQoLUGFy",
            "YW1zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKtAQoM",
            "SW1hZ2VDb250ZXh0EgoKAmlkGAEgASgHEjoKBnBhcmFtcxgCIAMoCzIqLmNv",
            "bS5jb250ZXh0LmdycGMuSW1hZ2VDb250ZXh0LlBhcmFtc0VudHJ5EiYKBWlt",
            "YWdlGAMgASgLMhcuY29tLmNvbnRleHQuZ3JwYy5JbWFnZRotCgtQYXJhbXNF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIigKBUltYWdl",
            "EhAKCG1pbWVUeXBlGAEgASgJEg0KBWJ5dGVzGAIgASgMIr0BChBOb2RlR3Jv",
            "dXBDb250ZXh0EgoKAmlkGAEgASgHEj4KBnBhcmFtcxgCIAMoCzIuLmNvbS5j",
            "b250ZXh0LmdycGMuTm9kZUdyb3VwQ29udGV4dC5QYXJhbXNFbnRyeRIuCglu",
            "b2RlR3JvdXAYAyABKAsyGy5jb20uY29udGV4dC5ncnBjLk5vZGVHcm91cBot",
            "CgtQYXJhbXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgB",
            "ItUBCglOb2RlR3JvdXASDgoGZ2x0ZklkGAEgASgHEhAKCG5vZGVOYW1lGAIg",
            "ASgJEiwKBnNoYWRlchgDIAEoDjIcLmNvbS5jb250ZXh0LmdycGMuU2hhZGVy",
            "VHlwZRIPCgdnbHRmSWRzGAQgAygHEhgKEGRlZmF1bHRHbHRmSW5kZXgYBSAB",
            "KA0SHwoXaGlnaFJlc29sdXRpb25HbHRmSW5kZXgYBiABKA0SFgoOdmlld0lt",
            "cG9ydGFuY2UYByABKA0SFAoMZ2x0ZkZpbGVwYXRoGAggASgJItUCCg9Ob2Rl",
            "R3JvdXBFbnRpdHkSCgoCaWQYASABKAcSPQoGcGFyYW1zGAIgAygLMi0uY29t",
            "LmNvbnRleHQuZ3JwYy5Ob2RlR3JvdXBFbnRpdHkuUGFyYW1zRW50cnkSDgoG",
            "Z2x0ZklkGAMgASgHEhAKCG5vZGVOYW1lGAQgASgJEiwKBnNoYWRlchgFIAEo",
            "DjIcLmNvbS5jb250ZXh0LmdycGMuU2hhZGVyVHlwZRIPCgdnbHRmSWRzGAYg",
            "AygHEhgKEGRlZmF1bHRHbHRmSW5kZXgYByABKA0SHwoXaGlnaFJlc29sdXRp",
            "b25HbHRmSW5kZXgYCCABKA0SFgoOdmlld0ltcG9ydGFuY2UYCSABKA0SFAoM",
            "Z2x0ZkZpbGVwYXRoGAogASgJGi0KC1BhcmFtc0VudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEiUwoRTGluZWFyVHJhbnNsYXRpb24SCgoC",
            "aWQYASABKAcSDgoGbm9kZUlkGAIgASgHEgoKAmR4GAMgASgCEgoKAmR5GAQg",
            "ASgCEgoKAmR6GAUgASgCImIKFE5vbkxpbmVhclRyYW5zbGF0aW9uEgoKAmlk",
            "GAEgASgHEg4KBm5vZGVJZBgCIAEoBxIKCgJkdBgDIAEoAhIKCgJkeBgEIAMo",
            "AhIKCgJkeRgFIAMoAhIKCgJkehgGIAMoAiKrAQoGU2NyaXB0Eg4KBm5vZGVJ",
            "ZBgBIAEoBxIsCgZzY3JpcHQYAiABKA4yHC5jb20uY29udGV4dC5ncnBjLlNj",
            "cmlwdEVudW0SNAoGcGFyYW1zGAMgAygLMiQuY29tLmNvbnRleHQuZ3JwYy5T",
            "Y3JpcHQuUGFyYW1zRW50cnkaLQoLUGFyYW1zRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ASKxAQoNU2NyaXB0Q29udGV4dBIKCgJpZBgB",
            "IAEoBxI7CgZwYXJhbXMYAiADKAsyKy5jb20uY29udGV4dC5ncnBjLlNjcmlw",
            "dENvbnRleHQuUGFyYW1zRW50cnkSKAoGc2NyaXB0GAMgASgLMhguY29tLmNv",
            "bnRleHQuZ3JwYy5TY3JpcHQaLQoLUGFyYW1zRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ASJTCg1Ob2RlR3JvdXBMaXN0EgoKAmlkGAEg",
            "ASgHEjYKCm5vZGVHcm91cHMYAiADKAsyIi5jb20uY29udGV4dC5ncnBjLk5v",
            "ZGVHcm91cENvbnRleHQiRAoITm9kZUxpc3QSCgoCaWQYASABKAcSLAoFbm9k",
            "ZXMYAiADKAsyHS5jb20uY29udGV4dC5ncnBjLk5vZGVDb250ZXh0IikKCUlk",
            "ZW50TGlzdBIKCgJpZBgBIAEoBxIQCghpZGVudElkcxgCIAMoByKsAQoDQ2Ft",
            "EgoKAmlkGAEgASgHEgoKAnB4GAIgASgCEgoKAnB5GAMgASgCEgoKAnB6GAQg",
            "ASgCEgoKAnJ4GAUgASgCEgoKAnJ5GAYgASgCEgoKAnJ6GAcgASgCEgsKA2Zv",
            "dhgIIAEoAhINCgV6TmVhchgJIAEoAhIMCgR6RmFyGAogASgCEicKBHR5cGUY",
            "CyABKA4yGS5jb20uY29udGV4dC5ncnBjLkNhbVR5cGUi2gIKC0dsdGZDb250",
            "ZXh0EiwKBW5vZGVzGAEgAygLMh0uY29tLmNvbnRleHQuZ3JwYy5Ob2RlQ29u",
            "dGV4dBI/ChJsaW5lYXJUcmFuc2xhdGlvbnMYAiADKAsyIy5jb20uY29udGV4",
            "dC5ncnBjLkxpbmVhclRyYW5zbGF0aW9uEkUKFW5vbkxpbmVhclRyYW5zbGF0",
            "aW9ucxgDIAMoCzImLmNvbS5jb250ZXh0LmdycGMuTm9uTGluZWFyVHJhbnNs",
            "YXRpb24SMAoHc2NyaXB0cxgEIAMoCzIfLmNvbS5jb250ZXh0LmdycGMuU2Ny",
            "aXB0Q29udGV4dBIsCgVmaWxlcxgFIAMoCzIdLmNvbS5jb250ZXh0LmdycGMu",
            "RmlsZUNvbnRleHQSNQoMc2luZ2xlRWxtbnRzGAcgAygLMh8uY29tLmNvbnRl",
            "eHQuZ3JwYy5TaW5nbGVDb250ZXh0KkoKDFF1YWxpdHlMZXZlbBIMCghWRVJZ",
            "X0xPVxAAEgcKA0xPVxABEgoKBk1FRElVTRACEggKBEhJR0gQAxINCglWRVJZ",
            "X0hJR0gQBColCgpTY3JpcHRFbnVtEgoKBkJPVU5DRRAAEgsKB0VYUExPREUQ",
            "ASoVCgpTaGFkZXJUeXBlEgcKA1BCUhAAKjYKB0NhbVR5cGUSCgoGTE9PS0FU",
            "EAASDwoLRklSU1RQRVJTT04QARIOCgpDT05UUk9MTEVEEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CommonReflection.Descriptor, global::Com.Gltf.Grpc.GltfEngineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Context.Grpc.QualityLevel), typeof(global::Com.Context.Grpc.ScriptEnum), typeof(global::Com.Context.Grpc.ShaderType), typeof(global::Com.Context.Grpc.CamType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.SingleRsc), global::Com.Context.Grpc.SingleRsc.Parser, new[]{ "Gltf", "Node", "NodeGroup", "Map", "Scene", "Script", "Bytes", "Image", "Id", "Uuid", "Name", "MKey", "Params" }, new[]{ "MType" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.SingleRsc2), global::Com.Context.Grpc.SingleRsc2.Parser, new[]{ "Id", "Uuid", "Name", "Gltf", "Node", "NodeGroup", "Map", "Scene", "Script", "Bytes", "Image" }, new[]{ "MType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.SingleContext), global::Com.Context.Grpc.SingleContext.Parser, new[]{ "Id", "Params", "Gltf", "Node", "NodeGroup", "Map", "Scene", "Script", "Bytes", "Image", "LinearTranslation", "NonLinearTranslation", "File" }, new[]{ "MType" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Map), global::Com.Context.Grpc.Map.Parser, new[]{ "Elmnts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.MapElmnt), global::Com.Context.Grpc.MapElmnt.Parser, new[]{ "SceneId", "Area" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Scene), global::Com.Context.Grpc.Scene.Parser, new[]{ "Elmnts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.SceneElmnt), global::Com.Context.Grpc.SceneElmnt.Parser, new[]{ "Gltf", "Node", "NodeGroup", "Cam", "Text", "Line", "Plane", "Button", "Environment", "Script", "LinearTranslation", "NonLinearTranslation", "ParamMap" }, new[]{ "ParamOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.FileContext), global::Com.Context.Grpc.FileContext.Parser, new[]{ "Id", "Filepath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.FileNodeContext), global::Com.Context.Grpc.FileNodeContext.Parser, new[]{ "FileId", "NodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeDto), global::Com.Context.Grpc.NodeDto.Parser, new[]{ "Id", "NodeGroupId", "GltfId", "Px", "Py", "Pz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeEntity), global::Com.Context.Grpc.NodeEntity.Parser, new[]{ "Id", "Params", "NodeGroupId", "GltfId", "Px", "Py", "Pz", "Rx", "Ry", "Rz", "Rw", "Animation", "Quality" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeContext), global::Com.Context.Grpc.NodeContext.Parser, new[]{ "Id", "Params", "Node" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Node), global::Com.Context.Grpc.Node.Parser, new[]{ "NodeGroupId", "GltfId", "Px", "Py", "Pz", "Rx", "Ry", "Rz", "Rw", "Animation", "Quality" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Text), global::Com.Context.Grpc.Text.Parser, new[]{ "Id", "Value", "FontSize", "FontFamily" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Line), global::Com.Context.Grpc.Line.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Plane), global::Com.Context.Grpc.Plane.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Button), global::Com.Context.Grpc.Button.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Environment), global::Com.Context.Grpc.Environment.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.BinaryContext), global::Com.Context.Grpc.BinaryContext.Parser, new[]{ "Id", "Params", "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.ImageContext), global::Com.Context.Grpc.ImageContext.Parser, new[]{ "Id", "Params", "Image" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Image), global::Com.Context.Grpc.Image.Parser, new[]{ "MimeType", "Bytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeGroupContext), global::Com.Context.Grpc.NodeGroupContext.Parser, new[]{ "Id", "Params", "NodeGroup" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeGroup), global::Com.Context.Grpc.NodeGroup.Parser, new[]{ "GltfId", "NodeName", "Shader", "GltfIds", "DefaultGltfIndex", "HighResolutionGltfIndex", "ViewImportance", "GltfFilepath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeGroupEntity), global::Com.Context.Grpc.NodeGroupEntity.Parser, new[]{ "Id", "Params", "GltfId", "NodeName", "Shader", "GltfIds", "DefaultGltfIndex", "HighResolutionGltfIndex", "ViewImportance", "GltfFilepath" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.LinearTranslation), global::Com.Context.Grpc.LinearTranslation.Parser, new[]{ "Id", "NodeId", "Dx", "Dy", "Dz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NonLinearTranslation), global::Com.Context.Grpc.NonLinearTranslation.Parser, new[]{ "Id", "NodeId", "Dt", "Dx", "Dy", "Dz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Script), global::Com.Context.Grpc.Script.Parser, new[]{ "NodeId", "Script_", "Params" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.ScriptContext), global::Com.Context.Grpc.ScriptContext.Parser, new[]{ "Id", "Params", "Script" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeGroupList), global::Com.Context.Grpc.NodeGroupList.Parser, new[]{ "Id", "NodeGroups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.NodeList), global::Com.Context.Grpc.NodeList.Parser, new[]{ "Id", "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.IdentList), global::Com.Context.Grpc.IdentList.Parser, new[]{ "Id", "IdentIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.Cam), global::Com.Context.Grpc.Cam.Parser, new[]{ "Id", "Px", "Py", "Pz", "Rx", "Ry", "Rz", "Fov", "ZNear", "ZFar", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Context.Grpc.GltfContext), global::Com.Context.Grpc.GltfContext.Parser, new[]{ "Nodes", "LinearTranslations", "NonLinearTranslations", "Scripts", "Files", "SingleElmnts" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum QualityLevel {
    [pbr::OriginalName("VERY_LOW")] VeryLow = 0,
    [pbr::OriginalName("LOW")] Low = 1,
    [pbr::OriginalName("MEDIUM")] Medium = 2,
    [pbr::OriginalName("HIGH")] High = 3,
    [pbr::OriginalName("VERY_HIGH")] VeryHigh = 4,
  }

  public enum ScriptEnum {
    [pbr::OriginalName("BOUNCE")] Bounce = 0,
    [pbr::OriginalName("EXPLODE")] Explode = 1,
  }

  public enum ShaderType {
    [pbr::OriginalName("PBR")] Pbr = 0,
  }

  public enum CamType {
    [pbr::OriginalName("LOOKAT")] Lookat = 0,
    [pbr::OriginalName("FIRSTPERSON")] Firstperson = 1,
    [pbr::OriginalName("CONTROLLED")] Controlled = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  Verwendung in Datenbank
  /// </summary>
  public sealed partial class SingleRsc : pb::IMessage<SingleRsc> {
    private static readonly pb::MessageParser<SingleRsc> _parser = new pb::MessageParser<SingleRsc>(() => new SingleRsc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRsc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRsc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRsc(SingleRsc other) : this() {
      id_ = other.id_;
      uuid_ = other.uuid_;
      name_ = other.name_;
      mKey_ = other.mKey_;
      params_ = other.params_.Clone();
      switch (other.MTypeCase) {
        case MTypeOneofCase.Gltf:
          Gltf = other.Gltf.Clone();
          break;
        case MTypeOneofCase.Node:
          Node = other.Node.Clone();
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup.Clone();
          break;
        case MTypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case MTypeOneofCase.Scene:
          Scene = other.Scene.Clone();
          break;
        case MTypeOneofCase.Script:
          Script = other.Script.Clone();
          break;
        case MTypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MTypeOneofCase.Image:
          Image = other.Image.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRsc Clone() {
      return new SingleRsc(this);
    }

    /// <summary>Field number for the "gltf" field.</summary>
    public const int GltfFieldNumber = 1;
    /// <summary>
    ///  Eine Änderung der Nummer hat eine Änderung des DB-Inhalts zur Folge!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.GltfModel Gltf {
      get { return mTypeCase_ == MTypeOneofCase.Gltf ? (global::Com.Gltf.Grpc.GltfModel) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Gltf;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Node Node {
      get { return mTypeCase_ == MTypeOneofCase.Node ? (global::Com.Context.Grpc.Node) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Node;
      }
    }

    /// <summary>Field number for the "nodeGroup" field.</summary>
    public const int NodeGroupFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeGroup NodeGroup {
      get { return mTypeCase_ == MTypeOneofCase.NodeGroup ? (global::Com.Context.Grpc.NodeGroup) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.NodeGroup;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Map Map {
      get { return mTypeCase_ == MTypeOneofCase.Map ? (global::Com.Context.Grpc.Map) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Scene Scene {
      get { return mTypeCase_ == MTypeOneofCase.Scene ? (global::Com.Context.Grpc.Scene) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Scene;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Script Script {
      get { return mTypeCase_ == MTypeOneofCase.Script ? (global::Com.Context.Grpc.Script) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Script;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return mTypeCase_ == MTypeOneofCase.Bytes ? (pb::ByteString) mType_ : pb::ByteString.Empty; }
      set {
        mType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        mTypeCase_ = MTypeOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 8;
    /// <summary>
    ///  nicht einzeln speicherbar:
    /// Cam cam = 10;
    /// Text text = 11;
    /// Line line = 12;
    /// Plane plane = 14;
    /// Button button = 15;
    /// Environment environment = 16;
    /// ScriptContext script = 17;
    /// LinearTranslation linearTranslation = 18;
    /// NonLinearTranslation nonLinearTranslation = 19;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Image Image {
      get { return mTypeCase_ == MTypeOneofCase.Image ? (global::Com.Context.Grpc.Image) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Image;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 10;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 11;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 12;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "m_key" field.</summary>
    public const int MKeyFieldNumber = 14;
    private string mKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MKey {
      get { return mKey_; }
      set {
        mKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 15;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 122);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    private object mType_;
    /// <summary>Enum of possible cases for the "m_type" oneof.</summary>
    public enum MTypeOneofCase {
      None = 0,
      Gltf = 1,
      Node = 2,
      NodeGroup = 3,
      Map = 4,
      Scene = 5,
      Script = 6,
      Bytes = 7,
      Image = 8,
    }
    private MTypeOneofCase mTypeCase_ = MTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTypeOneofCase MTypeCase {
      get { return mTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMType() {
      mTypeCase_ = MTypeOneofCase.None;
      mType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRsc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRsc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Gltf, other.Gltf)) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(NodeGroup, other.NodeGroup)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Scene, other.Scene)) return false;
      if (!object.Equals(Script, other.Script)) return false;
      if (Bytes != other.Bytes) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (Id != other.Id) return false;
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      if (MKey != other.MKey) return false;
      if (!Params.Equals(other.Params)) return false;
      if (MTypeCase != other.MTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mTypeCase_ == MTypeOneofCase.Gltf) hash ^= Gltf.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Node) hash ^= Node.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) hash ^= NodeGroup.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Scene) hash ^= Scene.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Script) hash ^= Script.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Image) hash ^= Image.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MKey.Length != 0) hash ^= MKey.GetHashCode();
      hash ^= Params.GetHashCode();
      hash ^= (int) mTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mTypeCase_ == MTypeOneofCase.Gltf) {
        output.WriteRawTag(10);
        output.WriteMessage(Gltf);
      }
      if (mTypeCase_ == MTypeOneofCase.Node) {
        output.WriteRawTag(18);
        output.WriteMessage(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Map) {
        output.WriteRawTag(34);
        output.WriteMessage(Map);
      }
      if (mTypeCase_ == MTypeOneofCase.Scene) {
        output.WriteRawTag(42);
        output.WriteMessage(Scene);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        output.WriteRawTag(50);
        output.WriteMessage(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.Bytes) {
        output.WriteRawTag(58);
        output.WriteBytes(Bytes);
      }
      if (mTypeCase_ == MTypeOneofCase.Image) {
        output.WriteRawTag(66);
        output.WriteMessage(Image);
      }
      if (Id != 0) {
        output.WriteRawTag(85);
        output.WriteFixed32(Id);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Name);
      }
      if (MKey.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MKey);
      }
      params_.WriteTo(output, _map_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mTypeCase_ == MTypeOneofCase.Gltf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gltf);
      }
      if (mTypeCase_ == MTypeOneofCase.Node) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Map) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (mTypeCase_ == MTypeOneofCase.Scene) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scene);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (mTypeCase_ == MTypeOneofCase.Image) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MKey);
      }
      size += params_.CalculateSize(_map_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRsc other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MKey.Length != 0) {
        MKey = other.MKey;
      }
      params_.Add(other.params_);
      switch (other.MTypeCase) {
        case MTypeOneofCase.Gltf:
          Gltf = other.Gltf;
          break;
        case MTypeOneofCase.Node:
          Node = other.Node;
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup;
          break;
        case MTypeOneofCase.Map:
          Map = other.Map;
          break;
        case MTypeOneofCase.Scene:
          Scene = other.Scene;
          break;
        case MTypeOneofCase.Script:
          Script = other.Script;
          break;
        case MTypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MTypeOneofCase.Image:
          Image = other.Image;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Com.Gltf.Grpc.GltfModel subBuilder = new global::Com.Gltf.Grpc.GltfModel();
            if (mTypeCase_ == MTypeOneofCase.Gltf) {
              subBuilder.MergeFrom(Gltf);
            }
            input.ReadMessage(subBuilder);
            Gltf = subBuilder;
            break;
          }
          case 18: {
            global::Com.Context.Grpc.Node subBuilder = new global::Com.Context.Grpc.Node();
            if (mTypeCase_ == MTypeOneofCase.Node) {
              subBuilder.MergeFrom(Node);
            }
            input.ReadMessage(subBuilder);
            Node = subBuilder;
            break;
          }
          case 26: {
            global::Com.Context.Grpc.NodeGroup subBuilder = new global::Com.Context.Grpc.NodeGroup();
            if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
              subBuilder.MergeFrom(NodeGroup);
            }
            input.ReadMessage(subBuilder);
            NodeGroup = subBuilder;
            break;
          }
          case 34: {
            global::Com.Context.Grpc.Map subBuilder = new global::Com.Context.Grpc.Map();
            if (mTypeCase_ == MTypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 42: {
            global::Com.Context.Grpc.Scene subBuilder = new global::Com.Context.Grpc.Scene();
            if (mTypeCase_ == MTypeOneofCase.Scene) {
              subBuilder.MergeFrom(Scene);
            }
            input.ReadMessage(subBuilder);
            Scene = subBuilder;
            break;
          }
          case 50: {
            global::Com.Context.Grpc.Script subBuilder = new global::Com.Context.Grpc.Script();
            if (mTypeCase_ == MTypeOneofCase.Script) {
              subBuilder.MergeFrom(Script);
            }
            input.ReadMessage(subBuilder);
            Script = subBuilder;
            break;
          }
          case 58: {
            Bytes = input.ReadBytes();
            break;
          }
          case 66: {
            global::Com.Context.Grpc.Image subBuilder = new global::Com.Context.Grpc.Image();
            if (mTypeCase_ == MTypeOneofCase.Image) {
              subBuilder.MergeFrom(Image);
            }
            input.ReadMessage(subBuilder);
            Image = subBuilder;
            break;
          }
          case 85: {
            Id = input.ReadFixed32();
            break;
          }
          case 90: {
            Uuid = input.ReadString();
            break;
          }
          case 98: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            MKey = input.ReadString();
            break;
          }
          case 122: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Zum Entwickeln sind die Modelle typisiert in der Datenbank (Spalten-Werte)
  ///  Für das Deployment werden sie binär gespeichert.
  /// </summary>
  public sealed partial class SingleRsc2 : pb::IMessage<SingleRsc2> {
    private static readonly pb::MessageParser<SingleRsc2> _parser = new pb::MessageParser<SingleRsc2>(() => new SingleRsc2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRsc2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRsc2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRsc2(SingleRsc2 other) : this() {
      id_ = other.id_;
      uuid_ = other.uuid_;
      name_ = other.name_;
      switch (other.MTypeCase) {
        case MTypeOneofCase.Gltf:
          Gltf = other.Gltf.Clone();
          break;
        case MTypeOneofCase.Node:
          Node = other.Node.Clone();
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup.Clone();
          break;
        case MTypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case MTypeOneofCase.Scene:
          Scene = other.Scene.Clone();
          break;
        case MTypeOneofCase.Script:
          Script = other.Script.Clone();
          break;
        case MTypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MTypeOneofCase.Image:
          Image = other.Image.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRsc2 Clone() {
      return new SingleRsc2(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gltf" field.</summary>
    public const int GltfFieldNumber = 4;
    /// <summary>
    ///  Eine Änderung der Nummer hat eine Änderung des DB-Inhalts zur Folge!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.GltfModel Gltf {
      get { return mTypeCase_ == MTypeOneofCase.Gltf ? (global::Com.Gltf.Grpc.GltfModel) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Gltf;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Node Node {
      get { return mTypeCase_ == MTypeOneofCase.Node ? (global::Com.Context.Grpc.Node) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Node;
      }
    }

    /// <summary>Field number for the "nodeGroup" field.</summary>
    public const int NodeGroupFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeGroup NodeGroup {
      get { return mTypeCase_ == MTypeOneofCase.NodeGroup ? (global::Com.Context.Grpc.NodeGroup) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.NodeGroup;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Map Map {
      get { return mTypeCase_ == MTypeOneofCase.Map ? (global::Com.Context.Grpc.Map) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Scene Scene {
      get { return mTypeCase_ == MTypeOneofCase.Scene ? (global::Com.Context.Grpc.Scene) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Scene;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Script Script {
      get { return mTypeCase_ == MTypeOneofCase.Script ? (global::Com.Context.Grpc.Script) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Script;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return mTypeCase_ == MTypeOneofCase.Bytes ? (pb::ByteString) mType_ : pb::ByteString.Empty; }
      set {
        mType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        mTypeCase_ = MTypeOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 11;
    /// <summary>
    ///  nicht einzeln speicherbar:
    /// Cam cam = 10;
    /// Text text = 11;
    /// Line line = 12;
    /// Plane plane = 14;
    /// Button button = 15;
    /// Environment environment = 16;
    /// ScriptContext script = 17;
    /// LinearTranslation linearTranslation = 18;
    /// NonLinearTranslation nonLinearTranslation = 19;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Image Image {
      get { return mTypeCase_ == MTypeOneofCase.Image ? (global::Com.Context.Grpc.Image) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Image;
      }
    }

    private object mType_;
    /// <summary>Enum of possible cases for the "m_type" oneof.</summary>
    public enum MTypeOneofCase {
      None = 0,
      Gltf = 4,
      Node = 5,
      NodeGroup = 6,
      Map = 7,
      Scene = 8,
      Script = 9,
      Bytes = 10,
      Image = 11,
    }
    private MTypeOneofCase mTypeCase_ = MTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTypeOneofCase MTypeCase {
      get { return mTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMType() {
      mTypeCase_ = MTypeOneofCase.None;
      mType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRsc2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRsc2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Gltf, other.Gltf)) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(NodeGroup, other.NodeGroup)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Scene, other.Scene)) return false;
      if (!object.Equals(Script, other.Script)) return false;
      if (Bytes != other.Bytes) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (MTypeCase != other.MTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Gltf) hash ^= Gltf.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Node) hash ^= Node.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) hash ^= NodeGroup.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Scene) hash ^= Scene.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Script) hash ^= Script.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Image) hash ^= Image.GetHashCode();
      hash ^= (int) mTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (mTypeCase_ == MTypeOneofCase.Gltf) {
        output.WriteRawTag(34);
        output.WriteMessage(Gltf);
      }
      if (mTypeCase_ == MTypeOneofCase.Node) {
        output.WriteRawTag(42);
        output.WriteMessage(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        output.WriteRawTag(50);
        output.WriteMessage(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Map) {
        output.WriteRawTag(58);
        output.WriteMessage(Map);
      }
      if (mTypeCase_ == MTypeOneofCase.Scene) {
        output.WriteRawTag(66);
        output.WriteMessage(Scene);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        output.WriteRawTag(74);
        output.WriteMessage(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.Bytes) {
        output.WriteRawTag(82);
        output.WriteBytes(Bytes);
      }
      if (mTypeCase_ == MTypeOneofCase.Image) {
        output.WriteRawTag(90);
        output.WriteMessage(Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (mTypeCase_ == MTypeOneofCase.Gltf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gltf);
      }
      if (mTypeCase_ == MTypeOneofCase.Node) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Map) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (mTypeCase_ == MTypeOneofCase.Scene) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scene);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (mTypeCase_ == MTypeOneofCase.Image) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRsc2 other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.MTypeCase) {
        case MTypeOneofCase.Gltf:
          Gltf = other.Gltf;
          break;
        case MTypeOneofCase.Node:
          Node = other.Node;
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup;
          break;
        case MTypeOneofCase.Map:
          Map = other.Map;
          break;
        case MTypeOneofCase.Scene:
          Scene = other.Scene;
          break;
        case MTypeOneofCase.Script:
          Script = other.Script;
          break;
        case MTypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MTypeOneofCase.Image:
          Image = other.Image;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            global::Com.Gltf.Grpc.GltfModel subBuilder = new global::Com.Gltf.Grpc.GltfModel();
            if (mTypeCase_ == MTypeOneofCase.Gltf) {
              subBuilder.MergeFrom(Gltf);
            }
            input.ReadMessage(subBuilder);
            Gltf = subBuilder;
            break;
          }
          case 42: {
            global::Com.Context.Grpc.Node subBuilder = new global::Com.Context.Grpc.Node();
            if (mTypeCase_ == MTypeOneofCase.Node) {
              subBuilder.MergeFrom(Node);
            }
            input.ReadMessage(subBuilder);
            Node = subBuilder;
            break;
          }
          case 50: {
            global::Com.Context.Grpc.NodeGroup subBuilder = new global::Com.Context.Grpc.NodeGroup();
            if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
              subBuilder.MergeFrom(NodeGroup);
            }
            input.ReadMessage(subBuilder);
            NodeGroup = subBuilder;
            break;
          }
          case 58: {
            global::Com.Context.Grpc.Map subBuilder = new global::Com.Context.Grpc.Map();
            if (mTypeCase_ == MTypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 66: {
            global::Com.Context.Grpc.Scene subBuilder = new global::Com.Context.Grpc.Scene();
            if (mTypeCase_ == MTypeOneofCase.Scene) {
              subBuilder.MergeFrom(Scene);
            }
            input.ReadMessage(subBuilder);
            Scene = subBuilder;
            break;
          }
          case 74: {
            global::Com.Context.Grpc.Script subBuilder = new global::Com.Context.Grpc.Script();
            if (mTypeCase_ == MTypeOneofCase.Script) {
              subBuilder.MergeFrom(Script);
            }
            input.ReadMessage(subBuilder);
            Script = subBuilder;
            break;
          }
          case 82: {
            Bytes = input.ReadBytes();
            break;
          }
          case 90: {
            global::Com.Context.Grpc.Image subBuilder = new global::Com.Context.Grpc.Image();
            if (mTypeCase_ == MTypeOneofCase.Image) {
              subBuilder.MergeFrom(Image);
            }
            input.ReadMessage(subBuilder);
            Image = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleContext : pb::IMessage<SingleContext> {
    private static readonly pb::MessageParser<SingleContext> _parser = new pb::MessageParser<SingleContext>(() => new SingleContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleContext(SingleContext other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      switch (other.MTypeCase) {
        case MTypeOneofCase.Gltf:
          Gltf = other.Gltf.Clone();
          break;
        case MTypeOneofCase.Node:
          Node = other.Node.Clone();
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup.Clone();
          break;
        case MTypeOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case MTypeOneofCase.Scene:
          Scene = other.Scene.Clone();
          break;
        case MTypeOneofCase.Script:
          Script = other.Script.Clone();
          break;
        case MTypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MTypeOneofCase.Image:
          Image = other.Image.Clone();
          break;
        case MTypeOneofCase.LinearTranslation:
          LinearTranslation = other.LinearTranslation.Clone();
          break;
        case MTypeOneofCase.NonLinearTranslation:
          NonLinearTranslation = other.NonLinearTranslation.Clone();
          break;
        case MTypeOneofCase.File:
          File = other.File.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleContext Clone() {
      return new SingleContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "gltf" field.</summary>
    public const int GltfFieldNumber = 3;
    /// <summary>
    ///  Eine Änderung der Nummer hat eine Änderung des DB-Inhalts zur Folge!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.GltfModel Gltf {
      get { return mTypeCase_ == MTypeOneofCase.Gltf ? (global::Com.Gltf.Grpc.GltfModel) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Gltf;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Node Node {
      get { return mTypeCase_ == MTypeOneofCase.Node ? (global::Com.Context.Grpc.Node) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Node;
      }
    }

    /// <summary>Field number for the "nodeGroup" field.</summary>
    public const int NodeGroupFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeGroup NodeGroup {
      get { return mTypeCase_ == MTypeOneofCase.NodeGroup ? (global::Com.Context.Grpc.NodeGroup) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.NodeGroup;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Map Map {
      get { return mTypeCase_ == MTypeOneofCase.Map ? (global::Com.Context.Grpc.Map) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Map;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Scene Scene {
      get { return mTypeCase_ == MTypeOneofCase.Scene ? (global::Com.Context.Grpc.Scene) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Scene;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Script Script {
      get { return mTypeCase_ == MTypeOneofCase.Script ? (global::Com.Context.Grpc.Script) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Script;
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return mTypeCase_ == MTypeOneofCase.Bytes ? (pb::ByteString) mType_ : pb::ByteString.Empty; }
      set {
        mType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        mTypeCase_ = MTypeOneofCase.Bytes;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Image Image {
      get { return mTypeCase_ == MTypeOneofCase.Image ? (global::Com.Context.Grpc.Image) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.Image;
      }
    }

    /// <summary>Field number for the "linearTranslation" field.</summary>
    public const int LinearTranslationFieldNumber = 11;
    /// <summary>
    ///  linear bewegende nodes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.LinearTranslation LinearTranslation {
      get { return mTypeCase_ == MTypeOneofCase.LinearTranslation ? (global::Com.Context.Grpc.LinearTranslation) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.LinearTranslation;
      }
    }

    /// <summary>Field number for the "nonLinearTranslation" field.</summary>
    public const int NonLinearTranslationFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NonLinearTranslation NonLinearTranslation {
      get { return mTypeCase_ == MTypeOneofCase.NonLinearTranslation ? (global::Com.Context.Grpc.NonLinearTranslation) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.NonLinearTranslation;
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.FileContext File {
      get { return mTypeCase_ == MTypeOneofCase.File ? (global::Com.Context.Grpc.FileContext) mType_ : null; }
      set {
        mType_ = value;
        mTypeCase_ = value == null ? MTypeOneofCase.None : MTypeOneofCase.File;
      }
    }

    private object mType_;
    /// <summary>Enum of possible cases for the "m_type" oneof.</summary>
    public enum MTypeOneofCase {
      None = 0,
      Gltf = 3,
      Node = 4,
      NodeGroup = 5,
      Map = 6,
      Scene = 7,
      Script = 8,
      Bytes = 9,
      Image = 10,
      LinearTranslation = 11,
      NonLinearTranslation = 12,
      File = 14,
    }
    private MTypeOneofCase mTypeCase_ = MTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MTypeOneofCase MTypeCase {
      get { return mTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMType() {
      mTypeCase_ = MTypeOneofCase.None;
      mType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (!object.Equals(Gltf, other.Gltf)) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(NodeGroup, other.NodeGroup)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Scene, other.Scene)) return false;
      if (!object.Equals(Script, other.Script)) return false;
      if (Bytes != other.Bytes) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(LinearTranslation, other.LinearTranslation)) return false;
      if (!object.Equals(NonLinearTranslation, other.NonLinearTranslation)) return false;
      if (!object.Equals(File, other.File)) return false;
      if (MTypeCase != other.MTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Gltf) hash ^= Gltf.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Node) hash ^= Node.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) hash ^= NodeGroup.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Map) hash ^= Map.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Scene) hash ^= Scene.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Script) hash ^= Script.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Bytes) hash ^= Bytes.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.Image) hash ^= Image.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.LinearTranslation) hash ^= LinearTranslation.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) hash ^= NonLinearTranslation.GetHashCode();
      if (mTypeCase_ == MTypeOneofCase.File) hash ^= File.GetHashCode();
      hash ^= (int) mTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (mTypeCase_ == MTypeOneofCase.Gltf) {
        output.WriteRawTag(26);
        output.WriteMessage(Gltf);
      }
      if (mTypeCase_ == MTypeOneofCase.Node) {
        output.WriteRawTag(34);
        output.WriteMessage(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        output.WriteRawTag(42);
        output.WriteMessage(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Map) {
        output.WriteRawTag(50);
        output.WriteMessage(Map);
      }
      if (mTypeCase_ == MTypeOneofCase.Scene) {
        output.WriteRawTag(58);
        output.WriteMessage(Scene);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        output.WriteRawTag(66);
        output.WriteMessage(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.Bytes) {
        output.WriteRawTag(74);
        output.WriteBytes(Bytes);
      }
      if (mTypeCase_ == MTypeOneofCase.Image) {
        output.WriteRawTag(82);
        output.WriteMessage(Image);
      }
      if (mTypeCase_ == MTypeOneofCase.LinearTranslation) {
        output.WriteRawTag(90);
        output.WriteMessage(LinearTranslation);
      }
      if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) {
        output.WriteRawTag(98);
        output.WriteMessage(NonLinearTranslation);
      }
      if (mTypeCase_ == MTypeOneofCase.File) {
        output.WriteRawTag(114);
        output.WriteMessage(File);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (mTypeCase_ == MTypeOneofCase.Gltf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gltf);
      }
      if (mTypeCase_ == MTypeOneofCase.Node) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeGroup);
      }
      if (mTypeCase_ == MTypeOneofCase.Map) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (mTypeCase_ == MTypeOneofCase.Scene) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scene);
      }
      if (mTypeCase_ == MTypeOneofCase.Script) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      if (mTypeCase_ == MTypeOneofCase.Bytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      if (mTypeCase_ == MTypeOneofCase.Image) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (mTypeCase_ == MTypeOneofCase.LinearTranslation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearTranslation);
      }
      if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonLinearTranslation);
      }
      if (mTypeCase_ == MTypeOneofCase.File) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(File);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleContext other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      switch (other.MTypeCase) {
        case MTypeOneofCase.Gltf:
          Gltf = other.Gltf;
          break;
        case MTypeOneofCase.Node:
          Node = other.Node;
          break;
        case MTypeOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup;
          break;
        case MTypeOneofCase.Map:
          Map = other.Map;
          break;
        case MTypeOneofCase.Scene:
          Scene = other.Scene;
          break;
        case MTypeOneofCase.Script:
          Script = other.Script;
          break;
        case MTypeOneofCase.Bytes:
          Bytes = other.Bytes;
          break;
        case MTypeOneofCase.Image:
          Image = other.Image;
          break;
        case MTypeOneofCase.LinearTranslation:
          LinearTranslation = other.LinearTranslation;
          break;
        case MTypeOneofCase.NonLinearTranslation:
          NonLinearTranslation = other.NonLinearTranslation;
          break;
        case MTypeOneofCase.File:
          File = other.File;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            global::Com.Gltf.Grpc.GltfModel subBuilder = new global::Com.Gltf.Grpc.GltfModel();
            if (mTypeCase_ == MTypeOneofCase.Gltf) {
              subBuilder.MergeFrom(Gltf);
            }
            input.ReadMessage(subBuilder);
            Gltf = subBuilder;
            break;
          }
          case 34: {
            global::Com.Context.Grpc.Node subBuilder = new global::Com.Context.Grpc.Node();
            if (mTypeCase_ == MTypeOneofCase.Node) {
              subBuilder.MergeFrom(Node);
            }
            input.ReadMessage(subBuilder);
            Node = subBuilder;
            break;
          }
          case 42: {
            global::Com.Context.Grpc.NodeGroup subBuilder = new global::Com.Context.Grpc.NodeGroup();
            if (mTypeCase_ == MTypeOneofCase.NodeGroup) {
              subBuilder.MergeFrom(NodeGroup);
            }
            input.ReadMessage(subBuilder);
            NodeGroup = subBuilder;
            break;
          }
          case 50: {
            global::Com.Context.Grpc.Map subBuilder = new global::Com.Context.Grpc.Map();
            if (mTypeCase_ == MTypeOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 58: {
            global::Com.Context.Grpc.Scene subBuilder = new global::Com.Context.Grpc.Scene();
            if (mTypeCase_ == MTypeOneofCase.Scene) {
              subBuilder.MergeFrom(Scene);
            }
            input.ReadMessage(subBuilder);
            Scene = subBuilder;
            break;
          }
          case 66: {
            global::Com.Context.Grpc.Script subBuilder = new global::Com.Context.Grpc.Script();
            if (mTypeCase_ == MTypeOneofCase.Script) {
              subBuilder.MergeFrom(Script);
            }
            input.ReadMessage(subBuilder);
            Script = subBuilder;
            break;
          }
          case 74: {
            Bytes = input.ReadBytes();
            break;
          }
          case 82: {
            global::Com.Context.Grpc.Image subBuilder = new global::Com.Context.Grpc.Image();
            if (mTypeCase_ == MTypeOneofCase.Image) {
              subBuilder.MergeFrom(Image);
            }
            input.ReadMessage(subBuilder);
            Image = subBuilder;
            break;
          }
          case 90: {
            global::Com.Context.Grpc.LinearTranslation subBuilder = new global::Com.Context.Grpc.LinearTranslation();
            if (mTypeCase_ == MTypeOneofCase.LinearTranslation) {
              subBuilder.MergeFrom(LinearTranslation);
            }
            input.ReadMessage(subBuilder);
            LinearTranslation = subBuilder;
            break;
          }
          case 98: {
            global::Com.Context.Grpc.NonLinearTranslation subBuilder = new global::Com.Context.Grpc.NonLinearTranslation();
            if (mTypeCase_ == MTypeOneofCase.NonLinearTranslation) {
              subBuilder.MergeFrom(NonLinearTranslation);
            }
            input.ReadMessage(subBuilder);
            NonLinearTranslation = subBuilder;
            break;
          }
          case 114: {
            global::Com.Context.Grpc.FileContext subBuilder = new global::Com.Context.Grpc.FileContext();
            if (mTypeCase_ == MTypeOneofCase.File) {
              subBuilder.MergeFrom(File);
            }
            input.ReadMessage(subBuilder);
            File = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Map : pb::IMessage<Map> {
    private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map(Map other) : this() {
      elmnts_ = other.elmnts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map Clone() {
      return new Map(this);
    }

    /// <summary>Field number for the "elmnts" field.</summary>
    public const int ElmntsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.MapElmnt> _repeated_elmnts_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Context.Grpc.MapElmnt.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.MapElmnt> elmnts_ = new pbc::RepeatedField<global::Com.Context.Grpc.MapElmnt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.MapElmnt> Elmnts {
      get { return elmnts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elmnts_.Equals(other.elmnts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elmnts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elmnts_.WriteTo(output, _repeated_elmnts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elmnts_.CalculateSize(_repeated_elmnts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map other) {
      if (other == null) {
        return;
      }
      elmnts_.Add(other.elmnts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            elmnts_.AddEntriesFrom(input, _repeated_elmnts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapElmnt : pb::IMessage<MapElmnt> {
    private static readonly pb::MessageParser<MapElmnt> _parser = new pb::MessageParser<MapElmnt>(() => new MapElmnt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapElmnt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElmnt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElmnt(MapElmnt other) : this() {
      sceneId_ = other.sceneId_;
      area_ = other.area_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElmnt Clone() {
      return new MapElmnt(this);
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private uint sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_area_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> area_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///  gebietsbox
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Area {
      get { return area_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapElmnt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapElmnt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if(!area_.Equals(other.area_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      hash ^= area_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(SceneId);
      }
      area_.WriteTo(output, _repeated_area_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + 4;
      }
      size += area_.CalculateSize(_repeated_area_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapElmnt other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      area_.Add(other.area_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            SceneId = input.ReadFixed32();
            break;
          }
          case 18:
          case 21: {
            area_.AddEntriesFrom(input, _repeated_area_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scene : pb::IMessage<Scene> {
    private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene(Scene other) : this() {
      elmnts_ = other.elmnts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene Clone() {
      return new Scene(this);
    }

    /// <summary>Field number for the "elmnts" field.</summary>
    public const int ElmntsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.SceneElmnt> _repeated_elmnts_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Context.Grpc.SceneElmnt.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.SceneElmnt> elmnts_ = new pbc::RepeatedField<global::Com.Context.Grpc.SceneElmnt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.SceneElmnt> Elmnts {
      get { return elmnts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elmnts_.Equals(other.elmnts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elmnts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elmnts_.WriteTo(output, _repeated_elmnts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elmnts_.CalculateSize(_repeated_elmnts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene other) {
      if (other == null) {
        return;
      }
      elmnts_.Add(other.elmnts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            elmnts_.AddEntriesFrom(input, _repeated_elmnts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneElmnt : pb::IMessage<SceneElmnt> {
    private static readonly pb::MessageParser<SceneElmnt> _parser = new pb::MessageParser<SceneElmnt>(() => new SceneElmnt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneElmnt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneElmnt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneElmnt(SceneElmnt other) : this() {
      switch (other.ParamOneofCase) {
        case ParamOneofOneofCase.Gltf:
          Gltf = other.Gltf.Clone();
          break;
        case ParamOneofOneofCase.Node:
          Node = other.Node.Clone();
          break;
        case ParamOneofOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup.Clone();
          break;
        case ParamOneofOneofCase.Cam:
          Cam = other.Cam.Clone();
          break;
        case ParamOneofOneofCase.Text:
          Text = other.Text.Clone();
          break;
        case ParamOneofOneofCase.Line:
          Line = other.Line.Clone();
          break;
        case ParamOneofOneofCase.Plane:
          Plane = other.Plane.Clone();
          break;
        case ParamOneofOneofCase.Button:
          Button = other.Button.Clone();
          break;
        case ParamOneofOneofCase.Environment:
          Environment = other.Environment.Clone();
          break;
        case ParamOneofOneofCase.Script:
          Script = other.Script.Clone();
          break;
        case ParamOneofOneofCase.LinearTranslation:
          LinearTranslation = other.LinearTranslation.Clone();
          break;
        case ParamOneofOneofCase.NonLinearTranslation:
          NonLinearTranslation = other.NonLinearTranslation.Clone();
          break;
        case ParamOneofOneofCase.ParamMap:
          ParamMap = other.ParamMap.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneElmnt Clone() {
      return new SceneElmnt(this);
    }

    /// <summary>Field number for the "gltf" field.</summary>
    public const int GltfFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gltf.Grpc.GltfModel Gltf {
      get { return paramOneofCase_ == ParamOneofOneofCase.Gltf ? (global::Com.Gltf.Grpc.GltfModel) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Gltf;
      }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeContext Node {
      get { return paramOneofCase_ == ParamOneofOneofCase.Node ? (global::Com.Context.Grpc.NodeContext) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Node;
      }
    }

    /// <summary>Field number for the "nodeGroup" field.</summary>
    public const int NodeGroupFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeGroupContext NodeGroup {
      get { return paramOneofCase_ == ParamOneofOneofCase.NodeGroup ? (global::Com.Context.Grpc.NodeGroupContext) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.NodeGroup;
      }
    }

    /// <summary>Field number for the "cam" field.</summary>
    public const int CamFieldNumber = 6;
    /// <summary>
    ///  Map map = 4;
    ///  Scene scene = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Cam Cam {
      get { return paramOneofCase_ == ParamOneofOneofCase.Cam ? (global::Com.Context.Grpc.Cam) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Cam;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Text Text {
      get { return paramOneofCase_ == ParamOneofOneofCase.Text ? (global::Com.Context.Grpc.Text) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Text;
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Line Line {
      get { return paramOneofCase_ == ParamOneofOneofCase.Line ? (global::Com.Context.Grpc.Line) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Line;
      }
    }

    /// <summary>Field number for the "plane" field.</summary>
    public const int PlaneFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Plane Plane {
      get { return paramOneofCase_ == ParamOneofOneofCase.Plane ? (global::Com.Context.Grpc.Plane) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Plane;
      }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Button Button {
      get { return paramOneofCase_ == ParamOneofOneofCase.Button ? (global::Com.Context.Grpc.Button) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Button;
      }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Environment Environment {
      get { return paramOneofCase_ == ParamOneofOneofCase.Environment ? (global::Com.Context.Grpc.Environment) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Environment;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.ScriptContext Script {
      get { return paramOneofCase_ == ParamOneofOneofCase.Script ? (global::Com.Context.Grpc.ScriptContext) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.Script;
      }
    }

    /// <summary>Field number for the "linearTranslation" field.</summary>
    public const int LinearTranslationFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.LinearTranslation LinearTranslation {
      get { return paramOneofCase_ == ParamOneofOneofCase.LinearTranslation ? (global::Com.Context.Grpc.LinearTranslation) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.LinearTranslation;
      }
    }

    /// <summary>Field number for the "nonLinearTranslation" field.</summary>
    public const int NonLinearTranslationFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NonLinearTranslation NonLinearTranslation {
      get { return paramOneofCase_ == ParamOneofOneofCase.NonLinearTranslation ? (global::Com.Context.Grpc.NonLinearTranslation) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.NonLinearTranslation;
      }
    }

    /// <summary>Field number for the "paramMap" field.</summary>
    public const int ParamMapFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ParamMap ParamMap {
      get { return paramOneofCase_ == ParamOneofOneofCase.ParamMap ? (global::ParamMap) paramOneof_ : null; }
      set {
        paramOneof_ = value;
        paramOneofCase_ = value == null ? ParamOneofOneofCase.None : ParamOneofOneofCase.ParamMap;
      }
    }

    private object paramOneof_;
    /// <summary>Enum of possible cases for the "param_oneof" oneof.</summary>
    public enum ParamOneofOneofCase {
      None = 0,
      Gltf = 1,
      Node = 2,
      NodeGroup = 3,
      Cam = 6,
      Text = 7,
      Line = 8,
      Plane = 9,
      Button = 10,
      Environment = 11,
      Script = 12,
      LinearTranslation = 14,
      NonLinearTranslation = 15,
      ParamMap = 16,
    }
    private ParamOneofOneofCase paramOneofCase_ = ParamOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamOneofOneofCase ParamOneofCase {
      get { return paramOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParamOneof() {
      paramOneofCase_ = ParamOneofOneofCase.None;
      paramOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneElmnt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneElmnt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Gltf, other.Gltf)) return false;
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(NodeGroup, other.NodeGroup)) return false;
      if (!object.Equals(Cam, other.Cam)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Line, other.Line)) return false;
      if (!object.Equals(Plane, other.Plane)) return false;
      if (!object.Equals(Button, other.Button)) return false;
      if (!object.Equals(Environment, other.Environment)) return false;
      if (!object.Equals(Script, other.Script)) return false;
      if (!object.Equals(LinearTranslation, other.LinearTranslation)) return false;
      if (!object.Equals(NonLinearTranslation, other.NonLinearTranslation)) return false;
      if (!object.Equals(ParamMap, other.ParamMap)) return false;
      if (ParamOneofCase != other.ParamOneofCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (paramOneofCase_ == ParamOneofOneofCase.Gltf) hash ^= Gltf.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Node) hash ^= Node.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.NodeGroup) hash ^= NodeGroup.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Cam) hash ^= Cam.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Text) hash ^= Text.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Line) hash ^= Line.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Plane) hash ^= Plane.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Button) hash ^= Button.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Environment) hash ^= Environment.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.Script) hash ^= Script.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.LinearTranslation) hash ^= LinearTranslation.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.NonLinearTranslation) hash ^= NonLinearTranslation.GetHashCode();
      if (paramOneofCase_ == ParamOneofOneofCase.ParamMap) hash ^= ParamMap.GetHashCode();
      hash ^= (int) paramOneofCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (paramOneofCase_ == ParamOneofOneofCase.Gltf) {
        output.WriteRawTag(10);
        output.WriteMessage(Gltf);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Node) {
        output.WriteRawTag(18);
        output.WriteMessage(Node);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.NodeGroup) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeGroup);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Cam) {
        output.WriteRawTag(50);
        output.WriteMessage(Cam);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Text) {
        output.WriteRawTag(58);
        output.WriteMessage(Text);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Line) {
        output.WriteRawTag(66);
        output.WriteMessage(Line);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Plane) {
        output.WriteRawTag(74);
        output.WriteMessage(Plane);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Button) {
        output.WriteRawTag(82);
        output.WriteMessage(Button);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Environment) {
        output.WriteRawTag(90);
        output.WriteMessage(Environment);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Script) {
        output.WriteRawTag(98);
        output.WriteMessage(Script);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.LinearTranslation) {
        output.WriteRawTag(114);
        output.WriteMessage(LinearTranslation);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.NonLinearTranslation) {
        output.WriteRawTag(122);
        output.WriteMessage(NonLinearTranslation);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.ParamMap) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ParamMap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (paramOneofCase_ == ParamOneofOneofCase.Gltf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gltf);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Node) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.NodeGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeGroup);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Cam) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cam);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Line) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Line);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Plane) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plane);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Button) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Button);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Environment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Environment);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.Script) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.LinearTranslation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinearTranslation);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.NonLinearTranslation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonLinearTranslation);
      }
      if (paramOneofCase_ == ParamOneofOneofCase.ParamMap) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParamMap);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneElmnt other) {
      if (other == null) {
        return;
      }
      switch (other.ParamOneofCase) {
        case ParamOneofOneofCase.Gltf:
          Gltf = other.Gltf;
          break;
        case ParamOneofOneofCase.Node:
          Node = other.Node;
          break;
        case ParamOneofOneofCase.NodeGroup:
          NodeGroup = other.NodeGroup;
          break;
        case ParamOneofOneofCase.Cam:
          Cam = other.Cam;
          break;
        case ParamOneofOneofCase.Text:
          Text = other.Text;
          break;
        case ParamOneofOneofCase.Line:
          Line = other.Line;
          break;
        case ParamOneofOneofCase.Plane:
          Plane = other.Plane;
          break;
        case ParamOneofOneofCase.Button:
          Button = other.Button;
          break;
        case ParamOneofOneofCase.Environment:
          Environment = other.Environment;
          break;
        case ParamOneofOneofCase.Script:
          Script = other.Script;
          break;
        case ParamOneofOneofCase.LinearTranslation:
          LinearTranslation = other.LinearTranslation;
          break;
        case ParamOneofOneofCase.NonLinearTranslation:
          NonLinearTranslation = other.NonLinearTranslation;
          break;
        case ParamOneofOneofCase.ParamMap:
          ParamMap = other.ParamMap;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Com.Gltf.Grpc.GltfModel subBuilder = new global::Com.Gltf.Grpc.GltfModel();
            if (paramOneofCase_ == ParamOneofOneofCase.Gltf) {
              subBuilder.MergeFrom(Gltf);
            }
            input.ReadMessage(subBuilder);
            Gltf = subBuilder;
            break;
          }
          case 18: {
            global::Com.Context.Grpc.NodeContext subBuilder = new global::Com.Context.Grpc.NodeContext();
            if (paramOneofCase_ == ParamOneofOneofCase.Node) {
              subBuilder.MergeFrom(Node);
            }
            input.ReadMessage(subBuilder);
            Node = subBuilder;
            break;
          }
          case 26: {
            global::Com.Context.Grpc.NodeGroupContext subBuilder = new global::Com.Context.Grpc.NodeGroupContext();
            if (paramOneofCase_ == ParamOneofOneofCase.NodeGroup) {
              subBuilder.MergeFrom(NodeGroup);
            }
            input.ReadMessage(subBuilder);
            NodeGroup = subBuilder;
            break;
          }
          case 50: {
            global::Com.Context.Grpc.Cam subBuilder = new global::Com.Context.Grpc.Cam();
            if (paramOneofCase_ == ParamOneofOneofCase.Cam) {
              subBuilder.MergeFrom(Cam);
            }
            input.ReadMessage(subBuilder);
            Cam = subBuilder;
            break;
          }
          case 58: {
            global::Com.Context.Grpc.Text subBuilder = new global::Com.Context.Grpc.Text();
            if (paramOneofCase_ == ParamOneofOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
          case 66: {
            global::Com.Context.Grpc.Line subBuilder = new global::Com.Context.Grpc.Line();
            if (paramOneofCase_ == ParamOneofOneofCase.Line) {
              subBuilder.MergeFrom(Line);
            }
            input.ReadMessage(subBuilder);
            Line = subBuilder;
            break;
          }
          case 74: {
            global::Com.Context.Grpc.Plane subBuilder = new global::Com.Context.Grpc.Plane();
            if (paramOneofCase_ == ParamOneofOneofCase.Plane) {
              subBuilder.MergeFrom(Plane);
            }
            input.ReadMessage(subBuilder);
            Plane = subBuilder;
            break;
          }
          case 82: {
            global::Com.Context.Grpc.Button subBuilder = new global::Com.Context.Grpc.Button();
            if (paramOneofCase_ == ParamOneofOneofCase.Button) {
              subBuilder.MergeFrom(Button);
            }
            input.ReadMessage(subBuilder);
            Button = subBuilder;
            break;
          }
          case 90: {
            global::Com.Context.Grpc.Environment subBuilder = new global::Com.Context.Grpc.Environment();
            if (paramOneofCase_ == ParamOneofOneofCase.Environment) {
              subBuilder.MergeFrom(Environment);
            }
            input.ReadMessage(subBuilder);
            Environment = subBuilder;
            break;
          }
          case 98: {
            global::Com.Context.Grpc.ScriptContext subBuilder = new global::Com.Context.Grpc.ScriptContext();
            if (paramOneofCase_ == ParamOneofOneofCase.Script) {
              subBuilder.MergeFrom(Script);
            }
            input.ReadMessage(subBuilder);
            Script = subBuilder;
            break;
          }
          case 114: {
            global::Com.Context.Grpc.LinearTranslation subBuilder = new global::Com.Context.Grpc.LinearTranslation();
            if (paramOneofCase_ == ParamOneofOneofCase.LinearTranslation) {
              subBuilder.MergeFrom(LinearTranslation);
            }
            input.ReadMessage(subBuilder);
            LinearTranslation = subBuilder;
            break;
          }
          case 122: {
            global::Com.Context.Grpc.NonLinearTranslation subBuilder = new global::Com.Context.Grpc.NonLinearTranslation();
            if (paramOneofCase_ == ParamOneofOneofCase.NonLinearTranslation) {
              subBuilder.MergeFrom(NonLinearTranslation);
            }
            input.ReadMessage(subBuilder);
            NonLinearTranslation = subBuilder;
            break;
          }
          case 130: {
            global::ParamMap subBuilder = new global::ParamMap();
            if (paramOneofCase_ == ParamOneofOneofCase.ParamMap) {
              subBuilder.MergeFrom(ParamMap);
            }
            input.ReadMessage(subBuilder);
            ParamMap = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FileContext : pb::IMessage<FileContext> {
    private static readonly pb::MessageParser<FileContext> _parser = new pb::MessageParser<FileContext>(() => new FileContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileContext(FileContext other) : this() {
      id_ = other.id_;
      filepath_ = other.filepath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileContext Clone() {
      return new FileContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "filepath" field.</summary>
    public const int FilepathFieldNumber = 2;
    private string filepath_ = "";
    /// <summary>
    ///  nur für debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filepath {
      get { return filepath_; }
      set {
        filepath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Filepath != other.Filepath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Filepath.Length != 0) hash ^= Filepath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (Filepath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filepath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Filepath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filepath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileContext other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Filepath.Length != 0) {
        Filepath = other.Filepath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            Filepath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FileNodeContext : pb::IMessage<FileNodeContext> {
    private static readonly pb::MessageParser<FileNodeContext> _parser = new pb::MessageParser<FileNodeContext>(() => new FileNodeContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileNodeContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileNodeContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileNodeContext(FileNodeContext other) : this() {
      fileId_ = other.fileId_;
      nodeId_ = other.nodeId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileNodeContext Clone() {
      return new FileNodeContext(this);
    }

    /// <summary>Field number for the "fileId" field.</summary>
    public const int FileIdFieldNumber = 1;
    private uint fileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FileId {
      get { return fileId_; }
      set {
        fileId_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileNodeContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileNodeContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileId != other.FileId) return false;
      if (NodeId != other.NodeId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileId != 0) hash ^= FileId.GetHashCode();
      if (NodeId != 0) hash ^= NodeId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileId != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(FileId);
      }
      if (NodeId != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(NodeId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileId != 0) {
        size += 1 + 4;
      }
      if (NodeId != 0) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileNodeContext other) {
      if (other == null) {
        return;
      }
      if (other.FileId != 0) {
        FileId = other.FileId;
      }
      if (other.NodeId != 0) {
        NodeId = other.NodeId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            FileId = input.ReadFixed32();
            break;
          }
          case 21: {
            NodeId = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeDto : pb::IMessage<NodeDto> {
    private static readonly pb::MessageParser<NodeDto> _parser = new pb::MessageParser<NodeDto>(() => new NodeDto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeDto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeDto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeDto(NodeDto other) : this() {
      id_ = other.id_;
      nodeGroupId_ = other.nodeGroupId_;
      gltfId_ = other.gltfId_;
      px_ = other.px_;
      py_ = other.py_;
      pz_ = other.pz_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeDto Clone() {
      return new NodeDto(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nodeGroupId" field.</summary>
    public const int NodeGroupIdFieldNumber = 2;
    private uint nodeGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = value;
      }
    }

    /// <summary>Field number for the "gltfId" field.</summary>
    public const int GltfIdFieldNumber = 3;
    private uint gltfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GltfId {
      get { return gltfId_; }
      set {
        gltfId_ = value;
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 4;
    private float px_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 5;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 6;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeDto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeDto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NodeGroupId != other.NodeGroupId) return false;
      if (GltfId != other.GltfId) return false;
      if (Px != other.Px) return false;
      if (Py != other.Py) return false;
      if (Pz != other.Pz) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (NodeGroupId != 0) hash ^= NodeGroupId.GetHashCode();
      if (GltfId != 0) hash ^= GltfId.GetHashCode();
      if (Px != 0F) hash ^= Px.GetHashCode();
      if (Py != 0F) hash ^= Py.GetHashCode();
      if (Pz != 0F) hash ^= Pz.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (NodeGroupId != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(NodeGroupId);
      }
      if (GltfId != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(GltfId);
      }
      if (Px != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Pz);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (NodeGroupId != 0) {
        size += 1 + 4;
      }
      if (GltfId != 0) {
        size += 1 + 4;
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeDto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.NodeGroupId != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      if (other.GltfId != 0) {
        GltfId = other.GltfId;
      }
      if (other.Px != 0F) {
        Px = other.Px;
      }
      if (other.Py != 0F) {
        Py = other.Py;
      }
      if (other.Pz != 0F) {
        Pz = other.Pz;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 21: {
            NodeGroupId = input.ReadFixed32();
            break;
          }
          case 29: {
            GltfId = input.ReadFixed32();
            break;
          }
          case 37: {
            Px = input.ReadFloat();
            break;
          }
          case 45: {
            Py = input.ReadFloat();
            break;
          }
          case 53: {
            Pz = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeEntity : pb::IMessage<NodeEntity> {
    private static readonly pb::MessageParser<NodeEntity> _parser = new pb::MessageParser<NodeEntity>(() => new NodeEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEntity(NodeEntity other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      nodeGroupId_ = other.nodeGroupId_;
      gltfId_ = other.gltfId_;
      px_ = other.px_;
      py_ = other.py_;
      pz_ = other.pz_;
      rx_ = other.rx_;
      ry_ = other.ry_;
      rz_ = other.rz_;
      rw_ = other.rw_;
      animation_ = other.animation_;
      quality_ = other.quality_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEntity Clone() {
      return new NodeEntity(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "nodeGroupId" field.</summary>
    public const int NodeGroupIdFieldNumber = 3;
    private uint nodeGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = value;
      }
    }

    /// <summary>Field number for the "gltfId" field.</summary>
    public const int GltfIdFieldNumber = 4;
    private uint gltfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GltfId {
      get { return gltfId_; }
      set {
        gltfId_ = value;
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 5;
    private float px_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 6;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 7;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 8;
    private float rx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 9;
    private float ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 10;
    private float rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    /// <summary>Field number for the "rw" field.</summary>
    public const int RwFieldNumber = 11;
    private float rw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rw {
      get { return rw_; }
      set {
        rw_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 12;
    private float animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 14;
    private global::Com.Context.Grpc.QualityLevel quality_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.QualityLevel Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (NodeGroupId != other.NodeGroupId) return false;
      if (GltfId != other.GltfId) return false;
      if (Px != other.Px) return false;
      if (Py != other.Py) return false;
      if (Pz != other.Pz) return false;
      if (Rx != other.Rx) return false;
      if (Ry != other.Ry) return false;
      if (Rz != other.Rz) return false;
      if (Rw != other.Rw) return false;
      if (Animation != other.Animation) return false;
      if (Quality != other.Quality) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (NodeGroupId != 0) hash ^= NodeGroupId.GetHashCode();
      if (GltfId != 0) hash ^= GltfId.GetHashCode();
      if (Px != 0F) hash ^= Px.GetHashCode();
      if (Py != 0F) hash ^= Py.GetHashCode();
      if (Pz != 0F) hash ^= Pz.GetHashCode();
      if (Rx != 0F) hash ^= Rx.GetHashCode();
      if (Ry != 0F) hash ^= Ry.GetHashCode();
      if (Rz != 0F) hash ^= Rz.GetHashCode();
      if (Rw != 0F) hash ^= Rw.GetHashCode();
      if (Animation != 0F) hash ^= Animation.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (NodeGroupId != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(NodeGroupId);
      }
      if (GltfId != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(GltfId);
      }
      if (Px != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Rz);
      }
      if (Rw != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Rw);
      }
      if (Animation != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Animation);
      }
      if (Quality != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Quality);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (NodeGroupId != 0) {
        size += 1 + 4;
      }
      if (GltfId != 0) {
        size += 1 + 4;
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      if (Rx != 0F) {
        size += 1 + 4;
      }
      if (Ry != 0F) {
        size += 1 + 4;
      }
      if (Rz != 0F) {
        size += 1 + 4;
      }
      if (Rw != 0F) {
        size += 1 + 4;
      }
      if (Animation != 0F) {
        size += 1 + 4;
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Quality);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeEntity other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      if (other.NodeGroupId != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      if (other.GltfId != 0) {
        GltfId = other.GltfId;
      }
      if (other.Px != 0F) {
        Px = other.Px;
      }
      if (other.Py != 0F) {
        Py = other.Py;
      }
      if (other.Pz != 0F) {
        Pz = other.Pz;
      }
      if (other.Rx != 0F) {
        Rx = other.Rx;
      }
      if (other.Ry != 0F) {
        Ry = other.Ry;
      }
      if (other.Rz != 0F) {
        Rz = other.Rz;
      }
      if (other.Rw != 0F) {
        Rw = other.Rw;
      }
      if (other.Animation != 0F) {
        Animation = other.Animation;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 29: {
            NodeGroupId = input.ReadFixed32();
            break;
          }
          case 37: {
            GltfId = input.ReadFixed32();
            break;
          }
          case 45: {
            Px = input.ReadFloat();
            break;
          }
          case 53: {
            Py = input.ReadFloat();
            break;
          }
          case 61: {
            Pz = input.ReadFloat();
            break;
          }
          case 69: {
            Rx = input.ReadFloat();
            break;
          }
          case 77: {
            Ry = input.ReadFloat();
            break;
          }
          case 85: {
            Rz = input.ReadFloat();
            break;
          }
          case 93: {
            Rw = input.ReadFloat();
            break;
          }
          case 101: {
            Animation = input.ReadFloat();
            break;
          }
          case 112: {
            quality_ = (global::Com.Context.Grpc.QualityLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  DEPRECATED
  /// </summary>
  public sealed partial class NodeContext : pb::IMessage<NodeContext> {
    private static readonly pb::MessageParser<NodeContext> _parser = new pb::MessageParser<NodeContext>(() => new NodeContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeContext(NodeContext other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      Node = other.node_ != null ? other.Node.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeContext Clone() {
      return new NodeContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 3;
    private global::Com.Context.Grpc.Node node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (!object.Equals(Node, other.Node)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (node_ != null) hash ^= Node.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (node_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Node);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeContext other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::Com.Context.Grpc.Node();
        }
        Node.MergeFrom(other.Node);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            if (node_ == null) {
              node_ = new global::Com.Context.Grpc.Node();
            }
            input.ReadMessage(node_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      gltfId_ = other.gltfId_;
      px_ = other.px_;
      py_ = other.py_;
      pz_ = other.pz_;
      rx_ = other.rx_;
      ry_ = other.ry_;
      rz_ = other.rz_;
      rw_ = other.rw_;
      animation_ = other.animation_;
      quality_ = other.quality_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "nodeGroupId" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private uint nodeGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = value;
      }
    }

    /// <summary>Field number for the "gltfId" field.</summary>
    public const int GltfIdFieldNumber = 2;
    private uint gltfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GltfId {
      get { return gltfId_; }
      set {
        gltfId_ = value;
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 3;
    private float px_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 4;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 5;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 6;
    private float rx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 7;
    private float ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 8;
    private float rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    /// <summary>Field number for the "rw" field.</summary>
    public const int RwFieldNumber = 9;
    private float rw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rw {
      get { return rw_; }
      set {
        rw_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 10;
    private float animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 11;
    private global::Com.Context.Grpc.QualityLevel quality_ = 0;
    /// <summary>
    ///  repeated NodeParam params = 12;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.QualityLevel Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      if (GltfId != other.GltfId) return false;
      if (Px != other.Px) return false;
      if (Py != other.Py) return false;
      if (Pz != other.Pz) return false;
      if (Rx != other.Rx) return false;
      if (Ry != other.Ry) return false;
      if (Rz != other.Rz) return false;
      if (Rw != other.Rw) return false;
      if (Animation != other.Animation) return false;
      if (Quality != other.Quality) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId != 0) hash ^= NodeGroupId.GetHashCode();
      if (GltfId != 0) hash ^= GltfId.GetHashCode();
      if (Px != 0F) hash ^= Px.GetHashCode();
      if (Py != 0F) hash ^= Py.GetHashCode();
      if (Pz != 0F) hash ^= Pz.GetHashCode();
      if (Rx != 0F) hash ^= Rx.GetHashCode();
      if (Ry != 0F) hash ^= Ry.GetHashCode();
      if (Rz != 0F) hash ^= Rz.GetHashCode();
      if (Rw != 0F) hash ^= Rw.GetHashCode();
      if (Animation != 0F) hash ^= Animation.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(NodeGroupId);
      }
      if (GltfId != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(GltfId);
      }
      if (Px != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Rz);
      }
      if (Rw != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Rw);
      }
      if (Animation != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Animation);
      }
      if (Quality != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Quality);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId != 0) {
        size += 1 + 4;
      }
      if (GltfId != 0) {
        size += 1 + 4;
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      if (Rx != 0F) {
        size += 1 + 4;
      }
      if (Ry != 0F) {
        size += 1 + 4;
      }
      if (Rz != 0F) {
        size += 1 + 4;
      }
      if (Rw != 0F) {
        size += 1 + 4;
      }
      if (Animation != 0F) {
        size += 1 + 4;
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Quality);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      if (other.GltfId != 0) {
        GltfId = other.GltfId;
      }
      if (other.Px != 0F) {
        Px = other.Px;
      }
      if (other.Py != 0F) {
        Py = other.Py;
      }
      if (other.Pz != 0F) {
        Pz = other.Pz;
      }
      if (other.Rx != 0F) {
        Rx = other.Rx;
      }
      if (other.Ry != 0F) {
        Ry = other.Ry;
      }
      if (other.Rz != 0F) {
        Rz = other.Rz;
      }
      if (other.Rw != 0F) {
        Rw = other.Rw;
      }
      if (other.Animation != 0F) {
        Animation = other.Animation;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            NodeGroupId = input.ReadFixed32();
            break;
          }
          case 21: {
            GltfId = input.ReadFixed32();
            break;
          }
          case 29: {
            Px = input.ReadFloat();
            break;
          }
          case 37: {
            Py = input.ReadFloat();
            break;
          }
          case 45: {
            Pz = input.ReadFloat();
            break;
          }
          case 53: {
            Rx = input.ReadFloat();
            break;
          }
          case 61: {
            Ry = input.ReadFloat();
            break;
          }
          case 69: {
            Rz = input.ReadFloat();
            break;
          }
          case 77: {
            Rw = input.ReadFloat();
            break;
          }
          case 85: {
            Animation = input.ReadFloat();
            break;
          }
          case 88: {
            quality_ = (global::Com.Context.Grpc.QualityLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Text : pb::IMessage<Text> {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      id_ = other.id_;
      value_ = other.value_;
      fontSize_ = other.fontSize_;
      fontFamily_ = other.fontFamily_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontSize" field.</summary>
    public const int FontSizeFieldNumber = 3;
    private int fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "fontFamily" field.</summary>
    public const int FontFamilyFieldNumber = 4;
    private string fontFamily_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FontFamily {
      get { return fontFamily_; }
      set {
        fontFamily_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Value != other.Value) return false;
      if (FontSize != other.FontSize) return false;
      if (FontFamily != other.FontFamily) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (FontSize != 0) hash ^= FontSize.GetHashCode();
      if (FontFamily.Length != 0) hash ^= FontFamily.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (FontSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FontSize);
      }
      if (FontFamily.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FontFamily);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (FontSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontSize);
      }
      if (FontFamily.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FontFamily);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.FontSize != 0) {
        FontSize = other.FontSize;
      }
      if (other.FontFamily.Length != 0) {
        FontFamily = other.FontFamily;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            FontSize = input.ReadInt32();
            break;
          }
          case 34: {
            FontFamily = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Line : pb::IMessage<Line> {
    private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Line> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line(Line other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line Clone() {
      return new Line(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Line);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Line other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Line other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Plane : pb::IMessage<Plane> {
    private static readonly pb::MessageParser<Plane> _parser = new pb::MessageParser<Plane>(() => new Plane());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plane(Plane other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plane Clone() {
      return new Plane(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plane other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Button : pb::IMessage<Button> {
    private static readonly pb::MessageParser<Button> _parser = new pb::MessageParser<Button>(() => new Button());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Button> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Button() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Button(Button other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Button Clone() {
      return new Button(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Button);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Button other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Button other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Environment : pb::IMessage<Environment> {
    private static readonly pb::MessageParser<Environment> _parser = new pb::MessageParser<Environment>(() => new Environment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Environment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Environment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Environment(Environment other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Environment Clone() {
      return new Environment(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Environment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Environment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Environment other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BinaryContext : pb::IMessage<BinaryContext> {
    private static readonly pb::MessageParser<BinaryContext> _parser = new pb::MessageParser<BinaryContext>(() => new BinaryContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinaryContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryContext(BinaryContext other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryContext Clone() {
      return new BinaryContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinaryContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinaryContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinaryContext other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  DEPRECATED
  /// </summary>
  public sealed partial class ImageContext : pb::IMessage<ImageContext> {
    private static readonly pb::MessageParser<ImageContext> _parser = new pb::MessageParser<ImageContext>(() => new ImageContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContext(ImageContext other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      Image = other.image_ != null ? other.Image.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageContext Clone() {
      return new ImageContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::Com.Context.Grpc.Image image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageContext other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::Com.Context.Grpc.Image();
        }
        Image.MergeFrom(other.Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            if (image_ == null) {
              image_ = new global::Com.Context.Grpc.Image();
            }
            input.ReadMessage(image_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      mimeType_ = other.mimeType_;
      bytes_ = other.bytes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "mimeType" field.</summary>
    public const int MimeTypeFieldNumber = 1;
    private string mimeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MimeType {
      get { return mimeType_; }
      set {
        mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes" field.</summary>
    public const int BytesFieldNumber = 2;
    private pb::ByteString bytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytes {
      get { return bytes_; }
      set {
        bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MimeType != other.MimeType) return false;
      if (Bytes != other.Bytes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MimeType.Length != 0) hash ^= MimeType.GetHashCode();
      if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MimeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MimeType);
      }
      if (Bytes.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MimeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MimeType);
      }
      if (Bytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.MimeType.Length != 0) {
        MimeType = other.MimeType;
      }
      if (other.Bytes.Length != 0) {
        Bytes = other.Bytes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MimeType = input.ReadString();
            break;
          }
          case 18: {
            Bytes = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  DEPRECATED
  /// </summary>
  public sealed partial class NodeGroupContext : pb::IMessage<NodeGroupContext> {
    private static readonly pb::MessageParser<NodeGroupContext> _parser = new pb::MessageParser<NodeGroupContext>(() => new NodeGroupContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupContext(NodeGroupContext other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      NodeGroup = other.nodeGroup_ != null ? other.NodeGroup.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupContext Clone() {
      return new NodeGroupContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "nodeGroup" field.</summary>
    public const int NodeGroupFieldNumber = 3;
    private global::Com.Context.Grpc.NodeGroup nodeGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.NodeGroup NodeGroup {
      get { return nodeGroup_; }
      set {
        nodeGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (!object.Equals(NodeGroup, other.NodeGroup)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (nodeGroup_ != null) hash ^= NodeGroup.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (nodeGroup_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NodeGroup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (nodeGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeGroup);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupContext other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      if (other.nodeGroup_ != null) {
        if (nodeGroup_ == null) {
          nodeGroup_ = new global::Com.Context.Grpc.NodeGroup();
        }
        NodeGroup.MergeFrom(other.NodeGroup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            if (nodeGroup_ == null) {
              nodeGroup_ = new global::Com.Context.Grpc.NodeGroup();
            }
            input.ReadMessage(nodeGroup_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeGroup : pb::IMessage<NodeGroup> {
    private static readonly pb::MessageParser<NodeGroup> _parser = new pb::MessageParser<NodeGroup>(() => new NodeGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup(NodeGroup other) : this() {
      gltfId_ = other.gltfId_;
      nodeName_ = other.nodeName_;
      shader_ = other.shader_;
      gltfIds_ = other.gltfIds_.Clone();
      defaultGltfIndex_ = other.defaultGltfIndex_;
      highResolutionGltfIndex_ = other.highResolutionGltfIndex_;
      viewImportance_ = other.viewImportance_;
      gltfFilepath_ = other.gltfFilepath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup Clone() {
      return new NodeGroup(this);
    }

    /// <summary>Field number for the "gltfId" field.</summary>
    public const int GltfIdFieldNumber = 1;
    private uint gltfId_;
    /// <summary>
    ///  ??? nur Debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GltfId {
      get { return gltfId_; }
      set {
        gltfId_ = value;
      }
    }

    /// <summary>Field number for the "nodeName" field.</summary>
    public const int NodeNameFieldNumber = 2;
    private string nodeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shader" field.</summary>
    public const int ShaderFieldNumber = 3;
    private global::Com.Context.Grpc.ShaderType shader_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.ShaderType Shader {
      get { return shader_; }
      set {
        shader_ = value;
      }
    }

    /// <summary>Field number for the "gltfIds" field.</summary>
    public const int GltfIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_gltfIds_codec
        = pb::FieldCodec.ForFixed32(34);
    private readonly pbc::RepeatedField<uint> gltfIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GltfIds {
      get { return gltfIds_; }
    }

    /// <summary>Field number for the "defaultGltfIndex" field.</summary>
    public const int DefaultGltfIndexFieldNumber = 5;
    private uint defaultGltfIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultGltfIndex {
      get { return defaultGltfIndex_; }
      set {
        defaultGltfIndex_ = value;
      }
    }

    /// <summary>Field number for the "highResolutionGltfIndex" field.</summary>
    public const int HighResolutionGltfIndexFieldNumber = 6;
    private uint highResolutionGltfIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighResolutionGltfIndex {
      get { return highResolutionGltfIndex_; }
      set {
        highResolutionGltfIndex_ = value;
      }
    }

    /// <summary>Field number for the "viewImportance" field.</summary>
    public const int ViewImportanceFieldNumber = 7;
    private uint viewImportance_;
    /// <summary>
    ///  Wichtigkeit der Darstellung: z.B. Grass unwichtig, Baum wichtiger, Character am wichtigsten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ViewImportance {
      get { return viewImportance_; }
      set {
        viewImportance_ = value;
      }
    }

    /// <summary>Field number for the "gltfFilepath" field.</summary>
    public const int GltfFilepathFieldNumber = 8;
    private string gltfFilepath_ = "";
    /// <summary>
    ///  nur Debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GltfFilepath {
      get { return gltfFilepath_; }
      set {
        gltfFilepath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GltfId != other.GltfId) return false;
      if (NodeName != other.NodeName) return false;
      if (Shader != other.Shader) return false;
      if(!gltfIds_.Equals(other.gltfIds_)) return false;
      if (DefaultGltfIndex != other.DefaultGltfIndex) return false;
      if (HighResolutionGltfIndex != other.HighResolutionGltfIndex) return false;
      if (ViewImportance != other.ViewImportance) return false;
      if (GltfFilepath != other.GltfFilepath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GltfId != 0) hash ^= GltfId.GetHashCode();
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (Shader != 0) hash ^= Shader.GetHashCode();
      hash ^= gltfIds_.GetHashCode();
      if (DefaultGltfIndex != 0) hash ^= DefaultGltfIndex.GetHashCode();
      if (HighResolutionGltfIndex != 0) hash ^= HighResolutionGltfIndex.GetHashCode();
      if (ViewImportance != 0) hash ^= ViewImportance.GetHashCode();
      if (GltfFilepath.Length != 0) hash ^= GltfFilepath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GltfId != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(GltfId);
      }
      if (NodeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NodeName);
      }
      if (Shader != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Shader);
      }
      gltfIds_.WriteTo(output, _repeated_gltfIds_codec);
      if (DefaultGltfIndex != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DefaultGltfIndex);
      }
      if (HighResolutionGltfIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HighResolutionGltfIndex);
      }
      if (ViewImportance != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ViewImportance);
      }
      if (GltfFilepath.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GltfFilepath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GltfId != 0) {
        size += 1 + 4;
      }
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (Shader != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shader);
      }
      size += gltfIds_.CalculateSize(_repeated_gltfIds_codec);
      if (DefaultGltfIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultGltfIndex);
      }
      if (HighResolutionGltfIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighResolutionGltfIndex);
      }
      if (ViewImportance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ViewImportance);
      }
      if (GltfFilepath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GltfFilepath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroup other) {
      if (other == null) {
        return;
      }
      if (other.GltfId != 0) {
        GltfId = other.GltfId;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      if (other.Shader != 0) {
        Shader = other.Shader;
      }
      gltfIds_.Add(other.gltfIds_);
      if (other.DefaultGltfIndex != 0) {
        DefaultGltfIndex = other.DefaultGltfIndex;
      }
      if (other.HighResolutionGltfIndex != 0) {
        HighResolutionGltfIndex = other.HighResolutionGltfIndex;
      }
      if (other.ViewImportance != 0) {
        ViewImportance = other.ViewImportance;
      }
      if (other.GltfFilepath.Length != 0) {
        GltfFilepath = other.GltfFilepath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            GltfId = input.ReadFixed32();
            break;
          }
          case 18: {
            NodeName = input.ReadString();
            break;
          }
          case 24: {
            shader_ = (global::Com.Context.Grpc.ShaderType) input.ReadEnum();
            break;
          }
          case 34:
          case 37: {
            gltfIds_.AddEntriesFrom(input, _repeated_gltfIds_codec);
            break;
          }
          case 40: {
            DefaultGltfIndex = input.ReadUInt32();
            break;
          }
          case 48: {
            HighResolutionGltfIndex = input.ReadUInt32();
            break;
          }
          case 56: {
            ViewImportance = input.ReadUInt32();
            break;
          }
          case 66: {
            GltfFilepath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeGroupEntity : pb::IMessage<NodeGroupEntity> {
    private static readonly pb::MessageParser<NodeGroupEntity> _parser = new pb::MessageParser<NodeGroupEntity>(() => new NodeGroupEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupEntity(NodeGroupEntity other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      gltfId_ = other.gltfId_;
      nodeName_ = other.nodeName_;
      shader_ = other.shader_;
      gltfIds_ = other.gltfIds_.Clone();
      defaultGltfIndex_ = other.defaultGltfIndex_;
      highResolutionGltfIndex_ = other.highResolutionGltfIndex_;
      viewImportance_ = other.viewImportance_;
      gltfFilepath_ = other.gltfFilepath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupEntity Clone() {
      return new NodeGroupEntity(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "gltfId" field.</summary>
    public const int GltfIdFieldNumber = 3;
    private uint gltfId_;
    /// <summary>
    ///  ??? nur Debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GltfId {
      get { return gltfId_; }
      set {
        gltfId_ = value;
      }
    }

    /// <summary>Field number for the "nodeName" field.</summary>
    public const int NodeNameFieldNumber = 4;
    private string nodeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shader" field.</summary>
    public const int ShaderFieldNumber = 5;
    private global::Com.Context.Grpc.ShaderType shader_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.ShaderType Shader {
      get { return shader_; }
      set {
        shader_ = value;
      }
    }

    /// <summary>Field number for the "gltfIds" field.</summary>
    public const int GltfIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_gltfIds_codec
        = pb::FieldCodec.ForFixed32(50);
    private readonly pbc::RepeatedField<uint> gltfIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GltfIds {
      get { return gltfIds_; }
    }

    /// <summary>Field number for the "defaultGltfIndex" field.</summary>
    public const int DefaultGltfIndexFieldNumber = 7;
    private uint defaultGltfIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefaultGltfIndex {
      get { return defaultGltfIndex_; }
      set {
        defaultGltfIndex_ = value;
      }
    }

    /// <summary>Field number for the "highResolutionGltfIndex" field.</summary>
    public const int HighResolutionGltfIndexFieldNumber = 8;
    private uint highResolutionGltfIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighResolutionGltfIndex {
      get { return highResolutionGltfIndex_; }
      set {
        highResolutionGltfIndex_ = value;
      }
    }

    /// <summary>Field number for the "viewImportance" field.</summary>
    public const int ViewImportanceFieldNumber = 9;
    private uint viewImportance_;
    /// <summary>
    ///  Wichtigkeit der Darstellung: z.B. Grass unwichtig, Baum wichtiger, Character am wichtigsten
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ViewImportance {
      get { return viewImportance_; }
      set {
        viewImportance_ = value;
      }
    }

    /// <summary>Field number for the "gltfFilepath" field.</summary>
    public const int GltfFilepathFieldNumber = 10;
    private string gltfFilepath_ = "";
    /// <summary>
    ///  nur Debug
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GltfFilepath {
      get { return gltfFilepath_; }
      set {
        gltfFilepath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (GltfId != other.GltfId) return false;
      if (NodeName != other.NodeName) return false;
      if (Shader != other.Shader) return false;
      if(!gltfIds_.Equals(other.gltfIds_)) return false;
      if (DefaultGltfIndex != other.DefaultGltfIndex) return false;
      if (HighResolutionGltfIndex != other.HighResolutionGltfIndex) return false;
      if (ViewImportance != other.ViewImportance) return false;
      if (GltfFilepath != other.GltfFilepath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (GltfId != 0) hash ^= GltfId.GetHashCode();
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (Shader != 0) hash ^= Shader.GetHashCode();
      hash ^= gltfIds_.GetHashCode();
      if (DefaultGltfIndex != 0) hash ^= DefaultGltfIndex.GetHashCode();
      if (HighResolutionGltfIndex != 0) hash ^= HighResolutionGltfIndex.GetHashCode();
      if (ViewImportance != 0) hash ^= ViewImportance.GetHashCode();
      if (GltfFilepath.Length != 0) hash ^= GltfFilepath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (GltfId != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(GltfId);
      }
      if (NodeName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NodeName);
      }
      if (Shader != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Shader);
      }
      gltfIds_.WriteTo(output, _repeated_gltfIds_codec);
      if (DefaultGltfIndex != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(DefaultGltfIndex);
      }
      if (HighResolutionGltfIndex != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(HighResolutionGltfIndex);
      }
      if (ViewImportance != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ViewImportance);
      }
      if (GltfFilepath.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GltfFilepath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (GltfId != 0) {
        size += 1 + 4;
      }
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (Shader != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shader);
      }
      size += gltfIds_.CalculateSize(_repeated_gltfIds_codec);
      if (DefaultGltfIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultGltfIndex);
      }
      if (HighResolutionGltfIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighResolutionGltfIndex);
      }
      if (ViewImportance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ViewImportance);
      }
      if (GltfFilepath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GltfFilepath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupEntity other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      if (other.GltfId != 0) {
        GltfId = other.GltfId;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      if (other.Shader != 0) {
        Shader = other.Shader;
      }
      gltfIds_.Add(other.gltfIds_);
      if (other.DefaultGltfIndex != 0) {
        DefaultGltfIndex = other.DefaultGltfIndex;
      }
      if (other.HighResolutionGltfIndex != 0) {
        HighResolutionGltfIndex = other.HighResolutionGltfIndex;
      }
      if (other.ViewImportance != 0) {
        ViewImportance = other.ViewImportance;
      }
      if (other.GltfFilepath.Length != 0) {
        GltfFilepath = other.GltfFilepath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 29: {
            GltfId = input.ReadFixed32();
            break;
          }
          case 34: {
            NodeName = input.ReadString();
            break;
          }
          case 40: {
            shader_ = (global::Com.Context.Grpc.ShaderType) input.ReadEnum();
            break;
          }
          case 50:
          case 53: {
            gltfIds_.AddEntriesFrom(input, _repeated_gltfIds_codec);
            break;
          }
          case 56: {
            DefaultGltfIndex = input.ReadUInt32();
            break;
          }
          case 64: {
            HighResolutionGltfIndex = input.ReadUInt32();
            break;
          }
          case 72: {
            ViewImportance = input.ReadUInt32();
            break;
          }
          case 82: {
            GltfFilepath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LinearTranslation : pb::IMessage<LinearTranslation> {
    private static readonly pb::MessageParser<LinearTranslation> _parser = new pb::MessageParser<LinearTranslation>(() => new LinearTranslation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinearTranslation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearTranslation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearTranslation(LinearTranslation other) : this() {
      id_ = other.id_;
      nodeId_ = other.nodeId_;
      dx_ = other.dx_;
      dy_ = other.dy_;
      dz_ = other.dz_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinearTranslation Clone() {
      return new LinearTranslation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "dx" field.</summary>
    public const int DxFieldNumber = 3;
    private float dx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dx {
      get { return dx_; }
      set {
        dx_ = value;
      }
    }

    /// <summary>Field number for the "dy" field.</summary>
    public const int DyFieldNumber = 4;
    private float dy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dy {
      get { return dy_; }
      set {
        dy_ = value;
      }
    }

    /// <summary>Field number for the "dz" field.</summary>
    public const int DzFieldNumber = 5;
    private float dz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dz {
      get { return dz_; }
      set {
        dz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinearTranslation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinearTranslation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NodeId != other.NodeId) return false;
      if (Dx != other.Dx) return false;
      if (Dy != other.Dy) return false;
      if (Dz != other.Dz) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (NodeId != 0) hash ^= NodeId.GetHashCode();
      if (Dx != 0F) hash ^= Dx.GetHashCode();
      if (Dy != 0F) hash ^= Dy.GetHashCode();
      if (Dz != 0F) hash ^= Dz.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (NodeId != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(NodeId);
      }
      if (Dx != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Dx);
      }
      if (Dy != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Dy);
      }
      if (Dz != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Dz);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (NodeId != 0) {
        size += 1 + 4;
      }
      if (Dx != 0F) {
        size += 1 + 4;
      }
      if (Dy != 0F) {
        size += 1 + 4;
      }
      if (Dz != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinearTranslation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.NodeId != 0) {
        NodeId = other.NodeId;
      }
      if (other.Dx != 0F) {
        Dx = other.Dx;
      }
      if (other.Dy != 0F) {
        Dy = other.Dy;
      }
      if (other.Dz != 0F) {
        Dz = other.Dz;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 21: {
            NodeId = input.ReadFixed32();
            break;
          }
          case 29: {
            Dx = input.ReadFloat();
            break;
          }
          case 37: {
            Dy = input.ReadFloat();
            break;
          }
          case 45: {
            Dz = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NonLinearTranslation : pb::IMessage<NonLinearTranslation> {
    private static readonly pb::MessageParser<NonLinearTranslation> _parser = new pb::MessageParser<NonLinearTranslation>(() => new NonLinearTranslation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NonLinearTranslation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonLinearTranslation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonLinearTranslation(NonLinearTranslation other) : this() {
      id_ = other.id_;
      nodeId_ = other.nodeId_;
      dt_ = other.dt_;
      dx_ = other.dx_.Clone();
      dy_ = other.dy_.Clone();
      dz_ = other.dz_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonLinearTranslation Clone() {
      return new NonLinearTranslation(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "dt" field.</summary>
    public const int DtFieldNumber = 3;
    private float dt_;
    /// <summary>
    ///  timestep in ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dt {
      get { return dt_; }
      set {
        dt_ = value;
      }
    }

    /// <summary>Field number for the "dx" field.</summary>
    public const int DxFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_dx_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> dx_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Dx {
      get { return dx_; }
    }

    /// <summary>Field number for the "dy" field.</summary>
    public const int DyFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_dy_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> dy_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Dy {
      get { return dy_; }
    }

    /// <summary>Field number for the "dz" field.</summary>
    public const int DzFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_dz_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> dz_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Dz {
      get { return dz_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NonLinearTranslation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NonLinearTranslation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NodeId != other.NodeId) return false;
      if (Dt != other.Dt) return false;
      if(!dx_.Equals(other.dx_)) return false;
      if(!dy_.Equals(other.dy_)) return false;
      if(!dz_.Equals(other.dz_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (NodeId != 0) hash ^= NodeId.GetHashCode();
      if (Dt != 0F) hash ^= Dt.GetHashCode();
      hash ^= dx_.GetHashCode();
      hash ^= dy_.GetHashCode();
      hash ^= dz_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (NodeId != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(NodeId);
      }
      if (Dt != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Dt);
      }
      dx_.WriteTo(output, _repeated_dx_codec);
      dy_.WriteTo(output, _repeated_dy_codec);
      dz_.WriteTo(output, _repeated_dz_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (NodeId != 0) {
        size += 1 + 4;
      }
      if (Dt != 0F) {
        size += 1 + 4;
      }
      size += dx_.CalculateSize(_repeated_dx_codec);
      size += dy_.CalculateSize(_repeated_dy_codec);
      size += dz_.CalculateSize(_repeated_dz_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NonLinearTranslation other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.NodeId != 0) {
        NodeId = other.NodeId;
      }
      if (other.Dt != 0F) {
        Dt = other.Dt;
      }
      dx_.Add(other.dx_);
      dy_.Add(other.dy_);
      dz_.Add(other.dz_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 21: {
            NodeId = input.ReadFixed32();
            break;
          }
          case 29: {
            Dt = input.ReadFloat();
            break;
          }
          case 34:
          case 37: {
            dx_.AddEntriesFrom(input, _repeated_dx_codec);
            break;
          }
          case 42:
          case 45: {
            dy_.AddEntriesFrom(input, _repeated_dy_codec);
            break;
          }
          case 50:
          case 53: {
            dz_.AddEntriesFrom(input, _repeated_dz_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Script : pb::IMessage<Script> {
    private static readonly pb::MessageParser<Script> _parser = new pb::MessageParser<Script>(() => new Script());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Script> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script(Script other) : this() {
      nodeId_ = other.nodeId_;
      script_ = other.script_;
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script Clone() {
      return new Script(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private uint nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int Script_FieldNumber = 2;
    private global::Com.Context.Grpc.ScriptEnum script_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.ScriptEnum Script_ {
      get { return script_; }
      set {
        script_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Script);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Script other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (Script_ != other.Script_) return false;
      if (!Params.Equals(other.Params)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0) hash ^= NodeId.GetHashCode();
      if (Script_ != 0) hash ^= Script_.GetHashCode();
      hash ^= Params.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(NodeId);
      }
      if (Script_ != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Script_);
      }
      params_.WriteTo(output, _map_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0) {
        size += 1 + 4;
      }
      if (Script_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Script_);
      }
      size += params_.CalculateSize(_map_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Script other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0) {
        NodeId = other.NodeId;
      }
      if (other.Script_ != 0) {
        Script_ = other.Script_;
      }
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            NodeId = input.ReadFixed32();
            break;
          }
          case 16: {
            script_ = (global::Com.Context.Grpc.ScriptEnum) input.ReadEnum();
            break;
          }
          case 26: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  DEPRECATED
  /// </summary>
  public sealed partial class ScriptContext : pb::IMessage<ScriptContext> {
    private static readonly pb::MessageParser<ScriptContext> _parser = new pb::MessageParser<ScriptContext>(() => new ScriptContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScriptContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptContext(ScriptContext other) : this() {
      id_ = other.id_;
      params_ = other.params_.Clone();
      Script = other.script_ != null ? other.Script.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptContext Clone() {
      return new ScriptContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_params_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> params_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 3;
    private global::Com.Context.Grpc.Script script_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.Script Script {
      get { return script_; }
      set {
        script_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScriptContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScriptContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Params.Equals(other.Params)) return false;
      if (!object.Equals(Script, other.Script)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= Params.GetHashCode();
      if (script_ != null) hash ^= Script.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      params_.WriteTo(output, _map_params_codec);
      if (script_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Script);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += params_.CalculateSize(_map_params_codec);
      if (script_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScriptContext other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      params_.Add(other.params_);
      if (other.script_ != null) {
        if (script_ == null) {
          script_ = new global::Com.Context.Grpc.Script();
        }
        Script.MergeFrom(other.Script);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
          case 26: {
            if (script_ == null) {
              script_ = new global::Com.Context.Grpc.Script();
            }
            input.ReadMessage(script_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeGroupList : pb::IMessage<NodeGroupList> {
    private static readonly pb::MessageParser<NodeGroupList> _parser = new pb::MessageParser<NodeGroupList>(() => new NodeGroupList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupList(NodeGroupList other) : this() {
      id_ = other.id_;
      nodeGroups_ = other.nodeGroups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupList Clone() {
      return new NodeGroupList(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nodeGroups" field.</summary>
    public const int NodeGroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.NodeGroupContext> _repeated_nodeGroups_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Context.Grpc.NodeGroupContext.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.NodeGroupContext> nodeGroups_ = new pbc::RepeatedField<global::Com.Context.Grpc.NodeGroupContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.NodeGroupContext> NodeGroups {
      get { return nodeGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!nodeGroups_.Equals(other.nodeGroups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= nodeGroups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      nodeGroups_.WriteTo(output, _repeated_nodeGroups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += nodeGroups_.CalculateSize(_repeated_nodeGroups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupList other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      nodeGroups_.Add(other.nodeGroups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            nodeGroups_.AddEntriesFrom(input, _repeated_nodeGroups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeList : pb::IMessage<NodeList> {
    private static readonly pb::MessageParser<NodeList> _parser = new pb::MessageParser<NodeList>(() => new NodeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeList(NodeList other) : this() {
      id_ = other.id_;
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeList Clone() {
      return new NodeList(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.NodeContext> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Context.Grpc.NodeContext.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.NodeContext> nodes_ = new pbc::RepeatedField<global::Com.Context.Grpc.NodeContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.NodeContext> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeList other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdentList : pb::IMessage<IdentList> {
    private static readonly pb::MessageParser<IdentList> _parser = new pb::MessageParser<IdentList>(() => new IdentList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentList(IdentList other) : this() {
      id_ = other.id_;
      identIds_ = other.identIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentList Clone() {
      return new IdentList(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "identIds" field.</summary>
    public const int IdentIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_identIds_codec
        = pb::FieldCodec.ForFixed32(18);
    private readonly pbc::RepeatedField<uint> identIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> IdentIds {
      get { return identIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!identIds_.Equals(other.identIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= identIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      identIds_.WriteTo(output, _repeated_identIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      size += identIds_.CalculateSize(_repeated_identIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentList other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      identIds_.Add(other.identIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 18:
          case 21: {
            identIds_.AddEntriesFrom(input, _repeated_identIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cam : pb::IMessage<Cam> {
    private static readonly pb::MessageParser<Cam> _parser = new pb::MessageParser<Cam>(() => new Cam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cam(Cam other) : this() {
      id_ = other.id_;
      px_ = other.px_;
      py_ = other.py_;
      pz_ = other.pz_;
      rx_ = other.rx_;
      ry_ = other.ry_;
      rz_ = other.rz_;
      fov_ = other.fov_;
      zNear_ = other.zNear_;
      zFar_ = other.zFar_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cam Clone() {
      return new Cam(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 2;
    private float px_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 3;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 4;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 5;
    private float rx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 6;
    private float ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 7;
    private float rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    /// <summary>Field number for the "fov" field.</summary>
    public const int FovFieldNumber = 8;
    private float fov_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fov {
      get { return fov_; }
      set {
        fov_ = value;
      }
    }

    /// <summary>Field number for the "zNear" field.</summary>
    public const int ZNearFieldNumber = 9;
    private float zNear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZNear {
      get { return zNear_; }
      set {
        zNear_ = value;
      }
    }

    /// <summary>Field number for the "zFar" field.</summary>
    public const int ZFarFieldNumber = 10;
    private float zFar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZFar {
      get { return zFar_; }
      set {
        zFar_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private global::Com.Context.Grpc.CamType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Context.Grpc.CamType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Px != other.Px) return false;
      if (Py != other.Py) return false;
      if (Pz != other.Pz) return false;
      if (Rx != other.Rx) return false;
      if (Ry != other.Ry) return false;
      if (Rz != other.Rz) return false;
      if (Fov != other.Fov) return false;
      if (ZNear != other.ZNear) return false;
      if (ZFar != other.ZFar) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Px != 0F) hash ^= Px.GetHashCode();
      if (Py != 0F) hash ^= Py.GetHashCode();
      if (Pz != 0F) hash ^= Pz.GetHashCode();
      if (Rx != 0F) hash ^= Rx.GetHashCode();
      if (Ry != 0F) hash ^= Ry.GetHashCode();
      if (Rz != 0F) hash ^= Rz.GetHashCode();
      if (Fov != 0F) hash ^= Fov.GetHashCode();
      if (ZNear != 0F) hash ^= ZNear.GetHashCode();
      if (ZFar != 0F) hash ^= ZFar.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (Px != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rz);
      }
      if (Fov != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Fov);
      }
      if (ZNear != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ZNear);
      }
      if (ZFar != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ZFar);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      if (Rx != 0F) {
        size += 1 + 4;
      }
      if (Ry != 0F) {
        size += 1 + 4;
      }
      if (Rz != 0F) {
        size += 1 + 4;
      }
      if (Fov != 0F) {
        size += 1 + 4;
      }
      if (ZNear != 0F) {
        size += 1 + 4;
      }
      if (ZFar != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Px != 0F) {
        Px = other.Px;
      }
      if (other.Py != 0F) {
        Py = other.Py;
      }
      if (other.Pz != 0F) {
        Pz = other.Pz;
      }
      if (other.Rx != 0F) {
        Rx = other.Rx;
      }
      if (other.Ry != 0F) {
        Ry = other.Ry;
      }
      if (other.Rz != 0F) {
        Rz = other.Rz;
      }
      if (other.Fov != 0F) {
        Fov = other.Fov;
      }
      if (other.ZNear != 0F) {
        ZNear = other.ZNear;
      }
      if (other.ZFar != 0F) {
        ZFar = other.ZFar;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 21: {
            Px = input.ReadFloat();
            break;
          }
          case 29: {
            Py = input.ReadFloat();
            break;
          }
          case 37: {
            Pz = input.ReadFloat();
            break;
          }
          case 45: {
            Rx = input.ReadFloat();
            break;
          }
          case 53: {
            Ry = input.ReadFloat();
            break;
          }
          case 61: {
            Rz = input.ReadFloat();
            break;
          }
          case 69: {
            Fov = input.ReadFloat();
            break;
          }
          case 77: {
            ZNear = input.ReadFloat();
            break;
          }
          case 85: {
            ZFar = input.ReadFloat();
            break;
          }
          case 88: {
            type_ = (global::Com.Context.Grpc.CamType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GltfContext : pb::IMessage<GltfContext> {
    private static readonly pb::MessageParser<GltfContext> _parser = new pb::MessageParser<GltfContext>(() => new GltfContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GltfContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Context.Grpc.ContextEngineReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GltfContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GltfContext(GltfContext other) : this() {
      nodes_ = other.nodes_.Clone();
      linearTranslations_ = other.linearTranslations_.Clone();
      nonLinearTranslations_ = other.nonLinearTranslations_.Clone();
      scripts_ = other.scripts_.Clone();
      files_ = other.files_.Clone();
      singleElmnts_ = other.singleElmnts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GltfContext Clone() {
      return new GltfContext(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.NodeContext> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Context.Grpc.NodeContext.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.NodeContext> nodes_ = new pbc::RepeatedField<global::Com.Context.Grpc.NodeContext>();
    /// <summary>
    ///  DEPRECATED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.NodeContext> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "linearTranslations" field.</summary>
    public const int LinearTranslationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.LinearTranslation> _repeated_linearTranslations_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Context.Grpc.LinearTranslation.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.LinearTranslation> linearTranslations_ = new pbc::RepeatedField<global::Com.Context.Grpc.LinearTranslation>();
    /// <summary>
    ///  linear bewegende nodes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.LinearTranslation> LinearTranslations {
      get { return linearTranslations_; }
    }

    /// <summary>Field number for the "nonLinearTranslations" field.</summary>
    public const int NonLinearTranslationsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.NonLinearTranslation> _repeated_nonLinearTranslations_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Context.Grpc.NonLinearTranslation.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.NonLinearTranslation> nonLinearTranslations_ = new pbc::RepeatedField<global::Com.Context.Grpc.NonLinearTranslation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.NonLinearTranslation> NonLinearTranslations {
      get { return nonLinearTranslations_; }
    }

    /// <summary>Field number for the "scripts" field.</summary>
    public const int ScriptsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.ScriptContext> _repeated_scripts_codec
        = pb::FieldCodec.ForMessage(34, global::Com.Context.Grpc.ScriptContext.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.ScriptContext> scripts_ = new pbc::RepeatedField<global::Com.Context.Grpc.ScriptContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.ScriptContext> Scripts {
      get { return scripts_; }
    }

    /// <summary>Field number for the "files" field.</summary>
    public const int FilesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.FileContext> _repeated_files_codec
        = pb::FieldCodec.ForMessage(42, global::Com.Context.Grpc.FileContext.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.FileContext> files_ = new pbc::RepeatedField<global::Com.Context.Grpc.FileContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.FileContext> Files {
      get { return files_; }
    }

    /// <summary>Field number for the "singleElmnts" field.</summary>
    public const int SingleElmntsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.SingleContext> _repeated_singleElmnts_codec
        = pb::FieldCodec.ForMessage(58, global::Com.Context.Grpc.SingleContext.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.SingleContext> singleElmnts_ = new pbc::RepeatedField<global::Com.Context.Grpc.SingleContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.SingleContext> SingleElmnts {
      get { return singleElmnts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GltfContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GltfContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!linearTranslations_.Equals(other.linearTranslations_)) return false;
      if(!nonLinearTranslations_.Equals(other.nonLinearTranslations_)) return false;
      if(!scripts_.Equals(other.scripts_)) return false;
      if(!files_.Equals(other.files_)) return false;
      if(!singleElmnts_.Equals(other.singleElmnts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      hash ^= linearTranslations_.GetHashCode();
      hash ^= nonLinearTranslations_.GetHashCode();
      hash ^= scripts_.GetHashCode();
      hash ^= files_.GetHashCode();
      hash ^= singleElmnts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      linearTranslations_.WriteTo(output, _repeated_linearTranslations_codec);
      nonLinearTranslations_.WriteTo(output, _repeated_nonLinearTranslations_codec);
      scripts_.WriteTo(output, _repeated_scripts_codec);
      files_.WriteTo(output, _repeated_files_codec);
      singleElmnts_.WriteTo(output, _repeated_singleElmnts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += linearTranslations_.CalculateSize(_repeated_linearTranslations_codec);
      size += nonLinearTranslations_.CalculateSize(_repeated_nonLinearTranslations_codec);
      size += scripts_.CalculateSize(_repeated_scripts_codec);
      size += files_.CalculateSize(_repeated_files_codec);
      size += singleElmnts_.CalculateSize(_repeated_singleElmnts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GltfContext other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      linearTranslations_.Add(other.linearTranslations_);
      nonLinearTranslations_.Add(other.nonLinearTranslations_);
      scripts_.Add(other.scripts_);
      files_.Add(other.files_);
      singleElmnts_.Add(other.singleElmnts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            linearTranslations_.AddEntriesFrom(input, _repeated_linearTranslations_codec);
            break;
          }
          case 26: {
            nonLinearTranslations_.AddEntriesFrom(input, _repeated_nonLinearTranslations_codec);
            break;
          }
          case 34: {
            scripts_.AddEntriesFrom(input, _repeated_scripts_codec);
            break;
          }
          case 42: {
            files_.AddEntriesFrom(input, _repeated_files_codec);
            break;
          }
          case 58: {
            singleElmnts_.AddEntriesFrom(input, _repeated_singleElmnts_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
