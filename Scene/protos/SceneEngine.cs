// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sceneEngine.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Scene.Grpc {

  /// <summary>Holder for reflection information generated from sceneEngine.proto</summary>
  public static partial class SceneEngineReflection {

    #region Descriptor
    /// <summary>File descriptor for sceneEngine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneEngineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFzY2VuZUVuZ2luZS5wcm90bxIOY29tLnNjZW5lLmdycGMaDWNvbW1vbjIu",
            "cHJvdG8aE2NvbnRleHRFbmdpbmUucHJvdG8iKwoJSW5pdFNjZW5lEgoKAmlk",
            "GAEgASgHEhIKCnJzY1NjZW5lSWQYAiABKAci6QEKC1N5c3RlbU1vZGVsEgoK",
            "AmlkGAEgASgHEiQKBXN0YXRlGAIgASgOMhUuY29tLnNjZW5lLmdycGMuU3Rh",
            "dGUSDwoHbG9iYnlJZBgDIAEoBxISCgpyc2NTY2VuZUlkGAQgASgHEhQKDGNo",
            "aWxkSXRlbUlkcxgFIAMoBxIWCg5jaGlsZEF2YXRhcklkcxgGIAMoBxISCgpj",
            "aGlsZE1hcElkGAcgASgHEhQKDGNoaWxkVXNlcklkcxgIIAMoBxIWCg5jaGls",
            "ZFNlbnNvcklkcxgJIAMoBxITCgtjaGlsZE5QQ0lkcxgKIAMoByI+Cg9TeXN0",
            "ZW1Nb2RlbExpc3QSKwoGbW9kZWxzGAEgAygLMhsuY29tLnNjZW5lLmdycGMu",
            "U3lzdGVtTW9kZWwiqgEKA0NhbRIKCgJpZBgBIAEoBxIKCgJweBgCIAEoAhIK",
            "CgJweRgDIAEoAhIKCgJwehgEIAEoAhIKCgJyeBgFIAEoAhIKCgJyeRgGIAEo",
            "AhIKCgJyehgHIAEoAhILCgNmb3YYCCABKAISDQoFek5lYXIYCSABKAISDAoE",
            "ekZhchgKIAEoAhIlCgR0eXBlGAsgASgOMhcuY29tLnNjZW5lLmdycGMuQ2Ft",
            "VHlwZSJwCg5WaWV3UG9ydEVsbW50cxIgCgNjYW0YASABKAsyEy5jb20uc2Nl",
            "bmUuZ3JwYy5DYW0SLAoGZWxtbnRzGAIgAygLMhwuY29tLmNvbnRleHQuZ3Jw",
            "Yy5TY2VuZUVsbW50Eg4KBnVzZXJJZBgDIAEoBypmCgVTdGF0ZRIVChFTVEFU",
            "RV9VTlNQRUNJRklFRBAAEg8KC1NUQVRFX1JFQURZEAESEQoNU1RBVEVfTE9B",
            "RElORxACEg4KClNUQVRFX0lETEUQAxISCg5TVEFURV9GSU5JU0hFRBAEKm4K",
            "B1RyaWdnZXISFwoTVFJJR0dFUl9VTlNQRUNJRklFRBAAEg8KC1RSSUdHRVJf",
            "QUREEAESEgoOVFJJR0dFUl9SRU1PVkUQAhITCg9UUklHR0VSX1JFU1RBUlQQ",
            "AxIQCgxUUklHR0VSX0lOSVQQBCo2CgdDYW1UeXBlEgoKBkxPT0tBVBAAEg8K",
            "C0ZJUlNUUEVSU09OEAESDgoKQ09OVFJPTExFRBACMvcCChJTY2VuZUVuZ2lu",
            "ZVNlcnZpY2USGgoEcGluZxIILlJwY1ZvaWQaCC5ScGNWb2lkEisKBGluaXQS",
            "GS5jb20uc2NlbmUuZ3JwYy5Jbml0U2NlbmUaCC5ScGNWb2lkEhoKBnJlbW92",
            "ZRIGLklkZW50GgguUnBjVm9pZBIXCgNhZGQSBi5JZGVudBoILlJwY1ZvaWQS",
            "GQoFc3RhcnQSBi5JZGVudBoILlJwY1ZvaWQSGwoHcmVzdGFydBIGLklkZW50",
            "GgguUnBjVm9pZBI1Cg5nZXRTeXN0ZW1Nb2RlbBIGLklkZW50GhsuY29tLnNj",
            "ZW5lLmdycGMuU3lzdGVtTW9kZWwSPQoRc3Vic2NyaWJlVmlld1BvcnQSBi5J",
            "ZGVudBoeLmNvbS5zY2VuZS5ncnBjLlZpZXdQb3J0RWxtbnRzMAESNQoLZ2V0",
            "Vmlld1BvcnQSBi5JZGVudBoeLmNvbS5zY2VuZS5ncnBjLlZpZXdQb3J0RWxt",
            "bnRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Common2Reflection.Descriptor, global::Com.Context.Grpc.ContextEngineReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Scene.Grpc.State), typeof(global::Com.Scene.Grpc.Trigger), typeof(global::Com.Scene.Grpc.CamType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Scene.Grpc.InitScene), global::Com.Scene.Grpc.InitScene.Parser, new[]{ "Id", "RscSceneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Scene.Grpc.SystemModel), global::Com.Scene.Grpc.SystemModel.Parser, new[]{ "Id", "State", "LobbyId", "RscSceneId", "ChildItemIds", "ChildAvatarIds", "ChildMapId", "ChildUserIds", "ChildSensorIds", "ChildNPCIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Scene.Grpc.SystemModelList), global::Com.Scene.Grpc.SystemModelList.Parser, new[]{ "Models" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Scene.Grpc.Cam), global::Com.Scene.Grpc.Cam.Parser, new[]{ "Id", "Px", "Py", "Pz", "Rx", "Ry", "Rz", "Fov", "ZNear", "ZFar", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Scene.Grpc.ViewPortElmnts), global::Com.Scene.Grpc.ViewPortElmnts.Parser, new[]{ "Cam", "Elmnts", "UserId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum State {
    [pbr::OriginalName("STATE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("STATE_READY")] Ready = 1,
    [pbr::OriginalName("STATE_LOADING")] Loading = 2,
    [pbr::OriginalName("STATE_IDLE")] Idle = 3,
    [pbr::OriginalName("STATE_FINISHED")] Finished = 4,
  }

  public enum Trigger {
    [pbr::OriginalName("TRIGGER_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("TRIGGER_ADD")] Add = 1,
    [pbr::OriginalName("TRIGGER_REMOVE")] Remove = 2,
    [pbr::OriginalName("TRIGGER_RESTART")] Restart = 3,
    [pbr::OriginalName("TRIGGER_INIT")] Init = 4,
  }

  public enum CamType {
    [pbr::OriginalName("LOOKAT")] Lookat = 0,
    [pbr::OriginalName("FIRSTPERSON")] Firstperson = 1,
    [pbr::OriginalName("CONTROLLED")] Controlled = 2,
  }

  #endregion

  #region Messages
  public sealed partial class InitScene : pb::IMessage<InitScene> {
    private static readonly pb::MessageParser<InitScene> _parser = new pb::MessageParser<InitScene>(() => new InitScene());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Scene.Grpc.SceneEngineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitScene(InitScene other) : this() {
      id_ = other.id_;
      rscSceneId_ = other.rscSceneId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitScene Clone() {
      return new InitScene(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rscSceneId" field.</summary>
    public const int RscSceneIdFieldNumber = 2;
    private uint rscSceneId_;
    /// <summary>
    ///  Quelldaten der Scene
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RscSceneId {
      get { return rscSceneId_; }
      set {
        rscSceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (RscSceneId != other.RscSceneId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (RscSceneId != 0) hash ^= RscSceneId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (RscSceneId != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(RscSceneId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (RscSceneId != 0) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitScene other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.RscSceneId != 0) {
        RscSceneId = other.RscSceneId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 21: {
            RscSceneId = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SystemModel : pb::IMessage<SystemModel> {
    private static readonly pb::MessageParser<SystemModel> _parser = new pb::MessageParser<SystemModel>(() => new SystemModel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Scene.Grpc.SceneEngineReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemModel(SystemModel other) : this() {
      id_ = other.id_;
      state_ = other.state_;
      lobbyId_ = other.lobbyId_;
      rscSceneId_ = other.rscSceneId_;
      childItemIds_ = other.childItemIds_.Clone();
      childAvatarIds_ = other.childAvatarIds_.Clone();
      childMapId_ = other.childMapId_;
      childUserIds_ = other.childUserIds_.Clone();
      childSensorIds_ = other.childSensorIds_.Clone();
      childNPCIds_ = other.childNPCIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemModel Clone() {
      return new SystemModel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Com.Scene.Grpc.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Scene.Grpc.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "lobbyId" field.</summary>
    public const int LobbyIdFieldNumber = 3;
    private uint lobbyId_;
    /// <summary>
    ///  Wird beim READY generiert!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LobbyId {
      get { return lobbyId_; }
      set {
        lobbyId_ = value;
      }
    }

    /// <summary>Field number for the "rscSceneId" field.</summary>
    public const int RscSceneIdFieldNumber = 4;
    private uint rscSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RscSceneId {
      get { return rscSceneId_; }
      set {
        rscSceneId_ = value;
      }
    }

    /// <summary>Field number for the "childItemIds" field.</summary>
    public const int ChildItemIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_childItemIds_codec
        = pb::FieldCodec.ForFixed32(42);
    private readonly pbc::RepeatedField<uint> childItemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  jedes child ist über Subscriptions gekoppelt. Nur für reconnections erforderlich
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ChildItemIds {
      get { return childItemIds_; }
    }

    /// <summary>Field number for the "childAvatarIds" field.</summary>
    public const int ChildAvatarIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_childAvatarIds_codec
        = pb::FieldCodec.ForFixed32(50);
    private readonly pbc::RepeatedField<uint> childAvatarIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ChildAvatarIds {
      get { return childAvatarIds_; }
    }

    /// <summary>Field number for the "childMapId" field.</summary>
    public const int ChildMapIdFieldNumber = 7;
    private uint childMapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChildMapId {
      get { return childMapId_; }
      set {
        childMapId_ = value;
      }
    }

    /// <summary>Field number for the "childUserIds" field.</summary>
    public const int ChildUserIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_childUserIds_codec
        = pb::FieldCodec.ForFixed32(66);
    private readonly pbc::RepeatedField<uint> childUserIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ChildUserIds {
      get { return childUserIds_; }
    }

    /// <summary>Field number for the "childSensorIds" field.</summary>
    public const int ChildSensorIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_childSensorIds_codec
        = pb::FieldCodec.ForFixed32(74);
    private readonly pbc::RepeatedField<uint> childSensorIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ChildSensorIds {
      get { return childSensorIds_; }
    }

    /// <summary>Field number for the "childNPCIds" field.</summary>
    public const int ChildNPCIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_childNPCIds_codec
        = pb::FieldCodec.ForFixed32(82);
    private readonly pbc::RepeatedField<uint> childNPCIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  Non-Playable-Characters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ChildNPCIds {
      get { return childNPCIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (State != other.State) return false;
      if (LobbyId != other.LobbyId) return false;
      if (RscSceneId != other.RscSceneId) return false;
      if(!childItemIds_.Equals(other.childItemIds_)) return false;
      if(!childAvatarIds_.Equals(other.childAvatarIds_)) return false;
      if (ChildMapId != other.ChildMapId) return false;
      if(!childUserIds_.Equals(other.childUserIds_)) return false;
      if(!childSensorIds_.Equals(other.childSensorIds_)) return false;
      if(!childNPCIds_.Equals(other.childNPCIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (LobbyId != 0) hash ^= LobbyId.GetHashCode();
      if (RscSceneId != 0) hash ^= RscSceneId.GetHashCode();
      hash ^= childItemIds_.GetHashCode();
      hash ^= childAvatarIds_.GetHashCode();
      if (ChildMapId != 0) hash ^= ChildMapId.GetHashCode();
      hash ^= childUserIds_.GetHashCode();
      hash ^= childSensorIds_.GetHashCode();
      hash ^= childNPCIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (LobbyId != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(LobbyId);
      }
      if (RscSceneId != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(RscSceneId);
      }
      childItemIds_.WriteTo(output, _repeated_childItemIds_codec);
      childAvatarIds_.WriteTo(output, _repeated_childAvatarIds_codec);
      if (ChildMapId != 0) {
        output.WriteRawTag(61);
        output.WriteFixed32(ChildMapId);
      }
      childUserIds_.WriteTo(output, _repeated_childUserIds_codec);
      childSensorIds_.WriteTo(output, _repeated_childSensorIds_codec);
      childNPCIds_.WriteTo(output, _repeated_childNPCIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (LobbyId != 0) {
        size += 1 + 4;
      }
      if (RscSceneId != 0) {
        size += 1 + 4;
      }
      size += childItemIds_.CalculateSize(_repeated_childItemIds_codec);
      size += childAvatarIds_.CalculateSize(_repeated_childAvatarIds_codec);
      if (ChildMapId != 0) {
        size += 1 + 4;
      }
      size += childUserIds_.CalculateSize(_repeated_childUserIds_codec);
      size += childSensorIds_.CalculateSize(_repeated_childSensorIds_codec);
      size += childNPCIds_.CalculateSize(_repeated_childNPCIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemModel other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.LobbyId != 0) {
        LobbyId = other.LobbyId;
      }
      if (other.RscSceneId != 0) {
        RscSceneId = other.RscSceneId;
      }
      childItemIds_.Add(other.childItemIds_);
      childAvatarIds_.Add(other.childAvatarIds_);
      if (other.ChildMapId != 0) {
        ChildMapId = other.ChildMapId;
      }
      childUserIds_.Add(other.childUserIds_);
      childSensorIds_.Add(other.childSensorIds_);
      childNPCIds_.Add(other.childNPCIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 16: {
            state_ = (global::Com.Scene.Grpc.State) input.ReadEnum();
            break;
          }
          case 29: {
            LobbyId = input.ReadFixed32();
            break;
          }
          case 37: {
            RscSceneId = input.ReadFixed32();
            break;
          }
          case 42:
          case 45: {
            childItemIds_.AddEntriesFrom(input, _repeated_childItemIds_codec);
            break;
          }
          case 50:
          case 53: {
            childAvatarIds_.AddEntriesFrom(input, _repeated_childAvatarIds_codec);
            break;
          }
          case 61: {
            ChildMapId = input.ReadFixed32();
            break;
          }
          case 66:
          case 69: {
            childUserIds_.AddEntriesFrom(input, _repeated_childUserIds_codec);
            break;
          }
          case 74:
          case 77: {
            childSensorIds_.AddEntriesFrom(input, _repeated_childSensorIds_codec);
            break;
          }
          case 82:
          case 85: {
            childNPCIds_.AddEntriesFrom(input, _repeated_childNPCIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SystemModelList : pb::IMessage<SystemModelList> {
    private static readonly pb::MessageParser<SystemModelList> _parser = new pb::MessageParser<SystemModelList>(() => new SystemModelList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemModelList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Scene.Grpc.SceneEngineReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemModelList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemModelList(SystemModelList other) : this() {
      models_ = other.models_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemModelList Clone() {
      return new SystemModelList(this);
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.Scene.Grpc.SystemModel> _repeated_models_codec
        = pb::FieldCodec.ForMessage(10, global::Com.Scene.Grpc.SystemModel.Parser);
    private readonly pbc::RepeatedField<global::Com.Scene.Grpc.SystemModel> models_ = new pbc::RepeatedField<global::Com.Scene.Grpc.SystemModel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Scene.Grpc.SystemModel> Models {
      get { return models_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemModelList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemModelList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!models_.Equals(other.models_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= models_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      models_.WriteTo(output, _repeated_models_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += models_.CalculateSize(_repeated_models_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemModelList other) {
      if (other == null) {
        return;
      }
      models_.Add(other.models_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cam : pb::IMessage<Cam> {
    private static readonly pb::MessageParser<Cam> _parser = new pb::MessageParser<Cam>(() => new Cam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Scene.Grpc.SceneEngineReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cam(Cam other) : this() {
      id_ = other.id_;
      px_ = other.px_;
      py_ = other.py_;
      pz_ = other.pz_;
      rx_ = other.rx_;
      ry_ = other.ry_;
      rz_ = other.rz_;
      fov_ = other.fov_;
      zNear_ = other.zNear_;
      zFar_ = other.zFar_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cam Clone() {
      return new Cam(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 2;
    private float px_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 3;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 4;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 5;
    private float rx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 6;
    private float ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 7;
    private float rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    /// <summary>Field number for the "fov" field.</summary>
    public const int FovFieldNumber = 8;
    private float fov_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fov {
      get { return fov_; }
      set {
        fov_ = value;
      }
    }

    /// <summary>Field number for the "zNear" field.</summary>
    public const int ZNearFieldNumber = 9;
    private float zNear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZNear {
      get { return zNear_; }
      set {
        zNear_ = value;
      }
    }

    /// <summary>Field number for the "zFar" field.</summary>
    public const int ZFarFieldNumber = 10;
    private float zFar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZFar {
      get { return zFar_; }
      set {
        zFar_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private global::Com.Scene.Grpc.CamType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Scene.Grpc.CamType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Px != other.Px) return false;
      if (Py != other.Py) return false;
      if (Pz != other.Pz) return false;
      if (Rx != other.Rx) return false;
      if (Ry != other.Ry) return false;
      if (Rz != other.Rz) return false;
      if (Fov != other.Fov) return false;
      if (ZNear != other.ZNear) return false;
      if (ZFar != other.ZFar) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Px != 0F) hash ^= Px.GetHashCode();
      if (Py != 0F) hash ^= Py.GetHashCode();
      if (Pz != 0F) hash ^= Pz.GetHashCode();
      if (Rx != 0F) hash ^= Rx.GetHashCode();
      if (Ry != 0F) hash ^= Ry.GetHashCode();
      if (Rz != 0F) hash ^= Rz.GetHashCode();
      if (Fov != 0F) hash ^= Fov.GetHashCode();
      if (ZNear != 0F) hash ^= ZNear.GetHashCode();
      if (ZFar != 0F) hash ^= ZFar.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (Px != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rz);
      }
      if (Fov != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Fov);
      }
      if (ZNear != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ZNear);
      }
      if (ZFar != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ZFar);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      if (Rx != 0F) {
        size += 1 + 4;
      }
      if (Ry != 0F) {
        size += 1 + 4;
      }
      if (Rz != 0F) {
        size += 1 + 4;
      }
      if (Fov != 0F) {
        size += 1 + 4;
      }
      if (ZNear != 0F) {
        size += 1 + 4;
      }
      if (ZFar != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Px != 0F) {
        Px = other.Px;
      }
      if (other.Py != 0F) {
        Py = other.Py;
      }
      if (other.Pz != 0F) {
        Pz = other.Pz;
      }
      if (other.Rx != 0F) {
        Rx = other.Rx;
      }
      if (other.Ry != 0F) {
        Ry = other.Ry;
      }
      if (other.Rz != 0F) {
        Rz = other.Rz;
      }
      if (other.Fov != 0F) {
        Fov = other.Fov;
      }
      if (other.ZNear != 0F) {
        ZNear = other.ZNear;
      }
      if (other.ZFar != 0F) {
        ZFar = other.ZFar;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 21: {
            Px = input.ReadFloat();
            break;
          }
          case 29: {
            Py = input.ReadFloat();
            break;
          }
          case 37: {
            Pz = input.ReadFloat();
            break;
          }
          case 45: {
            Rx = input.ReadFloat();
            break;
          }
          case 53: {
            Ry = input.ReadFloat();
            break;
          }
          case 61: {
            Rz = input.ReadFloat();
            break;
          }
          case 69: {
            Fov = input.ReadFloat();
            break;
          }
          case 77: {
            ZNear = input.ReadFloat();
            break;
          }
          case 85: {
            ZFar = input.ReadFloat();
            break;
          }
          case 88: {
            type_ = (global::Com.Scene.Grpc.CamType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewPortElmnts : pb::IMessage<ViewPortElmnts> {
    private static readonly pb::MessageParser<ViewPortElmnts> _parser = new pb::MessageParser<ViewPortElmnts>(() => new ViewPortElmnts());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewPortElmnts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Scene.Grpc.SceneEngineReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewPortElmnts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewPortElmnts(ViewPortElmnts other) : this() {
      Cam = other.cam_ != null ? other.Cam.Clone() : null;
      elmnts_ = other.elmnts_.Clone();
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewPortElmnts Clone() {
      return new ViewPortElmnts(this);
    }

    /// <summary>Field number for the "cam" field.</summary>
    public const int CamFieldNumber = 1;
    private global::Com.Scene.Grpc.Cam cam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Scene.Grpc.Cam Cam {
      get { return cam_; }
      set {
        cam_ = value;
      }
    }

    /// <summary>Field number for the "elmnts" field.</summary>
    public const int ElmntsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Context.Grpc.SceneElmnt> _repeated_elmnts_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Context.Grpc.SceneElmnt.Parser);
    private readonly pbc::RepeatedField<global::Com.Context.Grpc.SceneElmnt> elmnts_ = new pbc::RepeatedField<global::Com.Context.Grpc.SceneElmnt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Context.Grpc.SceneElmnt> Elmnts {
      get { return elmnts_; }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewPortElmnts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewPortElmnts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Cam, other.Cam)) return false;
      if(!elmnts_.Equals(other.elmnts_)) return false;
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cam_ != null) hash ^= Cam.GetHashCode();
      hash ^= elmnts_.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cam_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cam);
      }
      elmnts_.WriteTo(output, _repeated_elmnts_codec);
      if (UserId != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cam);
      }
      size += elmnts_.CalculateSize(_repeated_elmnts_codec);
      if (UserId != 0) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewPortElmnts other) {
      if (other == null) {
        return;
      }
      if (other.cam_ != null) {
        if (cam_ == null) {
          cam_ = new global::Com.Scene.Grpc.Cam();
        }
        Cam.MergeFrom(other.Cam);
      }
      elmnts_.Add(other.elmnts_);
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cam_ == null) {
              cam_ = new global::Com.Scene.Grpc.Cam();
            }
            input.ReadMessage(cam_);
            break;
          }
          case 18: {
            elmnts_.AddEntriesFrom(input, _repeated_elmnts_codec);
            break;
          }
          case 29: {
            UserId = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
